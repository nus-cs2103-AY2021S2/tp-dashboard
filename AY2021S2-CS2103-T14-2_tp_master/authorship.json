[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-T14-2/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2021S2-CS2103-T14-2/tp/actions/workflows/gradle.yml)"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":""},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"\u003cdiv align\u003d\"center\"\u003e"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"    \u003cimg alt\u003d\"Logo\" src\u003d\"docs/images/Logo.png\"\u003e"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"\u003c/div\u003e"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":""},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"* The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) "},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"and packaged with a Graphical User Interface (GUI)."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"* The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food "},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"options tasted in the vicinity of NUS."},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"* The Food Diary will allow students to save time and effort when finding places to eat around the NUS vicinity."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"\u003cdiv align\u003d\"center\"\u003e"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"    \u003cimg alt\u003d\"Ui\" src\u003d\"docs/images/Ui.png\"\u003e"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"\u003c/div\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"## Acknowledgements"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"## Site Map"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"* For new users who are new to using The Food Diary, visit [User Guide](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/docs/UserGuide.md)"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"* For more detailed documentation of our The Food Diary, visit [Developer Guide](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/docs/DeveloperGuide.md)"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"* [About Us](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/docs/AboutUs.md)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"### Libraries Used:"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"* JavaFX"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"* Jackson"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"* JUnit5"}],"authorContributionMap":{"marcusleeeugene":7,"Donavanty":15,"DineshMagesvaran":1,"Prabhakaran-Gokul":3,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Prabhakaran Gokul"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003cimg src\u003d\"images/prabhakaran-gokul.png\" width\u003d\"200px\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"[[github](https://github.com/Prabhakaran-Gokul/)]"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"[[portfolio](team/prabhakarangokul.md)]"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Role: Developer"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Responsibilities: Integration"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"### Donavan Lim"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"\u003cimg src\u003d\"images/donavanty.png\" width\u003d\"200px\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"[[github](https://github.com/donavanty)]"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"[[portfolio](team/donavanty.md)]"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"* Role: Developer"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"* Responsibilities: Documentation"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"### Dinesh S/O Magesvaran"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"\u003cimg src\u003d\"images/dineshmagesvaran.png\" width\u003d\"200px\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"[[github](http://github.com/dineshmagesvaran)]"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"[[portfolio](team/dineshmagesvaran.md)]"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"* Responsibilities: Testing"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"### Chong Sidney"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"\u003cimg src\u003d\"images/sidney011100.png\" width\u003d\"200px\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"[[github](http://github.com/sidney011100)]"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"[[portfolio](team/sidney011100.md)]"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"* Responsibilities: Deliverables and Deadlines"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"### Marcus Lee Eugene"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"\u003cimg src\u003d\"images/marcusleeeugene.png\" width\u003d\"200px\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"[[github](http://github.com/marcusleeeugene)]"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"[[portfolio](team/marcusleeeugene.md)]"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"* Role: Team Lead, Developer"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"* Responsibilities: Scheduling and tracking, Code quality"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"* [Git] expert"}],"authorContributionMap":{"marcusleeeugene":7,"Donavanty":6,"Sidney011100":5,"DineshMagesvaran":5,"-":24,"Prabhakaran-Gokul":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## Developer Guide for v1.2"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## Table of contents"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- Description of Application "},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- Appendix: Requirements "},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Product Scope"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - User Stories"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Use Cases"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Non-Functional Requirements "},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Glossary "},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - UI Mock-Up"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    "},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"## **Description**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary is a **desktop app for managing food diary entries**, optimized with a Command Line Interface (CLI) and packaged with a Graphical User Interface (GUI)."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary **caters to food-passionate NUS students** who would ideally benefit from keeping records of food options tasted in the vicinity of NUS."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary will **allow students to save time and effort** when finding places to eat around the NUS vicinity. The Food Diary especially caters to students chiefly on 3 aspects:"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"1. The ability for users to log personal food reviews tagged under different categories for future reference;"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"1. The ability to effortlessly reference food options based on relevant filters in a user-friendly GUI; and"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"1. The ability to import and export their personal food diary to share with friends."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"This product caters to food-fervent NUS students who would ideally benefit from"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"keeping records of food options tasted in the vicinity of NUS."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"* can type fast and prefers typing to mouse interactions"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"**Value proposition**:"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"The Food Diary will allow NUS foodies to save time and effort when finding places to eat around the NUS vicinity."},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"The Food Diary especially caters to students chiefly on 3 aspects"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"– One, the ability for users to log personal food reviews tagged under different categories for future reference;"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"Two, the ability to effortlessly reference food options based on relevant filters in a user-friendly GUI;"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"and Three, the ability to import and export their personal food diary to share with friends."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"| Priority| As a …​                                                       | I want to …​                                  | So that I can…​                                             |"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"| ------- | ---------------------------------------------------------------- | ------------------------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| `* * *` | User wanting to add a review of food experience to a particular restaurant | Add a review of food experience                  | refer back to the particular element that defined my food experience  |"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"| `* * *` | User with little patience and time                               | Add names of places I have visited               | efficiently add a review to a place I have visited               |"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"| `* *`   | User who wants to look at the places I have visited              | View the list of experiences I have had          | easily show them to my friends              |"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"| `* * *` | Student trying to decide where to eat                            | Look at the places i have visited before         | decide where I shall re-visit                                          |"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"| `* * *` | User who would like to create custom category of food place      | Add the category of the place                    | I can have a specific view of certain places                           |"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"| `* * *` | User who does not want to visit a place again                    | Remove the place                                 | reduce redundant food places in my list                           |"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"| `* * *` | User who wants to remember food ratings | Give a rating on the overall food experience | I can gauge/ballpark the satisfaction level I get against other food experiences           |"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"| `* * *` | As a user deciding to revisit a place | Expand all the reviews of an entry | Read all the reviews in a glance           |"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"(For all use cases below, the **System** is the `Food Diary` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC01: Add a restaurant**"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1.  User adds a restaurant"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2.  Food Diary adds a new restaurant to the app."},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    Use case ends."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"* 1a.  Food Diary detects invalid command from user."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"    *   1a1. Food Diary warns user about wrong syntax."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    *\t1a2. User enters correct syntax"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         Use case resumes from step 2"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. Food Diary detects duplicate restaurant that is already reviewed"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    *\t2a1. Food Diary warns user about duplicate"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    *\t2a2. Suggests user to either delete or update review"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"         Use case ends."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"**UC02: List all restaurants**"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"1.  User requests to list all restaurants."},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"2.  Food Diary displays all the restaurants."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"* 1a. Food Diary detects invalid command from user."},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"Donavanty"},"content":"    * 1a1. Food Diary warns user about wrong syntax."},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"    * 1a2. User enters correct syntax."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"      Use case resumes from step 2."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"* 2a. No Restaurants to display."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"    * 2a1. Tells users that there are no restaurants."},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"    * 1a2. User enters correct syntax."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"      Use case ends."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"**UC04: Add category**"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"**MSS**"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"1. User adds a new category"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"2. Food Diary adds the new category into the app"},{"lineNumber":128,"author":{"gitId":"Sidney011100"},"content":"3. Food Diary displays the new category added in a tag"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"   "},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"Use case ends."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":"**Extensions**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"* 1a. Food Diary detects invalid command from user"},{"lineNumber":135,"author":{"gitId":"DineshMagesvaran"},"content":"    * 1a1. Food Diary warns user about wrong syntax"},{"lineNumber":136,"author":{"gitId":"DineshMagesvaran"},"content":"    * 1a2. User enters correct syntax"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"      "},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":"      Use case resumes from step 2"},{"lineNumber":139,"author":{"gitId":"DineshMagesvaran"},"content":"* 1b. New category already exists"},{"lineNumber":140,"author":{"gitId":"DineshMagesvaran"},"content":"    * 1b1. Food Diary tells user that the category already exists"},{"lineNumber":141,"author":{"gitId":"DineshMagesvaran"},"content":"      "},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"      Use case ends."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC05: Add food experience of Restaurant**"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User requests to add some information about the food experience with a restaurant"},{"lineNumber":149,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food Diary requests for restaurant details and food experience"},{"lineNumber":150,"author":{"gitId":"Prabhakaran-Gokul"},"content":"3. User keys in the restaurant details and food experience"},{"lineNumber":151,"author":{"gitId":"Prabhakaran-Gokul"},"content":"4. Food Diary adds the food experience to the requested restaurant"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Extensions**:"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 1a. Food Diary detects invalid command from user"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a1. Food Diary warns user about wrong syntax"},{"lineNumber":157,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a2. User enters correct syntax"},{"lineNumber":158,"author":{"gitId":"Sidney011100"},"content":"      "},{"lineNumber":159,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      Use case resumes from step 2"},{"lineNumber":160,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. No restaurant found"},{"lineNumber":161,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 2a1. Food Diary tells user that no restaurants found"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"      Use case ends."},{"lineNumber":164,"author":{"gitId":"-"},"content":"    "},{"lineNumber":165,"author":{"gitId":"marcusleeeugene"},"content":"    *\t2a2. Suggests user to either delete or update review"},{"lineNumber":166,"author":{"gitId":"marcusleeeugene"},"content":"         "},{"lineNumber":167,"author":{"gitId":"marcusleeeugene"},"content":"         Use case ends."},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"Sidney011100"},"content":"**UC06: Delete a Restaurant**"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"Sidney011100"},"content":"**MSS**"},{"lineNumber":172,"author":{"gitId":"Sidney011100"},"content":"1. User deletes a restaurant or food place"},{"lineNumber":173,"author":{"gitId":"Sidney011100"},"content":"2. Food diary removes the restaurant from list "},{"lineNumber":174,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":175,"author":{"gitId":"Sidney011100"},"content":"**Extensions**:"},{"lineNumber":176,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food diary detects invalid command from user "},{"lineNumber":177,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax"},{"lineNumber":178,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax"},{"lineNumber":179,"author":{"gitId":"Sidney011100"},"content":"    "},{"lineNumber":180,"author":{"gitId":"Sidney011100"},"content":"* 2a. No restaurants found "},{"lineNumber":181,"author":{"gitId":"Sidney011100"},"content":"    * 2a1. Food Diary tells user that no restaurants found."},{"lineNumber":182,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":183,"author":{"gitId":"Sidney011100"},"content":"      Use case ends."},{"lineNumber":184,"author":{"gitId":"Sidney011100"},"content":"    "},{"lineNumber":185,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"marcusleeeugene"},"content":"Non-functional requirements specify the constraints under which the system for The Food Diary is developed and operated."},{"lineNumber":188,"author":{"gitId":"marcusleeeugene"},"content":"The Food Diary system is made up of the front-end, which is interchangeably referred to as the User Interface (UI), "},{"lineNumber":189,"author":{"gitId":"marcusleeeugene"},"content":"and the back-end, which handles data management and operations."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"marcusleeeugene"},"content":"#### Technical requirements:"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"marcusleeeugene"},"content":"* The system should be operable on Windows, MacOS and Linux operating systems, with Java 11 or above installed."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"marcusleeeugene"},"content":"#### Performance requirements:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"marcusleeeugene"},"content":"* The system should be loaded up within 2 seconds or less."},{"lineNumber":198,"author":{"gitId":"marcusleeeugene"},"content":"* The UI should appear within 2 seconds or less and be responsive to User input."},{"lineNumber":199,"author":{"gitId":"marcusleeeugene"},"content":"* The back-end should be responsive to processing User input at the same time the UI appears."},{"lineNumber":200,"author":{"gitId":"marcusleeeugene"},"content":"* The back-end should be able to handle 1,000 or more data entries (Food Diary entries) without noticeable sluggishness "},{"lineNumber":201,"author":{"gitId":"marcusleeeugene"},"content":"  in performance for typical usage."},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"marcusleeeugene"},"content":"#### Usability requirements:"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"marcusleeeugene"},"content":"* The user should have access to a keyboard, and be proficient with typing alphanumeric English characters for commands "},{"lineNumber":206,"author":{"gitId":"marcusleeeugene"},"content":"  to accomplish most of the usages of The Food Diary."},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"Prabhakaran-Gokul"},"content":"#### Project scope:"},{"lineNumber":209,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* The system should mainly comprise the handling of Food Diary-entry addition, deletion, and listing."},{"lineNumber":210,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* The system would not be responsible for features involving multiple users"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"Prabhakaran-Gokul"},"content":"#### Scalability requirements:"},{"lineNumber":213,"author":{"gitId":"Donavanty"},"content":"* The system can handle a larger user base with many more food reviews being added to it"},{"lineNumber":214,"author":{"gitId":"Donavanty"},"content":"* Program is extendable for future addition of features easily "},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"Prabhakaran-Gokul"},"content":"#### Other Noteworthy Points:"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* The system should preserve data keyed in by the user"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":221,"author":{"gitId":"Donavanty"},"content":"The glossary serves to ensure that all stakeholders, including users, have a common understanding of the noteworthy terms, and abbreviations."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"Donavanty"},"content":"* **Sluggishness**: The system starts to be slow in displaying user input when typed, and processing user input when entered."},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"Sidney011100"},"content":"### UI Mockup"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"Sidney011100"},"content":"![Ui Mock-up](images/Ui.png)"}],"authorContributionMap":{"marcusleeeugene":31,"Donavanty":7,"Sidney011100":33,"DineshMagesvaran":24,"-":94,"Prabhakaran-Gokul":38}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"###  Done by (CS2103-T14-2):"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"Donavan Lim, Marcus Lee Eugene, Chong Sidney, Dinesh S/O Magesvaran, Prabhakaran Gokul"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"---"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"  "},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"    * Description"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    * Features"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"        * add"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"        * delete"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"        * list"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"        * find"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"        * findall"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"        * view"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    * Command Summary"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"    * UI mock-up"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    "},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"## Description"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) and packaged with a Graphical User Interface (GUI)."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food options tasted in the vicinity of NUS."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"The Food Diary will allow students to save time and effort when finding places to "},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"eat around the NUS vicinity. The Food Diary especially caters to students chiefly on 3 aspects:"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"1. The ability for users to log personal food reviews tagged under different categories for future reference."},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"2. The ability to effortlessly reference food options based on relevant filters in a user-friendly GUI"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"3. The ability to import and export their personal food diary to share with friends."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"### View all the food reviews : `list`"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"Lists all the restaurants with food reviews."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"Parameter: none"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"Example:"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"(Refer to mockup)"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"### Add a food review: `add`"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"Adds a food review to the Food Diary."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Format: `add n/\u003cRESTAURANT NAME\u003e ra/RATING re/REVIEW a/ADDRESS c/CATEGORIES`"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"    "},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"Parameters:"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"    "},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"   1. `Name (of restaurant)`"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"   2. `Rating`  "},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"   3. `Address`"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   4. `Review`"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"   5. `Categories (tag)`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"Example:"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"    "},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    add  n/Al Amaan Restaurant ra/5 re/best for Butter Chicken a/12 Clementi Rd, Singapore 129742 c/Indian Muslim"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"    "},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"    "},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"### Delete a food review: `delete`"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"    "},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"Deletes a food review from the Food Diary."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"Format: `delete n/NAME` or `delete i/INDEX`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"Parameter: `Restaurant name` or `Index`"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"   "},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"Example:"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"   "},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"    delete n/McDonald’s Clementi Mall"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"### Find for any food reviews"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"Finds for food reviews whose names, ratings, address and categories match any of the provided keywords."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"Format: `find KEYWORDS`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"Parameter: `Restaurant name` or `Rating` or `Address` or `Categories`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"Example:"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"    "},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"    find kfc"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"    "},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"    find fastfood indian"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"    find clementi 5/5"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"### Find for specific food reviews"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"Finds for food reviews whose names, ratings, address and categories match all of the provided keywords."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"Format: `findall KEYWORDS`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"Parameter: `Restaurant name` or `Rating` or `Address` or `Categories`"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"Example:"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"    find clementi fastfood 5/5"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"### View specific food reviews"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"Opens up a window, showing the details of a specified food review in a full expanded view."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"Format: `view \u003cINDEX\u003e`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"Parameter: `Index of food review` "},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":"Example:"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"    view 1"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"marcusleeeugene"},"content":"-------------------------------------------------------------------------------------"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":129,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Add** | `add n/\u003cRESTAURANT NAME\u003e ra/5 re/REVIEW a/ADDRESS c/CATEGORIES` \u003cbr\u003e e.g., `add  n/Al Amaan Restaurant ra/4 re/best for Butter Chicken a/12 Clementi Rd, Singapore 129742 c/Indian Muslim`"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":"**Delete** | `delete n/NAME or delete i/INDEX` \u003cbr\u003e e.g., `delete n/Al Amaan Restaurant or delete i/1`"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"**Find** | `find kfc`"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"**FindAll** |`findall clementi fastfood 5/5`"},{"lineNumber":135,"author":{"gitId":"marcusleeeugene"},"content":"**View** |`view 1`"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":137,"author":{"gitId":"Sidney011100"},"content":"## \u003ccenter\u003e Appendix \u003c/center\u003e "},{"lineNumber":138,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### UI Mock-up "},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":141,"author":{"gitId":"Sidney011100"},"content":"![Ui Mock-up](images/Ui.png)"}],"authorContributionMap":{"marcusleeeugene":21,"Donavanty":17,"Sidney011100":10,"DineshMagesvaran":31,"-":54,"Prabhakaran-Gokul":8}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"title: Food Diary"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**FoodDiary is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* If you are interested in using FoodDiary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* If you are interested about developing FoodDiary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"Sidney011100":1,"-":15,"Prabhakaran-Gokul":3}},{"path":"docs/team/donavanty.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"title: Donavan\u0027s Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"Donavanty":1,"-":45}},{"path":"docs/team/marcusleeeugene.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"\u003ch1 align\u003d\"center\"\u003e Hello, \u003c𝚌𝚘𝚍𝚎𝚛𝚜/\u003e! 😊\u003c/h1\u003e"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c!--About Me--\u003e"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003ch2\u003e About Me 💁🏼‍♂️ \u003c/h2\u003e"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"  \u003cb\u003e Name: Marcus Lee Eugene \u003c/b\u003e\u003cbr\u003e "},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"  \u003cb\u003e Age: 23 \u003c/b\u003e\u003cbr\u003e"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"  \u003cb\u003e Location: Singapore \u003c/b\u003e\u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"  I am a Year 2 Computer Science student at the National University of Singapore (NUS). 🇸🇬"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"  I am currently interested in Mobile Application Development 📱 and in Embedded Systems 🤖. I would like to specialize in Software Engineering in the future."},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"  Aside from programming, I enjoy travelling ✈️ and making videos 🎥."},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"\u003c!--Skills--\u003e"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"\u003ch2\u003e Dev Skills 👨🏼‍💻 \u003c/h2\u003e"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"  \u003cul\u003e"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e Javascript \u003c/li\u003e"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e Java \u003c/li\u003e"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e Python \u003c/li\u003e"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e C# \u003c/li\u003e"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e SQL \u003c/li\u003e"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e Visual Basic \u003c/li\u003e"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cli\u003e HTML/CSS \u003c/li\u003e"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"  \u003c/ul\u003e"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"\u003c!--Social Media--\u003e"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"\u003ch2\u003e Social Media 🌟\u003c/h2\u003e"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"  \u003ca href\u003d\"https://www.github.com/marcusleeeugene\"\u003e"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"     \u003cimg alt\u003d\"github\" src\u003d\"https://camo.githubusercontent.com/d0518022b7a02d405ad5112a0c8aa455cbfe952e/68747470733a2f2f6564656e742e6769746875622e696f2f537570657254696e7949636f6e732f696d616765732f7376672f6769746875622e737667\""},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     height\u003d\"40\"\u003e"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"  \u003c/a\u003e \u0026nbsp;"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"  \u003ca href\u003d\"https://www.linkedin.com/in/marcus-lee-eugene-7a4006114/\"\u003e"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     \u003cimg alt\u003d\"linkedin\" src\u003d\"https://camo.githubusercontent.com/45e6bebceba49c2cf76b1b3770b1adbe24e6c454/68747470733a2f2f6564656e742e6769746875622e696f2f537570657254696e7949636f6e732f696d616765732f7376672f6c696e6b6564696e2e737667\""},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"     height\u003d\"40\"\u003e"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"  \u003c/a\u003e \u0026nbsp;"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"  \u003ca href\u003d\"https://www.instagram.com/marcusadventurez\"\u003e"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"     \u003cimg alt\u003d\"instagram\" src\u003d\"https://camo.githubusercontent.com/68ff38b86f01b428567dcc406116e23728245f4e/68747470733a2f2f6564656e742e6769746875622e696f2f537570657254696e7949636f6e732f696d616765732f7376672f696e7374616772616d2e737667\""},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"     height\u003d\"40\"\u003e"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"  \u003c/a\u003e \u0026nbsp;"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"  \u003ca href\u003d\"https://www.youtube.com/user/Marcuspwnubad\"\u003e"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"     \u003cimg alt\u003d\"youtube\" src\u003d\"https://camo.githubusercontent.com/0f31a4f7adb78461ca03dfaad4a138eedf0d14e0/68747470733a2f2f6564656e742e6769746875622e696f2f537570657254696e7949636f6e732f696d616765732f7376672f796f75747562652e737667\""},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"     height\u003d\"40\"\u003e"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"  \u003c/a\u003e"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"\u003cp\u003e"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"  Portfolio Website: \u003ca href\u003d\"https://marcusleeeugene.github.io/\"\u003e https://marcusleeeugene.github.io/ \u003c/a\u003e"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/p\u003e"}],"authorContributionMap":{"marcusleeeugene":56}},{"path":"docs/team/prabhakarangokul.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Hi there 👋"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"I am Year 3 Undergraduate student at the National University of Singapore. I major in Mechanical Engineering, minor in Computer Science and Specialize in Robotics."},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- 🔭 I’m currently working on visualizing and comparing the performance of popular path planning algorithms used in Robotics"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- 🌱 I’m currently learning control systems and Software Engineering"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- 👯 I’m looking to collaborate on interesting Robotics software projects"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- ⚡ Fun fact: Apart from programming and designing Mechanical systems, I like playing Soccer"}],"authorContributionMap":{"Prabhakaran-Gokul":8}},{"path":"docs/team/sidney011100.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Sidney011100"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"title: Sidney011100\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"* **New Feature**:"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"* **New Feature**:"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"* **Project management**:"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"* **Enhancements to existing features**:"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"* **Documentation**:"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"* **Community**:"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"* **Tools**:"}],"authorContributionMap":{"Sidney011100":19}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"\u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"9482424\","},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"marcusleeeugene":2,"-":101}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"            + PREFIX_RATING + \"RATING \""},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + PREFIX_REVIEW + \"REVIEW \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"            + PREFIX_RATING + \"5 \""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + PREFIX_REVIEW + \"I like this food a lot! \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + PREFIX_TAG + \"FastFood \""},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + PREFIX_TAG + \"Vegan\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"-":59,"Prabhakaran-Gokul":5}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    /** A view of the specified entry should be shown to the user. */"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    private final boolean viewEntry;"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    private final HashMap\u003cString, String\u003e personDetails;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructs a {@code CommandResult} with the specified fields,"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"     * used for help command"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    public CommandResult(HashMap\u003cString, String\u003e personDetails, String feedbackToUser, boolean showHelp,"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"                         boolean viewEntry, boolean exit) {"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        this.personDetails \u003d personDetails;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        this.viewEntry \u003d viewEntry;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        this(null, feedbackToUser, false, false, false);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isViewEntry() {"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"        return viewEntry;"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    public HashMap\u003cString, String\u003e getPersonDetails() {"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"        return personDetails;"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":21,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"            + \"[\" + PREFIX_RATING + \"PHONE] \""},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"[\" + PREFIX_REVIEW + \"REVIEW] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"            + PREFIX_RATING + \"91234567 \""},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + PREFIX_REVIEW + \"I like this food a lot!\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Review updatedReview \u003d editPersonDescriptor.getReview().orElse(personToEdit.getReview());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Person(updatedName, updatedRating, updatedReview, updatedAddress, updatedTags);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":129,"author":{"gitId":"marcusleeeugene"},"content":"        private Rating rating;"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        private Review review;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":142,"author":{"gitId":"marcusleeeugene"},"content":"            setRating(toCopy.rating);"},{"lineNumber":143,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            setReview(toCopy.review);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":152,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return CollectionUtil.isAnyNonNull(name, rating, review, address, tags);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"marcusleeeugene"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":164,"author":{"gitId":"marcusleeeugene"},"content":"            this.rating \u003d rating;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"marcusleeeugene"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":168,"author":{"gitId":"marcusleeeugene"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public void setReview(Review review) {"},{"lineNumber":172,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.review \u003d review;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public Optional\u003cReview\u003e getReview() {"},{"lineNumber":176,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return Optional.ofNullable(review);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":190,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":199,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":220,"author":{"gitId":"marcusleeeugene"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":221,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    \u0026\u0026 getReview().equals(e.getReview())"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":12,"-":200,"Prabhakaran-Gokul":14}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(null, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.person.NameContainsAllKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" * Finds and lists all food places whose entries contain all of the argument keywords."},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":" */"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String COMMAND_WORD \u003d \"findall\";"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all food places whose entries contain all of \""},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Example: \" + COMMAND_WORD + \" 5/5 fastfood\";"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    private final NameContainsAllKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    public FindAllCommand(NameContainsAllKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"                || (other instanceof FindAllCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"                \u0026\u0026 predicate.equals(((FindAllCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":42}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" * Finds and lists all food places whose entries contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all food places whose entries contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Example: \" + COMMAND_WORD + \" kfc macdonalds\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":3,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(null, SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":" * Views the full specified entry in a separate window."},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"public class ViewCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"            + \": Views the full entry identified by the index number used in the displayed entry list.\\n\""},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_VIEW_PERSON_SUCCESS \u003d \"Viewing Entry: %1$s\";"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates an ViewCommand to view the specified {@code Entry}"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(model);"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        Person person \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        HashMap\u003cString, String\u003e personDetails \u003d new HashMap\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        personDetails.put(\"name\", person.getName().fullName);"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        personDetails.put(\"rating\", person.getRating().value);"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        personDetails.put(\"address\", person.getAddress().value);"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"        personDetails.put(\"review\", person.getReview().value);"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        String tags \u003d person.getTags().stream()"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagCategory))"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"                .map(tag -\u003e tag.tagCategory.titleCase() + \";\")"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"                .collect(Collectors.joining());"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        personDetails.put(\"tags\", tags);"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(personDetails, String.format(MESSAGE_VIEW_PERSON_SUCCESS, person),"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"                false , true, false);"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":69}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_RATING, PREFIX_REVIEW, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_RATING, PREFIX_REVIEW)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Review review \u003d ParserUtil.parseReview(argMultimap.getValue(PREFIX_REVIEW).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Person person \u003d new Person(name, rating, review, address, tagList);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"-":51,"Prabhakaran-Gokul":6}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.logic.commands.FindAllCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        case FindAllCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"            return new FindAllCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":4,"DineshMagesvaran":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"ra/\");"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final Prefix PREFIX_REVIEW \u003d new Prefix(\"re/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":13,"Prabhakaran-Gokul":1}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_RATING, PREFIX_REVIEW, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"            editPersonDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (argMultimap.getValue(PREFIX_REVIEW).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            editPersonDescriptor.setReview(ParserUtil.parseReview(argMultimap.getValue(PREFIX_REVIEW).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"-":75,"Prabhakaran-Gokul":4}},{"path":"src/main/java/seedu/address/logic/parser/FindAllCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.logic.commands.FindAllCommand;"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.person.NameContainsAllKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":" * Parses input arguments and creates a new FindAllCommand object"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":" */"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommandParser implements Parser\u003cFindAllCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAllCommand"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"     * and returns a FindAllCommand object for execution."},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"    public FindAllCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        return new FindAllCommand(new NameContainsAllKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":33}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"     * Parses a {@code String rating} into a {@code Rating}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws ParseException if the given {@code rating} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    public static Rating parseRating(String rating) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(rating);"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"        String trimmedRating \u003d rating.trim();"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"        if (!Rating.isValidRating(trimmedRating)) {"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        return new Rating(trimmedRating);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses a {@code String review} into an {@code Review}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws ParseException if the given {@code review} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static Review parseReview(String review) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(review);"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String trimmedReview \u003d review.trim();"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!Review.isValidReview(trimmedReview)) {"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new ParseException(Review.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Review(trimmedReview);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":9,"-":106,"Prabhakaran-Gokul":9}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":" * Parses input arguments and creates a new ViewCommand object"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"public class ViewCommandParser {"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * and returns a ViewCommand object for execution."},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"            return new ViewCommand(index);"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (ParseException pe) {"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":27}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns true if a given string is a valid address."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":56,"Prabhakaran-Gokul":1}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":" * Represents a restaurant\u0027s name in The Food Diary"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"     * Constructs a {@code Restaurant Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"     * @param name A valid restaurant name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"     * Returns true if a given string is a valid restaurant name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Donavanty":5,"-":54}},{"path":"src/main/java/seedu/address/model/person/NameContainsAllKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" * Tests that a {@code Entry}\u0027s {@code Restaurant Name} matches all of the keywords given."},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":" */"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"public class NameContainsAllKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    public NameContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"        if (keywords.isEmpty()) {"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"            return false;"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"        StringBuilder nameRatingAddressTag \u003d new StringBuilder(person.getName().fullName);"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"        nameRatingAddressTag.append(\" \").append(person.getRating().value).append(\"/5\");"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        nameRatingAddressTag.append(\" \").append(person.getAddress().value);"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Tag t: person.getTags()) {"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"            nameRatingAddressTag.append(\" \").append(t.tagCategory.name());"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        return keywords.stream()"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(nameRatingAddressTag.toString(), keyword));"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"                || (other instanceof NameContainsAllKeywordsPredicate // instanceof handles nulls"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"                \u0026\u0026 keywords.equals(((NameContainsAllKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":41}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" * Tests that a {@code Entry}\u0027s {@code Restaurant Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"        StringBuilder nameRatingAddressTag \u003d new StringBuilder(person.getName().fullName);"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"        nameRatingAddressTag.append(\" \").append(person.getRating().value).append(\"/5\");"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"        nameRatingAddressTag.append(\" \").append(person.getAddress().value);"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Tag t: person.getTags()) {"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"            nameRatingAddressTag.append(\" \").append(t.tagCategory.name());"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(nameRatingAddressTag.toString(), keyword));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":9,"-":29}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final Review review;"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    private final Rating rating;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Person(Name name, Rating rating, Review review, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireAllNonNull(name, rating, review, address, tags);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        this.rating \u003d rating;"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.review \u003d review;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    public Rating getRating() {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        return rating;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Review getReview() {"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return review;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 otherPerson.getRating().equals(getRating())"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                \u0026\u0026 otherPerson.getReview().equals(getReview())"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return Objects.hash(name, rating, review, address, tags);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"                .append(\"; Rating: \")"},{"lineNumber":110,"author":{"gitId":"marcusleeeugene"},"content":"                .append(getRating())"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .append(\"; Review: \")"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .append(getReview())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":7,"-":106,"Prabhakaran-Gokul":11}},{"path":"src/main/java/seedu/address/model/person/Rating.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":" * Represents a Person\u0027s rating in the address book."},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"public class Rating {"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"            \"Ratings should only contain a integer (e.g. 3) between 0-5, and it should be a single digit \";"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-5]{1}$\";"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     * @param rating A valid rating."},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    public Rating(String rating) {"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(rating);"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        value \u003d rating;"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns true if a given string is a valid rating."},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"                || (other instanceof Rating // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 value.equals(((Rating) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":53}},{"path":"src/main/java/seedu/address/model/person/Review.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Represents a Restaurant\u0027s review in the Food Diary."},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidReview(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Review {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Reviews can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs an {@code Review}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param review A valid review."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Review(String review) {"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(review);"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        checkArgument(isValidReview(review), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        value \u003d review;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns if a given string is a valid review."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static boolean isValidReview(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                || (other instanceof Review // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                \u0026\u0026 value.equals(((Review) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":37,"Prabhakaran-Gokul":16}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be of displayed categories.\";"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    public final TagCategories tagCategory;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"     * @param tagCategory A valid tag name."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"    public Tag(String tagCategory) {"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"        requireNonNull(tagCategory);"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"        checkArgument(isValidTagName(tagCategory), MESSAGE_CONSTRAINTS);"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"        this.tagCategory \u003d TagCategories.find(tagCategory);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    public static boolean isValidTagName(String tagCategory) {"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"        return TagCategories.matches(tagCategory) \u0026\u0026 !(tagCategory.toLowerCase().equals(\"invalid\"));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 tagCategory.equals(((Tag) other).tagCategory)); // state check"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"        return tagCategory.hashCode();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"        return \u0027[\u0027 + tagCategory.name() + \u0027]\u0027;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Sidney011100":13,"-":40}},{"path":"src/main/java/seedu/address/model/tag/TagCategories.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Sidney011100"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"public enum TagCategories {"},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"    FASTFOOD,"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"    WESTERN,"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"    INDIAN,"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    CHINESE,"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"    FUSION,"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"    JAPANESE,"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    MALAY,"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    HALAL,"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    VEGETARIAN,"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    VEGAN,"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"    FRUITS,"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"    DESSERT,"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"    OTHERS,"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"    INVALID;"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"     * Checks if a String given fits any of the Categories in TagCategories."},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"     * @param test"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"     * @return boolean"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"    public static boolean matches(String test) {"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"        ArrayList\u003cString\u003e categories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"        for (TagCategories tagCategory: TagCategories.values()) {"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"            categories.add(tagCategory.name().toLowerCase());"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"        return categories.contains(test.toLowerCase());"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"     * Finds a TagCateogry for user to save as,"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"     * if category is not found, classified as others."},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"     * @param category"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"     * @return a TagCategory based on what user has input"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"    public static TagCategories find(String category) {"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"        for (TagCategories tagCategory : TagCategories.values()) {"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"            if (tagCategory.name().toLowerCase().contains(category.toLowerCase())) {"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"                return tagCategory;"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"        return TagCategories.INVALID;"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"     * Displays TagCategories in title case."},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"     * @return string of tag category in title case"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"    public String titleCase() {"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"        String categoryInUpperCase \u003d this.name();"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"        String firstLetter \u003d categoryInUpperCase.substring(0, 1);"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"        String remainingLetters \u003d categoryInUpperCase.substring(1);"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"        remainingLetters \u003d remainingLetters.toLowerCase();"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"        String categoryInTitleCase \u003d firstLetter + remainingLetters;"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"        return categoryInTitleCase;"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"}"}],"authorContributionMap":{"Sidney011100":61}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"KFC\"), new Rating(\"3\"), new Review(\"too oily\"),"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"                    new Address(\"3155 Commonwealth Ave W, #B1-32/33, Singapore 129588\"),"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"                    getTagSet(\"FastFood\")),"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"Frontier\"), new Rating(\"4\"), new Review(\"cheap good food!\"),"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"                    new Address(\"12 Science Drive 2, Singapore 117549\"),"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"                    getTagSet(\"Others\")),"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"Mcdonald\"), new Rating(\"1\"), new Review(\"Food sucks, not properly cooked.\"),"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), getTagSet(\"FastFood\")),"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"Ameens\"), new Rating(\"5\"), new Review(\"Cheese fries is lit!!!\"),"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getTagSet(\"Western\")),"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"Techo Edge\"), new Rating(\"5\"),"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"                new Review(\"Food is cheap and good! Especially the mixed rice stall.\"),"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"                new Address(\"2 Engineering Drive 4, Singapore 117584\"), getTagSet(\"FastFood\")),"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"PGP Canteen\"), new Rating(\"4\"),"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"                new Review(\"Good food. Place very crowded during lunch\"),"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"                new Address(\"27 Prince George\u0027s Park, Singapore 118425\"), getTagSet(\"Western\", \"Indian\")),"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"            new Person(new Name(\"Deck\"), new Rating(\"4\"),"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"                new Review(\"Mala the best mannn!\"),"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"                new Address(\"NUS School of Computing, COM1, 13, Computing Dr, 117417\"),"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"                getTagSet(\"Western\"))"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":21,"-":40,"Prabhakaran-Gokul":1}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final String review;"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    private final String rating;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"rating\") String rating,"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            @JsonProperty(\"review\") String review, @JsonProperty(\"address\") String address,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        this.rating \u003d rating;"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.review \u003d review;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        rating \u003d source.getRating().value;"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        review \u003d source.getReview().value;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"        if (rating \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"        if (!Rating.isValidRating(rating)) {"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"        final Rating modelRating \u003d new Rating(rating);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (review \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Review.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!Review.isValidReview(review)) {"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new IllegalValueException(Review.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        final Review modelReview \u003d new Review(review);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Person(modelName, modelRating, modelReview, modelAddress, modelTags);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":10,"-":88,"Prabhakaran-Gokul":12}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"import seedu.address.model.tag.TagCategories;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    private final TagCategories tagCategory;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"    public JsonAdaptedTag(String tagCategory) {"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"        this.tagCategory \u003d TagCategories.find(tagCategory);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"        tagCategory \u003d source.tagCategory;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"        return tagCategory.name();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"        if (!Tag.isValidTagName(tagCategory.name())) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"        return new Tag(tagCategory.name());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Sidney011100":8,"-":41}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    private ViewWindow viewWindow;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"        viewWindow \u003d new ViewWindow();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":93,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":103,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"marcusleeeugene"},"content":"     * Opens the view window or focuses on it if it\u0027s already opened."},{"lineNumber":155,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":157,"author":{"gitId":"marcusleeeugene"},"content":"    public void handleView(HashMap\u003cString, String\u003e personDetails) {"},{"lineNumber":158,"author":{"gitId":"marcusleeeugene"},"content":"        if (!viewWindow.isShowing()) {"},{"lineNumber":159,"author":{"gitId":"marcusleeeugene"},"content":"            viewWindow.setEntryContent(personDetails);"},{"lineNumber":160,"author":{"gitId":"marcusleeeugene"},"content":"            viewWindow.show();"},{"lineNumber":161,"author":{"gitId":"marcusleeeugene"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"marcusleeeugene"},"content":"            viewWindow.focus();"},{"lineNumber":163,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":179,"author":{"gitId":"marcusleeeugene"},"content":"        viewWindow.hide();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"marcusleeeugene"},"content":"            if (commandResult.isViewEntry()) {"},{"lineNumber":203,"author":{"gitId":"marcusleeeugene"},"content":"                handleView(commandResult.getPersonDetails());"},{"lineNumber":204,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":21,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    private Label rating;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Label review;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        rating.setText(String.format(\"Rating: %s / 5\", person.getRating().value));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        review.setText(person.getReview().value);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagCategory))"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagCategory.titleCase())));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":2,"Sidney011100":2,"-":71,"Prabhakaran-Gokul":2}},{"path":"src/main/java/seedu/address/ui/ViewWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":" * Controller for a View page"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"public class ViewWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    private static HashMap\u003cString, String\u003e personDetails;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ViewWindow.class);"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String FXML \u003d \"ViewWindow.fxml\";"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    private Label name;"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    private Label rating;"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    private Label address;"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    private Label review;"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    private FlowPane tags;"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a new ViewWindow."},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     * @param root Stage to use as the root of the ViewWindow."},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewWindow(Stage root) {"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"        super(FXML, root);"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        if (personDetails !\u003d null) {"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"            setEntryContent(personDetails);"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a new ViewWindow."},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewWindow() {"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        this(new Stage());"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"     * Shows the View window."},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws IllegalStateException"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"     * \u003cul\u003e"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003cli\u003e"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003c/li\u003e"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003cli\u003e"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003c/li\u003e"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003cli\u003e"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003c/li\u003e"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003cli\u003e"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"     *     \u003c/li\u003e"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"     * \u003c/ul\u003e"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"    public void show() {"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"        logger.fine(\"Showing view window of the specified entry.\");"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().show();"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns true if the view window is currently being shown."},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isShowing() {"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"        return getRoot().isShowing();"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"     * Hides the view window."},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"    public void hide() {"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().hide();"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"     * Focuses on the view window."},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"    public void focus() {"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().requestFocus();"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets the content entry to be ready for view."},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"     * @param personDetails Entry details"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"    public void setEntryContent(HashMap\u003cString, String\u003e personDetails) {"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":"        tags.getChildren().clear();"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"        name.setText(personDetails.get(\"name\") + \"\\n\\n\");"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"        rating.setText(String.format(\"Rating: %s / 5\", personDetails.get(\"rating\")));"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"        address.setText(personDetails.get(\"address\") + \"\\n\\n\");"},{"lineNumber":110,"author":{"gitId":"marcusleeeugene"},"content":"        review.setText(personDetails.get(\"review\") + \"\\n\\n\");"},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"        Arrays.stream(personDetails.get(\"tags\").split(\";\"))"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag)));"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":114}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":341,"author":{"gitId":"Sidney011100"},"content":"    -fx-hgap: 0;"},{"lineNumber":342,"author":{"gitId":"Sidney011100"},"content":"    -fx-vgap: 4;"},{"lineNumber":343,"author":{"gitId":"Sidney011100"},"content":"    -fx-padding: 5 0;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"}"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":347,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: black;"},{"lineNumber":348,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #d3d9db;"},{"lineNumber":349,"author":{"gitId":"Sidney011100"},"content":"    -fx-padding: 2 14 2 14;"},{"lineNumber":350,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-radius: 10;"},{"lineNumber":351,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-radius: 10;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Sidney011100":8,"-":345}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$rating\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      \u003cLabel fx:id\u003d\"review\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$review\" /\u003e"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"      \u003cFlowPane fx:id\u003d\"tags\"/\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"      \u003crowConstraints\u003e"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"         \u003cRowConstraints /\u003e"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"      \u003c/rowConstraints\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"marcusleeeugene":11,"Sidney011100":1,"-":21,"Prabhakaran-Gokul":1}},{"path":"src/main/resources/view/ViewWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.*?\u003e"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.stage.*?\u003e"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"View\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"  \u003cscene\u003e"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cScene\u003e"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cstylesheets\u003e"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        \u003c/stylesheets\u003e"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"300\" maxWidth\u003d\"500\"\u003e"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"            \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$rating\" /\u003e"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cLabel fx:id\u003d\"review\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$review\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        \u003c/VBox\u003e"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/Scene\u003e"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"  \u003c/scene\u003e"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"marcusleeeugene":29}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"4\","},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"    \"name\": \"Person With Invalid Rating Field\","},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"-":8,"Prabhakaran-Gokul":2}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\": \"hans@example.com\","},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"3\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":7,"Prabhakaran-Gokul":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\": \"alice@example.com\","},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"2\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"    \"tagged\": [ \"WESTERN\" ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\": \"pauline@example.com\","},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"2\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":2,"Sidney011100":1,"-":9,"Prabhakaran-Gokul":2}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\": \" \","},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"4\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":6,"Prabhakaran-Gokul":1}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"3\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"    \"tagged\" : [ \"WESTERN\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"johnd@example.com\","},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"2\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    \"tagged\" : [ \"VEGAN\", \"DESSERT\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"heinz@example.com\","},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"1\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"cornelia@example.com\","},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"5\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"    \"tagged\" : [ \"FASTFOOD\" ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"werner@example.com\","},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"2\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"lydia@example.com\","},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"1\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"review\" : \"anna@example.com\","},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"0\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":7,"Sidney011100":3,"-":29,"Prabhakaran-Gokul":7}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REVIEW_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + RATING_DESC_AMY + REVIEW_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":159,"Prabhakaran-Gokul":2}},{"path":"src/test/java/seedu/address/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(commandResult.equals(new CommandResult(null, \"feedback\", false, false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(commandResult.equals(new CommandResult(null, \"feedback\", true, false, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(commandResult.equals(new CommandResult(null, \"feedback\", false, true, true)));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(null, \"feedback\", true, false, false).hashCode());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(null, \"feedback\", false, true, true).hashCode());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":5,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String VALID_RATING_AMY \u003d \"1\";"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String VALID_RATING_BOB \u003d \"2\";"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String VALID_REVIEW_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String VALID_REVIEW_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":""},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"    public static final String VALID_TAG_WESTERN \u003d \"WESTERN\";"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"    public static final String VALID_TAG_FASTFOOD \u003d \"fastfood\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String RATING_DESC_AMY \u003d \" \" + PREFIX_RATING + VALID_RATING_AMY;"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String RATING_DESC_BOB \u003d \" \" + PREFIX_RATING + VALID_RATING_BOB;"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String REVIEW_DESC_AMY \u003d \" \" + PREFIX_REVIEW + VALID_REVIEW_AMY;"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String REVIEW_DESC_BOB \u003d \" \" + PREFIX_REVIEW + VALID_REVIEW_BOB;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"    public static final String TAG_DESC_FASTFOOD \u003d \" \" + PREFIX_TAG + VALID_TAG_FASTFOOD;"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"    public static final String TAG_DESC_WESTERN \u003d \" \" + PREFIX_TAG + VALID_TAG_WESTERN;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"911a\"; // \u0027a\u0027 not allowed in ratings"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String INVALID_REVIEW_DESC \u003d \" \" + PREFIX_REVIEW; // empty string not allowed for review"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"western*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withRating(VALID_RATING_AMY).withReview(VALID_REVIEW_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"                .withTags(VALID_TAG_FASTFOOD).build();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withRating(VALID_RATING_BOB).withReview(VALID_REVIEW_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"                .withTags(VALID_TAG_WESTERN, VALID_TAG_FASTFOOD).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":109,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":6,"Sidney011100":8,"-":107,"Prabhakaran-Gokul":9}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withRating(VALID_RATING_BOB)"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"                .withTags(VALID_TAG_WESTERN).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"                .withRating(VALID_RATING_BOB).withTags(VALID_TAG_WESTERN).build();"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":4,"Sidney011100":2,"-":168}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_BOB;"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"        // different rating -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withRating(VALID_RATING_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // different review -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withReview(VALID_REVIEW_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_WESTERN).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"Sidney011100":2,"-":50,"Prabhakaran-Gokul":3}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(null, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/FindAllCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.person.NameContainsAllKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":" * Contains integration tests (interaction with the Model) for {@code FindAllCommand}."},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":" */"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommandTest {"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate firstPredicate \u003d"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate secondPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand findFirstCommand \u003d new FindAllCommand(firstPredicate);"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand findSecondCommand \u003d new FindAllCommand(secondPredicate);"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        // same object -\u003e returns true"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        // same values -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand findFirstCommandCopy \u003d new FindAllCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        // different types -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        // different person -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand command \u003d new FindAllCommand(predicate);"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"    public void execute_multipleKeywords_singlePersonFound() {"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d preparePredicate(\"Carl Kurz\");"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand command \u003d new FindAllCommand(predicate);"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(Arrays.asList(CARL), model.getFilteredPersonList());"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"    private NameContainsAllKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"        return new NameContainsAllKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":81}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(null, SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":1,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":" * {@code ViewCommand}."},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"class ViewCommandTest {"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS, personToView);"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"        Person personToView \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_PERSON_SUCCESS, personToView);"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"        showPerson(expectedModel, personToView);"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"    void equals() {"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_PERSON);"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommand));"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(viewFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(viewFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"        // different person -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(viewFirstCommand.equals(viewSecondCommand));"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"     * Updates {@code model}\u0027s filtered list to specified person."},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"    private void showPerson(Model model, Person person) {"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"        model.updateFilteredPersonList(p -\u003e p.isSamePerson(person));"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(!model.getFilteredPersonList().isEmpty());"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":107}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REVIEW_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REVIEW_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REVIEW_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FASTFOOD;"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_WESTERN;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_BOB;"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"    private final AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FASTFOOD).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FASTFOOD, new AddCommand(expectedPerson));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FASTFOOD, new AddCommand(expectedPerson));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        // multiple rating - last rating accepted"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + RATING_DESC_AMY + RATING_DESC_BOB + REVIEW_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FASTFOOD, new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_AMY + REVIEW_DESC_BOB"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FASTFOOD, new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FASTFOOD, new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FASTFOOD, VALID_TAG_WESTERN)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"                + TAG_DESC_WESTERN + TAG_DESC_FASTFOOD, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + RATING_DESC_AMY + REVIEW_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"        // missing rating prefix"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_RATING_BOB + REVIEW_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // missing REVIEW prefix"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + RATING_DESC_BOB + VALID_REVIEW_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_RATING_BOB + VALID_REVIEW_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + RATING_DESC_BOB + REVIEW_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitId":"Sidney011100"},"content":"                + TAG_DESC_WESTERN + TAG_DESC_FASTFOOD, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"        // invalid rating"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_RATING_DESC + REVIEW_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"                + TAG_DESC_WESTERN + TAG_DESC_FASTFOOD, Rating.MESSAGE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // invalid REVIEW"},{"lineNumber":121,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + RATING_DESC_BOB + INVALID_REVIEW_DESC + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + TAG_DESC_WESTERN + TAG_DESC_FASTFOOD, Review.MESSAGE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":126,"author":{"gitId":"Sidney011100"},"content":"                + TAG_DESC_WESTERN + TAG_DESC_FASTFOOD, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"Sidney011100"},"content":"                + INVALID_TAG_DESC + TAG_DESC_FASTFOOD, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + RATING_DESC_BOB + REVIEW_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":137,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + RATING_DESC_BOB + REVIEW_DESC_BOB"},{"lineNumber":138,"author":{"gitId":"Sidney011100"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_WESTERN + TAG_DESC_FASTFOOD,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":9,"Sidney011100":17,"-":88,"Prabhakaran-Gokul":27}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REVIEW_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BOB;"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REVIEW_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REVIEW_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FASTFOOD;"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_WESTERN;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_AMY;"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_AMY;"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_BOB;"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"    private final EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REVIEW_DESC, Review.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"        // invalid rating followed by valid email"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC + REVIEW_DESC_AMY, Rating.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"        // valid rating followed by invalid rating. The test case for invalid rating followed by valid rating"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"        assertParseFailure(parser, \"1\" + RATING_DESC_BOB + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"Sidney011100"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FASTFOOD + TAG_DESC_WESTERN + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"Sidney011100"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FASTFOOD + TAG_EMPTY + TAG_DESC_WESTERN, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"Sidney011100"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FASTFOOD + TAG_DESC_WESTERN, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_REVIEW_DESC + VALID_ADDRESS_AMY + VALID_RATING_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"        String userInput \u003d targetIndex.getOneBased() + RATING_DESC_BOB + TAG_DESC_WESTERN"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + REVIEW_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FASTFOOD;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withRating(VALID_RATING_BOB).withReview(VALID_REVIEW_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"Sidney011100"},"content":"                .withTags(VALID_TAG_WESTERN, VALID_TAG_FASTFOOD).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String userInput \u003d targetIndex.getOneBased() + RATING_DESC_BOB + REVIEW_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"marcusleeeugene"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRating(VALID_RATING_BOB)"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReview(VALID_REVIEW_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"marcusleeeugene"},"content":"        // rating"},{"lineNumber":144,"author":{"gitId":"marcusleeeugene"},"content":"        userInput \u003d targetIndex.getOneBased() + RATING_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"marcusleeeugene"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withRating(VALID_RATING_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // review"},{"lineNumber":150,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        userInput \u003d targetIndex.getOneBased() + REVIEW_DESC_AMY;"},{"lineNumber":151,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withReview(VALID_REVIEW_AMY).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitId":"Sidney011100"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FASTFOOD;"},{"lineNumber":163,"author":{"gitId":"Sidney011100"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FASTFOOD).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":171,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String userInput \u003d targetIndex.getOneBased() + RATING_DESC_AMY + ADDRESS_DESC_AMY + REVIEW_DESC_AMY"},{"lineNumber":172,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + TAG_DESC_FASTFOOD + RATING_DESC_AMY + ADDRESS_DESC_AMY + REVIEW_DESC_AMY + TAG_DESC_FASTFOOD"},{"lineNumber":173,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + RATING_DESC_BOB + ADDRESS_DESC_BOB + REVIEW_DESC_BOB + TAG_DESC_WESTERN;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"marcusleeeugene"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRating(VALID_RATING_BOB)"},{"lineNumber":176,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReview(VALID_REVIEW_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":177,"author":{"gitId":"marcusleeeugene"},"content":"                .withTags(VALID_TAG_FASTFOOD, VALID_TAG_WESTERN).build();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":187,"author":{"gitId":"marcusleeeugene"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_RATING_DESC + RATING_DESC_BOB;"},{"lineNumber":188,"author":{"gitId":"marcusleeeugene"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRating(VALID_RATING_BOB).build();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":193,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        userInput \u003d targetIndex.getOneBased() + REVIEW_DESC_BOB + INVALID_RATING_DESC + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitId":"marcusleeeugene"},"content":"                + RATING_DESC_BOB;"},{"lineNumber":195,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withRating(VALID_RATING_BOB).withReview(VALID_REVIEW_BOB)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":20,"Sidney011100":11,"-":158,"Prabhakaran-Gokul":22}},{"path":"src/test/java/seedu/address/logic/parser/FindAllCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.logic.commands.FindAllCommand;"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.model.person.NameContainsAllKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    private FindAllCommandParser parser \u003d new FindAllCommandParser();"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand expectedFindCommand \u003d"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"                new FindAllCommand(new NameContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":35}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String INVALID_RATING \u003d \"+6\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String INVALID_REVIEW \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"    private static final String INVALID_TAG \u003d \"#fastfood\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String VALID_RATING \u003d \"5\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String VALID_REVIEW \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"    private static final String VALID_TAG_1 \u003d \"fastfood\";"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"    private static final String VALID_TAG_2 \u003d \"western\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"        Rating expectedRating \u003d new Rating(VALID_RATING);"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"        Rating expectedRating \u003d new Rating(VALID_RATING);"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseReview((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReview(INVALID_REVIEW));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_validValueWithoutWhitespace_returnsReview() throws Exception {"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Review expectedReview \u003d new Review(VALID_REVIEW);"},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(expectedReview, ParserUtil.parseReview(VALID_REVIEW));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_validValueWithWhitespace_returnsTrimmedReview() throws Exception {"},{"lineNumber":146,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String reviewWithWhitespace \u003d WHITESPACE + VALID_REVIEW + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Review expectedReview \u003d new Review(VALID_REVIEW);"},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(expectedReview, ParserUtil.parseReview(reviewWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":14,"Sidney011100":3,"-":165,"Prabhakaran-Gokul":14}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_WESTERN)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_WESTERN)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Sidney011100":3,"-":99}},{"path":"src/test/java/seedu/address/model/person/NameContainsAllKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"public class NameContainsAllKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"KFC\"));"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC Clementi\").build()));"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"KFC\", \"Clementi\"));"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC Clementi\").build()));"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"teCHnO\"));"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\").build()));"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").build()));"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Macdonalds\"));"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").build()));"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"KFC\"));"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").build()));"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match name"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Great!\"));"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withReview(\"Food is Great!\").build()));"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"FastFood\"));"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC\").withTags(\"FastFood\").build()));"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Western\", \"Indian\"));"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withTags(\"Western\", \"Indian\").build()));"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"wEStErN\", \"INdIan\"));"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withTags(\"Western\", \"Indian\").build()));"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withTags(\"Western\").build()));"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Western\"));"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withTags(\"Indian\").build()));"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"FastFood\", \"Western\"));"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withTags(\"Western\", \"Indian\").build()));"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match tag"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Spicy\"));"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Macdonalds\").withReview(\"Mcspicy not very spicy\")"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"                .withTags(\"FastFood\").build()));"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingContainsKeywords_returnsTrue() {"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"4/5\"));"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC\").withRating(\"4\").build()));"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withRating(\"2\").build()));"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"1/5\"));"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"3\").build()));"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"4/5\", \"5/5\"));"},{"lineNumber":135,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withRating(\"5\").build()));"},{"lineNumber":136,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match rating"},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Spicy\"));"},{"lineNumber":139,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Macdonalds\").withReview(\"Mcspicy not very spicy\")"},{"lineNumber":140,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").build()));"},{"lineNumber":141,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressContainsKeywords_returnsTrue() {"},{"lineNumber":145,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":146,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":147,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"Science\"));"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords"},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords"},{"lineNumber":157,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"eNGinEerInG\"));"},{"lineNumber":158,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":159,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":160,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":162,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":164,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":165,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());"},{"lineNumber":166,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\")"},{"lineNumber":167,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"27 Prince George\u0027s Park, Singapore 118425\").build()));"},{"lineNumber":168,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":169,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":170,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Science\"));"},{"lineNumber":171,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":172,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":173,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":174,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":175,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));"},{"lineNumber":176,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":177,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":178,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":179,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match address"},{"lineNumber":180,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Great!\"));"},{"lineNumber":181,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withReview(\"Food is Great!\")"},{"lineNumber":182,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":183,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":185,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_foodEntryContainsAllKeywords_returnsTrue() {"},{"lineNumber":187,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 rating keywords"},{"lineNumber":188,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":189,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Frontier\", \"4/5\"));"},{"lineNumber":190,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":191,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"4\").build()));"},{"lineNumber":192,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":193,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 address keywords"},{"lineNumber":194,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":195,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Frontier\", \"Science\"));"},{"lineNumber":196,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":197,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":198,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":199,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 tag keywords"},{"lineNumber":200,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":201,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Frontier\", \"Western\"));"},{"lineNumber":202,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":203,"author":{"gitId":"DineshMagesvaran"},"content":"                .withTags(\"Western\").build()));"},{"lineNumber":204,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":205,"author":{"gitId":"DineshMagesvaran"},"content":"        // Rating \u0026 address keywords"},{"lineNumber":206,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":207,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"2/5\", \"Drive\"));"},{"lineNumber":208,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":209,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":210,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":211,"author":{"gitId":"DineshMagesvaran"},"content":"        // Rating \u0026 tag keywords"},{"lineNumber":212,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":213,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"2/5\", \"Indian\"));"},{"lineNumber":214,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":215,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").withTags(\"Indian\").build()));"},{"lineNumber":216,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":217,"author":{"gitId":"DineshMagesvaran"},"content":"        // Address \u0026 tag keywords"},{"lineNumber":218,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":219,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Engineering\", \"Indian\"));"},{"lineNumber":220,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":221,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTags(\"Indian\").build()));"},{"lineNumber":222,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":223,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name, rating, address \u0026 tag keywords"},{"lineNumber":224,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"4/5\", \"Drive\", \"Western\"));"},{"lineNumber":225,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno\").withRating(\"4\")"},{"lineNumber":226,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTags(\"Western\").build()));"},{"lineNumber":227,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":228,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords"},{"lineNumber":229,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"eNGinEerInG\", \"1/5\", \"edGE\"));"},{"lineNumber":230,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"1\")"},{"lineNumber":231,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":232,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":234,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":235,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_foodEntryDoesNotContainAllKeywords_returnsFalse() {"},{"lineNumber":236,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":237,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());"},{"lineNumber":238,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\")"},{"lineNumber":239,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"27 Prince George\u0027s Park, Singapore 118425\").build()));"},{"lineNumber":240,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":241,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching name keyword"},{"lineNumber":242,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Frontier\", \"5/5\", \"Drive\", \"Western\"));"},{"lineNumber":243,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"5\")"},{"lineNumber":244,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTags(\"Western\").build()));"},{"lineNumber":245,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":246,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching rating keyword"},{"lineNumber":247,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"2/5\", \"Drive\", \"Western\"));"},{"lineNumber":248,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"5\")"},{"lineNumber":249,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTags(\"Western\").build()));"},{"lineNumber":250,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":251,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching address keyword"},{"lineNumber":252,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"5/5\", \"Science\", \"Western\"));"},{"lineNumber":253,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"5\")"},{"lineNumber":254,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTags(\"Western\").build()));"},{"lineNumber":255,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":256,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching tag keyword"},{"lineNumber":257,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"5/5\", \"Drive\", \"Indian\"));"},{"lineNumber":258,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"5\")"},{"lineNumber":259,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTags(\"Western\").build()));"},{"lineNumber":260,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":261,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, and also name, rating, address \u0026 tag"},{"lineNumber":262,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate("},{"lineNumber":263,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Techno\", \"5/5\", \"Drive\", \"Cheap\", \"Western\"));"},{"lineNumber":264,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"5\")"},{"lineNumber":265,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\")"},{"lineNumber":266,"author":{"gitId":"DineshMagesvaran"},"content":"                .withReview(\"Cheap food!\").withTags(\"Western\").build()));"},{"lineNumber":267,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"DineshMagesvaran"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":268}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"KFC\"));"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC Clementi\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"KFC\", \"Clementi\"));"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC Clementi\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Techno\", \"KFC\"));"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"teCHnO\", \"KfC\"));"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Macdonalds\"));"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match name"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Great!\"));"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withReview(\"Food is Great!\").build()));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"FastFood\"));"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC\").withTags(\"FastFood\").build()));"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Western\", \"Indian\"));"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withTags(\"Western\", \"Indian\").build()));"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"FastFood\", \"Western\"));"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withTags(\"Western\", \"Indian\").build()));"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"wEStErN\", \"INdIan\"));"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withTags(\"Western\", \"Indian\").build()));"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withTags(\"Western\").build()));"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Western\"));"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withTags(\"Indian\").build()));"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match tag"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Spicy\"));"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Macdonalds\").withReview(\"Mcspicy not very spicy\")"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"                .withTags(\"FastFood\").build()));"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingContainsKeywords_returnsTrue() {"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"4/5\"));"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"KFC\").withRating(\"4\").build()));"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"4/5\", \"5/5\"));"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"PGP Canteen\").withRating(\"5\").build()));"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withRating(\"2\").build()));"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1/5\"));"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\").withRating(\"3\").build()));"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match rating"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Spicy\"));"},{"lineNumber":135,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Macdonalds\").withReview(\"Mcspicy not very spicy\")"},{"lineNumber":136,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").build()));"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":139,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressContainsKeywords_returnsTrue() {"},{"lineNumber":141,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"Science\"));"},{"lineNumber":144,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":145,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":146,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":147,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Frontier\")"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":157,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords"},{"lineNumber":158,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"eNGinEerInG\", \"pArK\"));"},{"lineNumber":159,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":160,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":161,"author":{"gitId":"DineshMagesvaran"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":165,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords"},{"lineNumber":166,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":167,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"PGP Canteen\")"},{"lineNumber":168,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"27 Prince George\u0027s Park, Singapore 118425\").build()));"},{"lineNumber":169,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":170,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword"},{"lineNumber":171,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Science\"));"},{"lineNumber":172,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Techno Edge\")"},{"lineNumber":173,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));"},{"lineNumber":174,"author":{"gitId":"DineshMagesvaran"},"content":""},{"lineNumber":175,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match address"},{"lineNumber":176,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Great!\"));"},{"lineNumber":177,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Frontier\").withReview(\"Food is Great!\")"},{"lineNumber":178,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"DineshMagesvaran":119,"-":61}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_BOB;"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withRating(VALID_RATING_BOB).withReview(VALID_REVIEW_BOB)"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_WESTERN).build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"        // different rating -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withRating(VALID_RATING_BOB).build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // different review -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withReview(VALID_REVIEW_BOB).build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":89,"author":{"gitId":"Sidney011100"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_FASTFOOD).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"Sidney011100":4,"-":81,"Prabhakaran-Gokul":4}},{"path":"src/test/java/seedu/address/model/person/RatingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class RatingTest {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Rating(null));"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public void constructor_invalidRating_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        String invalidRating \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    public void isValidRating() {"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"        // null rating"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        // invalid ratings"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"91\")); // more than 1 number"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"rating\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"9011p041\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"5 \")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"6\")); // ratings higher than 5"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"-1\")); // ratings lower than 0"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"        // valid ratings"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(Rating.isValidRating(\"4\")); // exactly 1 number"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(Rating.isValidRating(\"5\"));"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(Rating.isValidRating(\"0\"));"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":42}},{"path":"src/test/java/seedu/address/model/person/ReviewTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class ReviewTest {"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Review(null));"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void constructor_invalidReview_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String invalidReview \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Review(invalidReview));"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void isValidReview() {"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // null Review"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(NullPointerException.class, () -\u003e Review.isValidReview(null));"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // blank Review"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(Review.isValidReview(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(Review.isValidReview(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // valid Review"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"PeterJack_1190@example.com\"));"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"good\")); // minimal"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"test@localhost\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@.\")); // special characters"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"123145\")); // numeric"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"a1+be!@\")); // mixture of alphanumeric and special characters"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":39}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_WESTERN)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"Sidney011100"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_WESTERN)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Sidney011100":3,"-":167}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String INVALID_RATING \u003d \"234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String INVALID_REVIEW \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String VALID_REVIEW \u003d BENSON.getReview().toString();"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String VALID_RATING \u003d BENSON.getRating().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_RATING, VALID_REVIEW, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_RATING, VALID_REVIEW, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    public void toModelType_invalidRating_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_RATING, VALID_REVIEW, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"    public void toModelType_nullRating_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_REVIEW, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void toModelType_invalidReview_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_RATING, INVALID_REVIEW, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String expectedMessage \u003d Review.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void toModelType_nullReview_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_RATING, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Review.class.getSimpleName());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_RATING, VALID_REVIEW, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_RATING, VALID_REVIEW, null, VALID_TAGS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_RATING, VALID_REVIEW, VALID_ADDRESS, invalidTags);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":8,"-":87,"Prabhakaran-Gokul":16}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        descriptor.setRating(person.getRating());"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setReview(person.getReview());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets the {@code Rating} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    public EditPersonDescriptorBuilder withRating(String rating) {"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        descriptor.setRating(new Rating(rating));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Sets the {@code Review} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public EditPersonDescriptorBuilder withReview(String review) {"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setReview(new Review(review));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":5,"-":77,"Prabhakaran-Gokul":5}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import seedu.address.model.person.Review;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String DEFAULT_RATING \u003d \"3\";"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String DEFAULT_REVIEW \u003d \"I like this food!\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    private Rating rating;"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Review review;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        review \u003d new Review(DEFAULT_REVIEW);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        rating \u003d personToCopy.getRating();"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        review \u003d personToCopy.getReview();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets the {@code Rating} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"    public PersonBuilder withRating(String rating) {"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Sets the {@code Review} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public PersonBuilder withReview(String review) {"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.review \u003d new Review(review);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Person(name, rating, review, address, tags);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":8,"-":79,"Prabhakaran-Gokul":9}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        sb.append(PREFIX_RATING + person.getRating().value + \" \");"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        sb.append(PREFIX_REVIEW + person.getReview().value + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagCategory.titleCase() + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.getReview().ifPresent(email -\u003e sb.append(PREFIX_REVIEW).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagCategory.titleCase()).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":3,"Sidney011100":2,"-":54,"Prabhakaran-Gokul":3}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_AMY;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_AMY;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_BOB;"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FASTFOOD;"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_WESTERN;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withReview(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"            .withRating(\"3\")"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"            .withTags(\"WESTERN\").build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"johnd@example.com\").withRating(\"2\")"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"            .withTags(\"VEGAN\", \"DESSERT\").build();"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withRating(\"1\")"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withRating(\"5\")"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"FASTFOOD\").build();"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withRating(\"2\")"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withRating(\"1\")"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withRating(\"0\")"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withRating(\"1\")"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withRating(\"1\")"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withRating(VALID_RATING_AMY)"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(VALID_REVIEW_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FASTFOOD).build();"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withRating(VALID_RATING_BOB)"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReview(VALID_REVIEW_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_WESTERN, VALID_TAG_FASTFOOD)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":12,"Sidney011100":4,"-":47,"Prabhakaran-Gokul":13}}]
