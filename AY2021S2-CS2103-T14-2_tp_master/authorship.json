[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-T14-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-T14-2/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-04-12"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T14-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-T14-2/tp)","lastModifiedDate":"2021-04-12"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"\u003cdiv align\u003d\"center\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"    \u003cimg alt\u003d\"Logo\" src\u003d\"docs/images/Logo.png\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"* The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI)","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"and packaged with a Graphical User Interface (GUI).","lastModifiedDate":"2021-02-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"* The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"options tasted in the vicinity of NUS.","lastModifiedDate":"2021-02-25"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"* The Food Diary will allow students to save time and effort when finding places to eat around the NUS vicinity.","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"\u003cdiv align\u003d\"center\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"    \u003cimg alt\u003d\"Ui\" src\u003d\"docs/images/Ui.png\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"## Acknowledgements","lastModifiedDate":"2021-02-25"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"## Site Map","lastModifiedDate":"2021-02-25"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"* For new users who are new to using The Food Diary, visit [User Guide](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/docs/UserGuide.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"* For more detailed documentation of our The Food Diary, visit [Developer Guide](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/docs/DeveloperGuide.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"* [About Us](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/docs/AboutUs.md)","lastModifiedDate":"2021-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-02-25"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"### Libraries Used:","lastModifiedDate":"2021-02-25"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"* JavaFX","lastModifiedDate":"2021-02-25"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"* Jackson","lastModifiedDate":"2021-02-25"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"* JUnit5","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"marcusleeeugene":9,"Donavanty":14,"DineshMagesvaran":1,"Prabhakaran-Gokul":3,"-":4}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"mainClassName \u003d \u0027fooddiary.Main\u0027","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"runShadow {","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"    archiveName \u003d \u0027TheFoodDiary.jar\u0027","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"run {","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"marcusleeeugene":5,"Donavanty":1,"DineshMagesvaran":4,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-04-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Prabhakaran Gokul","lastModifiedDate":"2021-02-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003cimg src\u003d\"images/prabhakaran-gokul.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"[[github](https://github.com/Prabhakaran-Gokul/)]","lastModifiedDate":"2021-02-20"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"[[portfolio](team/prabhakaran-gokul.md)]","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Role: Developer","lastModifiedDate":"2021-02-21"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Responsibilities: Integration","lastModifiedDate":"2021-02-20"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"### Donavan Lim","lastModifiedDate":"2021-02-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"\u003cimg src\u003d\"images/donavanty.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"[[github](https://github.com/donavanty)]","lastModifiedDate":"2021-02-25"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"[[portfolio](team/donavanty.md)]","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"* Role: Developer","lastModifiedDate":"2021-02-20"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"* Responsibilities: Documentation","lastModifiedDate":"2021-02-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"### Dinesh S/O Magesvaran","lastModifiedDate":"2021-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"\u003cimg src\u003d\"images/dineshmagesvaran.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"[[github](http://github.com/dineshmagesvaran)]","lastModifiedDate":"2021-02-20"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"[[portfolio](team/dineshmagesvaran.md)]","lastModifiedDate":"2021-02-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2021-02-20"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"* Responsibilities: Testing","lastModifiedDate":"2021-02-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"### Chong Sidney","lastModifiedDate":"2021-02-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"\u003cimg src\u003d\"images/sidney011100.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"[[github](http://github.com/sidney011100)]","lastModifiedDate":"2021-02-20"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"[[portfolio](team/sidney011100.md)]","lastModifiedDate":"2021-02-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"* Responsibilities: Deliverables and Deadlines","lastModifiedDate":"2021-02-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"### Marcus Lee Eugene","lastModifiedDate":"2021-02-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"\u003cimg src\u003d\"images/marcusleeeugene.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"[[github](http://github.com/marcusleeeugene)]","lastModifiedDate":"2021-02-20"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"[[portfolio](team/marcusleeeugene.md)]","lastModifiedDate":"2021-02-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"* Role: Team Lead, Developer","lastModifiedDate":"2021-02-20"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"* Responsibilities: Scheduling and tracking, Code quality","lastModifiedDate":"2021-02-20"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"* [Git] expert","lastModifiedDate":"2021-02-20"}],"authorContributionMap":{"marcusleeeugene":7,"Donavanty":6,"Sidney011100":5,"DineshMagesvaran":5,"-":29,"Prabhakaran-Gokul":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-04-10"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2021-04-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-04-10"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Done by (CS2103-T14-2):","lastModifiedDate":"2021-04-11"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Donavan Lim, Marcus Lee Eugene, Chong Sidney, Dinesh S/O Magesvaran, Prabhakaran Gokul","lastModifiedDate":"2021-04-11"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"---","lastModifiedDate":"2021-04-11"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-04-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-04-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"## **Description**","lastModifiedDate":"2021-02-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) and ","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"packaged with a Graphical User Interface (GUI).","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food options ","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"tasted in the vicinity of NUS.","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"The Food Diary will allow students to save time and effort when finding places to eat around the NUS vicinity. The Food ","lastModifiedDate":"2021-04-11"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"Diary especially caters to students mainly on 4 aspects:","lastModifiedDate":"2021-04-11"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"1. The ability for users to save food diary entries for future reference.","lastModifiedDate":"2021-04-11"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"2. The ability for users to find entries based on specific fields.","lastModifiedDate":"2021-04-11"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"3. The ability for users to have multiple food reviews for a food place.","lastModifiedDate":"2021-04-11"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"4. The option for users to use Commands / Ui to perform some tasks quickly.","lastModifiedDate":"2021-04-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"## **Design**","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"![Architecture Diagram](images/ArchitectureDiagram.png)","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"The **Architecture Diagram** given above explains the high-level design of the App. ","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"Given below is a quick overview of each component.","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"`Main` has two classes called `Main` and `MainApp`. It is responsible for, ","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"`Commons` represents a collection of classes used by multiple other components.","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"* `Ui`: The Ui of the App.","lastModifiedDate":"2021-04-12"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"* `Logic`: The command executor.","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"* `Model`: Holds the data of the App in memory.","lastModifiedDate":"2021-04-06"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"* `Storage`: Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"Each of the four components,","lastModifiedDate":"2021-04-06"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"* defines its API in an interface with the same name as the Component. ","lastModifiedDate":"2021-04-12"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` ","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"  class which implements the corresponding API interface mentioned in the previous point.","lastModifiedDate":"2021-04-06"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"For example, the `Logic` component (see the class diagram given below) ","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"defines its API in the `Logic.java` interface and exposes its functionality ","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"![Logic Class Diagram](images/LogicClassDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"#### How the architecture components interact with each other","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario ","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"where the user issues the command `addon 1 re/i like this food`.","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"![Architecture Sequence Diagram](images/ArchitectureSequenceDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":65,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"Sidney011100"},"content":"The sections below give more details of each component. ","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"### Ui component","lastModifiedDate":"2021-04-12"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"![Model Architecture Diagram](images/UiClassDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"**API:** [`Ui.java`](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/src/main/java/fooddiary/logic/Ui.java)","lastModifiedDate":"2021-04-11"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"* The `Ui` interface consists of a `MainWindow` that is made up of smaller Ui parts. Namely, from top to bottom","lastModifiedDate":"2021-04-11"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":" these are: `CommandBox`, `ResultDisplay`, `EntryListPanel`, `StatusBarFooter`.","lastModifiedDate":"2021-04-11"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"* The `MainWindow` also initialises 3 other windows that are used in The Food Diary. Namely, these are:","lastModifiedDate":"2021-04-12"},{"lineNumber":75,"author":{"gitId":"Donavanty"},"content":" `HelpWindow`, `ViewWindow` and `ReviseWindow`.","lastModifiedDate":"2021-04-11"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"* All of these Ui parts and windows, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2021-04-12"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"* In addition, the `Ui` component also uses the JavaFX Ui framework. The layout of these Ui parts are each defined in","lastModifiedDate":"2021-04-12"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":" their corresponding `.fxml` files that can be loated in the `src/main/resources/view` folder.","lastModifiedDate":"2021-04-11"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"* For example, the layout of the HelpWindow is specified in the `HelpWindow.fxml` file.","lastModifiedDate":"2021-04-12"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"* A universal styling theme is applied to all components, and the styling is defined in 2 files:","lastModifiedDate":"2021-04-11"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":" `DarkTheme.css` and `Extensions.css`. Both are located in the `src/main/resources/view` folder.","lastModifiedDate":"2021-04-11"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"* Images/icons used throughout the app windows are located in the `src/main/resources/images` folder.","lastModifiedDate":"2021-04-11"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":84,"author":{"gitId":"Sidney011100"},"content":"1. The `Ui` component executes user commands using the `Logic` component.","lastModifiedDate":"2021-04-12"},{"lineNumber":85,"author":{"gitId":"Sidney011100"},"content":"2. The `Ui` component also listens for changes to the `Model` data, to which the Ui will be updated to reflect the","lastModifiedDate":"2021-04-12"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":" modified data.","lastModifiedDate":"2021-04-11"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":88,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":89,"author":{"gitId":"Sidney011100"},"content":"### Logic Component","lastModifiedDate":"2021-04-06"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![Logic Class Diagram](images/LogicClassDiagram.png)","lastModifiedDate":"2021-04-10"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**API:** [`Logic.java`](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/src/main/java/fooddiary/logic/Logic.java)","lastModifiedDate":"2021-04-10"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. `Logic` uses the `FoodDiaryParser` class to parse the user command.","lastModifiedDate":"2021-04-10"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2021-04-10"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"3. The command execution can affect the `Model` (e.g. adding an entry to the Food Diary).","lastModifiedDate":"2021-04-12"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"4. The result of the command execution is encapsulated as a `CommandResult` object which is","lastModifiedDate":"2021-04-10"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"passed back to the `Ui`.","lastModifiedDate":"2021-04-10"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"5. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions,","lastModifiedDate":"2021-04-10"},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"such as displaying help to the user.","lastModifiedDate":"2021-04-10"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   ","lastModifiedDate":"2021-04-10"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the","lastModifiedDate":"2021-04-10"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"`execute(\"addon 1 re/Good\")` API call.","lastModifiedDate":"2021-04-10"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":105,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![AddOn Sequence Diagram](images/AddOn_Sequence_Diagram.png)","lastModifiedDate":"2021-04-10"},{"lineNumber":106,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":107,"author":{"gitId":"Sidney011100"},"content":"### Model Component","lastModifiedDate":"2021-04-06"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"![Model Architecture Diagram](images/ModelArchitectureDiagram.png)","lastModifiedDate":"2021-04-10"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**API :** [`Model.java`](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/src/main/java/fooddiary/model/Model.java)","lastModifiedDate":"2021-04-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"The `Model`,","lastModifiedDate":"2021-04-10"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"- stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2021-04-10"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"- stores the user\u0027s food entries data.","lastModifiedDate":"2021-04-10"},{"lineNumber":115,"author":{"gitId":"Sidney011100"},"content":"- exposes an unmodifiable `ObservableList\u003cEntry\u003e` that can be ‘observed’ e.g. the Ui can be bound to this list so that ","lastModifiedDate":"2021-04-12"},{"lineNumber":116,"author":{"gitId":"Sidney011100"},"content":"  the Ui automatically updates when the data in the list change.","lastModifiedDate":"2021-04-12"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"- does not depend on any of the other three components.","lastModifiedDate":"2021-04-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":120,"author":{"gitId":"Sidney011100"},"content":"### Storage Component","lastModifiedDate":"2021-04-06"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"![Storage Architecture Diagram](images/Storage.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**API :** [`Storage.java`](https://github.com/AY2021S2-CS2103-T14-2/tp/blob/master/src/main/java/fooddiary/storage/Storage.java)","lastModifiedDate":"2021-04-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"The `Storage` component,","lastModifiedDate":"2021-04-11"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"- can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2021-04-11"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"- can save the food diary data in json format and read it back.","lastModifiedDate":"2021-04-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":129,"author":{"gitId":"Sidney011100"},"content":"### Common classes","lastModifiedDate":"2021-04-06"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":"* Classes used by multiple components are in the fooddiary.commons package.","lastModifiedDate":"2021-04-11"},{"lineNumber":131,"author":{"gitId":"Donavanty"},"content":"* There are primarily 3 folders of classes classified under common classes. Namely, these are:","lastModifiedDate":"2021-04-11"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"    * Index","lastModifiedDate":"2021-04-11"},{"lineNumber":133,"author":{"gitId":"Donavanty"},"content":"    * Exceptions","lastModifiedDate":"2021-04-11"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"    * Utility","lastModifiedDate":"2021-04-11"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"* In general, these classes are responsible for the processing the app\u0027s logging information, GUI settings,","lastModifiedDate":"2021-04-11"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":" error messages thrown, and file management etc.","lastModifiedDate":"2021-04-11"},{"lineNumber":137,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":138,"author":{"gitId":"Donavanty"},"content":"Notably:","lastModifiedDate":"2021-04-11"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"* The `GuiSetting` class in the `Index` folder contains methods that process all the GUI settings of the app,","lastModifiedDate":"2021-04-11"},{"lineNumber":140,"author":{"gitId":"Donavanty"},"content":" and is essential in allowing the app to restore back the GUI window settings upon reopening the app.","lastModifiedDate":"2021-04-11"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"* The `LogCenter` class in the `Index` folder contains methods that process the loggers and handlers responsible for","lastModifiedDate":"2021-04-11"},{"lineNumber":142,"author":{"gitId":"Donavanty"},"content":" logging useful information on the user\u0027s usage of the app for the developer\u0027s use and understanding.","lastModifiedDate":"2021-04-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## **Implementation**","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"Sidney011100"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2021-04-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":147,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### AddOn Feature","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":"The AddOn feature allows the user to add review(s) and/or a price to a single entry of a food place. This will be useful","lastModifiedDate":"2021-04-10"},{"lineNumber":149,"author":{"gitId":"Sidney011100"},"content":"for users who frequently visit a particular place and would like to enter their reviews, and the price spent on each visit.","lastModifiedDate":"2021-04-12"},{"lineNumber":150,"author":{"gitId":"Sidney011100"},"content":"The reviews are added to the user specified entry, and the price added on will be reflected as a price range of the user\u0027s spending history ","lastModifiedDate":"2021-04-12"},{"lineNumber":151,"author":{"gitId":"Sidney011100"},"content":"(e.g. if the current entry has a price of $5, adding on a price of $10 will update the current price of $5 to a price range of $5-$10).","lastModifiedDate":"2021-04-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":153,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Step 1. The user launches The Food Diary application. Data will be loaded from the storage to the application memory.","lastModifiedDate":"2021-04-11"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"The `FoodDiary` will be populated with a list of `Entry`, each contains: `Name`, `Address`, `Price`","lastModifiedDate":"2021-04-11"},{"lineNumber":157,"author":{"gitId":"Prabhakaran-Gokul"},"content":", `Rating`, `Review`, `TagCategory` and `TagSchool`.","lastModifiedDate":"2021-04-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":159,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Step 2. (Optional) The user executes `list` command to list out all the entries and select the entry to add on details.","lastModifiedDate":"2021-04-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":161,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Step 3. The user executes `addon 1 re/I like this food a lot! p/7` command to add on details to an existing entry. ","lastModifiedDate":"2021-04-11"},{"lineNumber":162,"author":{"gitId":"Sidney011100"},"content":"The command contains values such as a \"I like this food a lot!\" review and a price value of $7.","lastModifiedDate":"2021-04-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":164,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Step 4. If the parameters entered by the user is valid, the application will create a new `entry` and stores the information in `Model` and `Storage`.","lastModifiedDate":"2021-04-11"},{"lineNumber":165,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Else, the FoodDiary will display an appropriate error message. ","lastModifiedDate":"2021-04-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":167,"author":{"gitId":"Prabhakaran-Gokul"},"content":"The following sequence diagram shows how the AddOn feature works:","lastModifiedDate":"2021-03-23"},{"lineNumber":168,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![AddOn Sequence Diagram](images/AddOn_Sequence_Diagram.png)","lastModifiedDate":"2021-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":170,"author":{"gitId":"Sidney011100"},"content":"The following activity diagram summaries the flow of events when a user executes the `addon` command:","lastModifiedDate":"2021-04-12"},{"lineNumber":171,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![AddOn_Activity_Diagram](images/AddOn_Activity_Diagram.png)","lastModifiedDate":"2021-03-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":173,"author":{"gitId":"Prabhakaran-Gokul"},"content":"#### Design Consideration","lastModifiedDate":"2021-04-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":175,"author":{"gitId":"Sidney011100"},"content":"##### Aspect: Whether entry class should have a list of Reviews or a single Review as an attribute (for adding on reviews to an existing entry)","lastModifiedDate":"2021-04-12"},{"lineNumber":176,"author":{"gitId":"Sidney011100"},"content":"* **Alternative 1 (current choice):** Entry containing a list of Reviews as an attribute","lastModifiedDate":"2021-04-12"},{"lineNumber":177,"author":{"gitId":"Sidney011100"},"content":"    * Pros: Looks neater from a design perspective, as additional reviews added on will just be appended to the list of reviews.","lastModifiedDate":"2021-04-12"},{"lineNumber":178,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      Easily extendable in the future (e.g. deleting a specific review in an entry).","lastModifiedDate":"2021-04-11"},{"lineNumber":179,"author":{"gitId":"Sidney011100"},"content":"    * Cons: A lot of refactoring will be needed. Time-consuming.","lastModifiedDate":"2021-04-12"},{"lineNumber":180,"author":{"gitId":"Sidney011100"},"content":"* **Alternative 2:** Entry containing a single Review attribute ","lastModifiedDate":"2021-04-12"},{"lineNumber":181,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * Pros: Easy to implement, as additional reviews can be concatenated as a string to the current review","lastModifiedDate":"2021-04-11"},{"lineNumber":182,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * Cons: This cannot be easily extended in the future (e.g. deleting a specific review in an entry).","lastModifiedDate":"2021-04-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":184,"author":{"gitId":"Sidney011100"},"content":"### List Feature","lastModifiedDate":"2021-04-11"},{"lineNumber":185,"author":{"gitId":"Sidney011100"},"content":"The List feature allows a user to list all entries that they have keyed in thus far. This will be useful when a user","lastModifiedDate":"2021-04-11"},{"lineNumber":186,"author":{"gitId":"Sidney011100"},"content":"wants an overview of all the entries he/she has keyed in previously.","lastModifiedDate":"2021-04-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":188,"author":{"gitId":"Sidney011100"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-11"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":190,"author":{"gitId":"Sidney011100"},"content":"Step 1. The user is in the Food Diary application. ","lastModifiedDate":"2021-04-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":192,"author":{"gitId":"Sidney011100"},"content":"Step 2. The user executes `list`. The Food Diary application lists all the entries in the user\u0027s database. ","lastModifiedDate":"2021-04-12"},{"lineNumber":193,"author":{"gitId":"Sidney011100"},"content":"Each Entry contains the `Name`, `Address`, `Price`, `Rating`,  `Review`, `TagCategory` and `TagSchool`.","lastModifiedDate":"2021-04-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":195,"author":{"gitId":"Sidney011100"},"content":"This feature was brought over to The Food Diary from AB3. ","lastModifiedDate":"2021-04-11"},{"lineNumber":196,"author":{"gitId":"Sidney011100"},"content":"There were not many changes apart from modifying it to list","lastModifiedDate":"2021-04-12"},{"lineNumber":197,"author":{"gitId":"Sidney011100"},"content":"entries instead. Similar to other commands,`MainWindow#executeCommand()` runs and `Logic#execute()`","lastModifiedDate":"2021-04-12"},{"lineNumber":198,"author":{"gitId":"Sidney011100"},"content":"will be called to parse the user input in `FoodDiaryParser#parseCommand()`. ","lastModifiedDate":"2021-04-11"},{"lineNumber":199,"author":{"gitId":"Sidney011100"},"content":"The parsed command will be identified as a list command.","lastModifiedDate":"2021-04-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":201,"author":{"gitId":"DineshMagesvaran"},"content":"### Find Feature","lastModifiedDate":"2021-04-11"},{"lineNumber":202,"author":{"gitId":"DineshMagesvaran"},"content":"The Find feature allows a user to find entries that match **ANY** of the keywords provided by the user.","lastModifiedDate":"2021-04-11"},{"lineNumber":203,"author":{"gitId":"DineshMagesvaran"},"content":"This enables the user to easily sieve out all the entries that meet every single requirement the user","lastModifiedDate":"2021-04-11"},{"lineNumber":204,"author":{"gitId":"DineshMagesvaran"},"content":"is looking for, which will be useful when deciding where to eat.","lastModifiedDate":"2021-04-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":206,"author":{"gitId":"DineshMagesvaran"},"content":"This feature is implemented through the `find` command, where the user will provide a list of keywords that","lastModifiedDate":"2021-04-11"},{"lineNumber":207,"author":{"gitId":"DineshMagesvaran"},"content":"they would like the FoodDiary to utilise to search through the various fields from the FoodDiary entries.","lastModifiedDate":"2021-04-11"},{"lineNumber":208,"author":{"gitId":"DineshMagesvaran"},"content":"The fields that can be searched through include `Name`, `Rating`, `Price`, `Address`, `TagCategory` and","lastModifiedDate":"2021-04-11"},{"lineNumber":209,"author":{"gitId":"DineshMagesvaran"},"content":"`TagSchool`. Using the provided list of keywords, the FoodDiary will search through all the specified searchable","lastModifiedDate":"2021-04-11"},{"lineNumber":210,"author":{"gitId":"Sidney011100"},"content":"fields of all entries, and return all entries that match at least one of the keywords provided. The Ui will then","lastModifiedDate":"2021-04-12"},{"lineNumber":211,"author":{"gitId":"DineshMagesvaran"},"content":"be updated to display the list of entries that were returned as a search result.","lastModifiedDate":"2021-04-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":213,"author":{"gitId":"DineshMagesvaran"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-11"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":215,"author":{"gitId":"DineshMagesvaran"},"content":"The user wants to find for good food places within NUS.","lastModifiedDate":"2021-04-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":217,"author":{"gitId":"DineshMagesvaran"},"content":"Step 1: User enters the command `find 5/5`.","lastModifiedDate":"2021-04-11"},{"lineNumber":218,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":219,"author":{"gitId":"DineshMagesvaran"},"content":"Step 2: The food diary displays all entries that have a rating of 5/5.","lastModifiedDate":"2021-04-11"},{"lineNumber":220,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":221,"author":{"gitId":"DineshMagesvaran"},"content":"Step 3: User is considering whether to visit the food place in the first entry, and uses the view command `view 1`","lastModifiedDate":"2021-04-11"},{"lineNumber":222,"author":{"gitId":"DineshMagesvaran"},"content":"to look through that particular food entry to see past reviews.","lastModifiedDate":"2021-04-11"},{"lineNumber":223,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":224,"author":{"gitId":"DineshMagesvaran"},"content":"Step 4: User decides to visit that particular food place.","lastModifiedDate":"2021-04-11"},{"lineNumber":225,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":226,"author":{"gitId":"DineshMagesvaran"},"content":"To better understand how the Find feature works, refer to the diagrams provided for the FindAll feature, as the","lastModifiedDate":"2021-04-11"},{"lineNumber":227,"author":{"gitId":"DineshMagesvaran"},"content":"implementation is largely the same.","lastModifiedDate":"2021-04-11"},{"lineNumber":228,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":229,"author":{"gitId":"DineshMagesvaran"},"content":"#### Design Considerations","lastModifiedDate":"2021-04-11"},{"lineNumber":230,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":231,"author":{"gitId":"DineshMagesvaran"},"content":"##### Aspect: Whether the syntax used for the find command should be similar to the add command","lastModifiedDate":"2021-04-11"},{"lineNumber":232,"author":{"gitId":"DineshMagesvaran"},"content":"* **Alternative 1 (current choice):** Implement the `find` command without using similar syntax to the `add`","lastModifiedDate":"2021-04-11"},{"lineNumber":233,"author":{"gitId":"DineshMagesvaran"},"content":"  command (eg. `find 5/5 $4-6 western` instead of `find ra/5 p/4-6 c/western`)","lastModifiedDate":"2021-04-11"},{"lineNumber":234,"author":{"gitId":"DineshMagesvaran"},"content":"    * Pros: Lesser syntax required, making the command more user-friendly (**Important as the `find` command","lastModifiedDate":"2021-04-11"},{"lineNumber":235,"author":{"gitId":"DineshMagesvaran"},"content":"      will be executed by the user many more times as compared to the `add` command**)","lastModifiedDate":"2021-04-11"},{"lineNumber":236,"author":{"gitId":"DineshMagesvaran"},"content":"    * Cons: Makes the implementation less standardised across different commands","lastModifiedDate":"2021-04-11"},{"lineNumber":237,"author":{"gitId":"DineshMagesvaran"},"content":"* **Alternative 2:** Implement the `find` command by using similar syntax as the `add` command","lastModifiedDate":"2021-04-11"},{"lineNumber":238,"author":{"gitId":"DineshMagesvaran"},"content":"    * Pros: Makes the implementation more standardised across different commands","lastModifiedDate":"2021-04-11"},{"lineNumber":239,"author":{"gitId":"DineshMagesvaran"},"content":"    * Cons: Greatly slows down the efficiency of performing searches on the FoodDiary, which will negatively","lastModifiedDate":"2021-04-11"},{"lineNumber":240,"author":{"gitId":"DineshMagesvaran"},"content":"    impact the user experience","lastModifiedDate":"2021-04-11"},{"lineNumber":241,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":242,"author":{"gitId":"DineshMagesvaran"},"content":"##### Aspect: How the user input keywords for the Rating and Price fields should be implemented","lastModifiedDate":"2021-04-11"},{"lineNumber":243,"author":{"gitId":"DineshMagesvaran"},"content":"* **Alternative 1 (current choice):** Implement the rating and price fields with additional syntax (eg. Rating","lastModifiedDate":"2021-04-11"},{"lineNumber":244,"author":{"gitId":"DineshMagesvaran"},"content":"  implemented as `RATING/5` instead of `RATING`, and price implemented as `$PRICE` or `$PRICE-PRICE` instead","lastModifiedDate":"2021-04-11"},{"lineNumber":245,"author":{"gitId":"DineshMagesvaran"},"content":"  of `PRICE` or `PRICE-PRICE`)","lastModifiedDate":"2021-04-11"},{"lineNumber":246,"author":{"gitId":"DineshMagesvaran"},"content":"    * Pros: More intuitive keywords for the user to type out when performing their search","lastModifiedDate":"2021-04-11"},{"lineNumber":247,"author":{"gitId":"DineshMagesvaran"},"content":"    * Cons: More typing is required, with additional syntax that needs to be strictly followed","lastModifiedDate":"2021-04-11"},{"lineNumber":248,"author":{"gitId":"DineshMagesvaran"},"content":"* **Alternative 2:** Implement the rating and price fields without additional syntax","lastModifiedDate":"2021-04-11"},{"lineNumber":249,"author":{"gitId":"DineshMagesvaran"},"content":"    * Pros: Keywords can be typed out faster, makes performing searches more efficient","lastModifiedDate":"2021-04-11"},{"lineNumber":250,"author":{"gitId":"DineshMagesvaran"},"content":"    * Cons: Possibility of user getting back results for rating when finding for price, or getting back results","lastModifiedDate":"2021-04-11"},{"lineNumber":251,"author":{"gitId":"DineshMagesvaran"},"content":"    for price when finding for rating","lastModifiedDate":"2021-04-11"},{"lineNumber":252,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":253,"author":{"gitId":"DineshMagesvaran"},"content":"### FindAll Feature","lastModifiedDate":"2021-03-25"},{"lineNumber":254,"author":{"gitId":"DineshMagesvaran"},"content":"The FindAll feature allows a user to find entries that match **ALL** the keywords provided by the user.","lastModifiedDate":"2021-04-11"},{"lineNumber":255,"author":{"gitId":"DineshMagesvaran"},"content":"This enables the user to easily sieve out all the entries that meet every single requirement the user","lastModifiedDate":"2021-03-25"},{"lineNumber":256,"author":{"gitId":"DineshMagesvaran"},"content":"is looking for, which will be useful when deciding where to eat.","lastModifiedDate":"2021-03-25"},{"lineNumber":257,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":258,"author":{"gitId":"Prabhakaran-Gokul"},"content":"This feature is implemented through the `findall` command, where the user will provide a list of keywords that","lastModifiedDate":"2021-04-12"},{"lineNumber":259,"author":{"gitId":"DineshMagesvaran"},"content":"they would like the FoodDiary to utilise to search through the various fields from the FoodDiary entries.","lastModifiedDate":"2021-04-11"},{"lineNumber":260,"author":{"gitId":"DineshMagesvaran"},"content":"The fields that can be searched through include `Name`, `Rating`, `Price`, `Address`, `TagCategory` and","lastModifiedDate":"2021-04-11"},{"lineNumber":261,"author":{"gitId":"DineshMagesvaran"},"content":"`TagSchool`. Using the provided list of keywords, the FoodDiary will search through all the specified searchable","lastModifiedDate":"2021-04-11"},{"lineNumber":262,"author":{"gitId":"Sidney011100"},"content":"fields of all entries, and return all entries that match all the keywords provided. The Ui will then","lastModifiedDate":"2021-04-12"},{"lineNumber":263,"author":{"gitId":"DineshMagesvaran"},"content":"be updated to display the list of entries that were returned as a search result.","lastModifiedDate":"2021-04-11"},{"lineNumber":264,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":265,"author":{"gitId":"DineshMagesvaran"},"content":"The FindAll feature is similar to the Find feature. The Find feature finds for all entries that meet","lastModifiedDate":"2021-03-25"},{"lineNumber":266,"author":{"gitId":"DineshMagesvaran"},"content":"at least **one of the given keywords,** while the FindAll feature only finds for entries that meet **all the","lastModifiedDate":"2021-04-11"},{"lineNumber":267,"author":{"gitId":"DineshMagesvaran"},"content":"given keywords.**","lastModifiedDate":"2021-04-11"},{"lineNumber":268,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":269,"author":{"gitId":"DineshMagesvaran"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-11"},{"lineNumber":270,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":271,"author":{"gitId":"DineshMagesvaran"},"content":"The user wants to find for good food places within NUS that are within their budget, from a specific food","lastModifiedDate":"2021-04-11"},{"lineNumber":272,"author":{"gitId":"DineshMagesvaran"},"content":"category.","lastModifiedDate":"2021-04-11"},{"lineNumber":273,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":274,"author":{"gitId":"DineshMagesvaran"},"content":"Step 1: User enters the command `findall 5/5 $0-10 western`.","lastModifiedDate":"2021-04-11"},{"lineNumber":275,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":276,"author":{"gitId":"DineshMagesvaran"},"content":"Step 2: The food diary displays all entries that have a rating of 5/5, a price range that contains food options","lastModifiedDate":"2021-04-11"},{"lineNumber":277,"author":{"gitId":"DineshMagesvaran"},"content":"$10 or below, and that have western food available.","lastModifiedDate":"2021-04-11"},{"lineNumber":278,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":279,"author":{"gitId":"DineshMagesvaran"},"content":"Step 3: User is considering whether to visit the food place in the first entry, and uses the view command `view 1`","lastModifiedDate":"2021-04-11"},{"lineNumber":280,"author":{"gitId":"DineshMagesvaran"},"content":"to look through that particular food entry to see past reviews.","lastModifiedDate":"2021-04-11"},{"lineNumber":281,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":282,"author":{"gitId":"DineshMagesvaran"},"content":"Step 4: User decides to visit that particular food place.","lastModifiedDate":"2021-04-11"},{"lineNumber":283,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":284,"author":{"gitId":"DineshMagesvaran"},"content":"The following sequence diagram shows how the FindAll feature works:","lastModifiedDate":"2021-03-25"},{"lineNumber":285,"author":{"gitId":"DineshMagesvaran"},"content":"![FindAll Sequence Diagram](images/FindAllSequenceDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":286,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":287,"author":{"gitId":"Prabhakaran-Gokul"},"content":"The following activity diagram summarises the events that take place when a user executes the `findall`","lastModifiedDate":"2021-04-12"},{"lineNumber":288,"author":{"gitId":"DineshMagesvaran"},"content":"command:","lastModifiedDate":"2021-03-25"},{"lineNumber":289,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":290,"author":{"gitId":"DineshMagesvaran"},"content":"![FindAll Activity Diagram](images/FindAllActivityDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":291,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":292,"author":{"gitId":"DineshMagesvaran"},"content":"#### Design Consideration","lastModifiedDate":"2021-04-11"},{"lineNumber":293,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":294,"author":{"gitId":"DineshMagesvaran"},"content":"##### Aspect: Whether the FindAll feature should be implemented as a separate command from the Find feature","lastModifiedDate":"2021-04-11"},{"lineNumber":295,"author":{"gitId":"DineshMagesvaran"},"content":"* **Alternative 1 (current choice):** Implement the FindAll feature as a separate command","lastModifiedDate":"2021-04-11"},{"lineNumber":296,"author":{"gitId":"DineshMagesvaran"},"content":"    * Pros: Easier to implement, and more user-friendly as less syntax is required","lastModifiedDate":"2021-04-11"},{"lineNumber":297,"author":{"gitId":"DineshMagesvaran"},"content":"    * Cons: User has to utilise 2 different commands despite them both performing a similar search function","lastModifiedDate":"2021-04-11"},{"lineNumber":298,"author":{"gitId":"DineshMagesvaran"},"content":"* **Alternative 2:** Implement the FindAll feature using the same command as the Find feature","lastModifiedDate":"2021-04-11"},{"lineNumber":299,"author":{"gitId":"DineshMagesvaran"},"content":"    * Pros: User can carry out all searches using only one command, which makes the features fit together better","lastModifiedDate":"2021-04-11"},{"lineNumber":300,"author":{"gitId":"DineshMagesvaran"},"content":"      than the first alternative","lastModifiedDate":"2021-04-11"},{"lineNumber":301,"author":{"gitId":"DineshMagesvaran"},"content":"    * Cons: Much harder to implement, and less user-friendly as more syntax is required due to the user needing to","lastModifiedDate":"2021-04-11"},{"lineNumber":302,"author":{"gitId":"DineshMagesvaran"},"content":"      specify the method of search between the Find and FindAll features that they would like to use to perform","lastModifiedDate":"2021-04-11"},{"lineNumber":303,"author":{"gitId":"DineshMagesvaran"},"content":"      their search","lastModifiedDate":"2021-04-11"},{"lineNumber":304,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":305,"author":{"gitId":"Sidney011100"},"content":"### Revise Feature","lastModifiedDate":"2021-04-06"},{"lineNumber":306,"author":{"gitId":"Sidney011100"},"content":"The Revise feature allows a user to quickly edit different sections of an entry. It is often misunderstood to be ","lastModifiedDate":"2021-04-06"},{"lineNumber":307,"author":{"gitId":"Sidney011100"},"content":"mutually exclusive with the edit feature or the slower alternative. This feature shines when a user wishes to edit ","lastModifiedDate":"2021-04-06"},{"lineNumber":308,"author":{"gitId":"Sidney011100"},"content":"while also adding into multiple sections in an entry. The edit and addon features are still necessities for making ","lastModifiedDate":"2021-04-06"},{"lineNumber":309,"author":{"gitId":"Sidney011100"},"content":"quick and small chanegs to an entry.","lastModifiedDate":"2021-04-06"},{"lineNumber":310,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":311,"author":{"gitId":"Sidney011100"},"content":"The command opens an additional window when a user enters the command in the Ui, the command will be passed into ","lastModifiedDate":"2021-04-12"},{"lineNumber":312,"author":{"gitId":"Sidney011100"},"content":"`MainWindow#executeCommand()`, in which `Logic#execute()` will be called to parse the user input in `FoodDiaryParser#parseCommand()`.","lastModifiedDate":"2021-04-06"},{"lineNumber":313,"author":{"gitId":"Sidney011100"},"content":"The user input will be parsed as a \u0027Revise\u0027 command and executed to retrieve all the details related to the specified entry.","lastModifiedDate":"2021-04-06"},{"lineNumber":314,"author":{"gitId":"Sidney011100"},"content":"With the window for revision of the entry, a user can easily make changes to the sections all at once. ","lastModifiedDate":"2021-04-06"},{"lineNumber":315,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":316,"author":{"gitId":"Sidney011100"},"content":"With the revise button, all the changes made are passed into the `MainWindow#executeCommand()`, and makes its way to ","lastModifiedDate":"2021-04-06"},{"lineNumber":317,"author":{"gitId":"Sidney011100"},"content":"`ReviseCommand#revise()` with calls `MainWindow#executeCommand()` with the content at each section concatenated with its","lastModifiedDate":"2021-04-06"},{"lineNumber":318,"author":{"gitId":"Sidney011100"},"content":"prefix and the EditCommand. ","lastModifiedDate":"2021-04-06"},{"lineNumber":319,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":320,"author":{"gitId":"Sidney011100"},"content":"The following sequence diagram shows how Revise feature works:","lastModifiedDate":"2021-04-06"},{"lineNumber":321,"author":{"gitId":"DineshMagesvaran"},"content":"![Revise Sequence Diagram](images/ReviseSequenceDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":322,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":323,"author":{"gitId":"Prabhakaran-Gokul"},"content":"The following activity diagram summarises the events that take place when a user executes the `revise` command:","lastModifiedDate":"2021-04-12"},{"lineNumber":324,"author":{"gitId":"Sidney011100"},"content":"![Revise Activity Diagram](images/ReviseActivityDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":325,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":326,"author":{"gitId":"marcusleeeugene"},"content":"#### Design Consideration","lastModifiedDate":"2021-04-10"},{"lineNumber":327,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":328,"author":{"gitId":"Sidney011100"},"content":"##### Aspect: Whether to revise entry in command line or in a new Ui window.","lastModifiedDate":"2021-04-12"},{"lineNumber":329,"author":{"gitId":"Sidney011100"},"content":"* **Alternative 1 (current choice):** Revise entry in a new Ui window.","lastModifiedDate":"2021-04-12"},{"lineNumber":330,"author":{"gitId":"marcusleeeugene"},"content":"    * Pros: View all details of an entry and easily revise them with keyboard shortcuts.","lastModifiedDate":"2021-04-10"},{"lineNumber":331,"author":{"gitId":"Sidney011100"},"content":"    * Cons: Revise is not done purely in command line, but rather in a Ui window.","lastModifiedDate":"2021-04-12"},{"lineNumber":332,"author":{"gitId":"marcusleeeugene"},"content":"* **Alternative 2:** Revise entry in command line.","lastModifiedDate":"2021-04-10"},{"lineNumber":333,"author":{"gitId":"marcusleeeugene"},"content":"  * Pros: Revise is purely done in the command line.","lastModifiedDate":"2021-04-10"},{"lineNumber":334,"author":{"gitId":"marcusleeeugene"},"content":"  * Cons: For entry with lengthy details, it will flood the command line space and be difficult for revising.","lastModifiedDate":"2021-04-10"},{"lineNumber":335,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":336,"author":{"gitId":"Donavanty"},"content":"### Edit Feature","lastModifiedDate":"2021-04-11"},{"lineNumber":337,"author":{"gitId":"Donavanty"},"content":"#### Implementation","lastModifiedDate":"2021-04-11"},{"lineNumber":338,"author":{"gitId":"Donavanty"},"content":"At its core, the `edit` feature allows a user to edit multiple fields pertaining to the entry specified by its `index`,","lastModifiedDate":"2021-04-11"},{"lineNumber":339,"author":{"gitId":"Donavanty"},"content":" in a single edit command. The `edit` feature is the fundamental feature for editing an entry, and it is recommended","lastModifiedDate":"2021-04-11"},{"lineNumber":340,"author":{"gitId":"Donavanty"},"content":" for users to use it if minor changes to an entry are to be made, typically caused by a spelling mistake or typo.","lastModifiedDate":"2021-04-11"},{"lineNumber":341,"author":{"gitId":"Donavanty"},"content":" As such, the edit feature runs solely via the command typed in the command box. The following feature,","lastModifiedDate":"2021-04-11"},{"lineNumber":342,"author":{"gitId":"Donavanty"},"content":" the `revise` feature, builds upon the implementation of the `edit` feature. See more below.","lastModifiedDate":"2021-04-11"},{"lineNumber":343,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":344,"author":{"gitId":"Donavanty"},"content":"When the edit command is called the command will be passed into `MainWindow#executeCommand()`, to which","lastModifiedDate":"2021-04-11"},{"lineNumber":345,"author":{"gitId":"Donavanty"},"content":" `Logic#execute()` will be called to parse the user input in `FoodDiaryParser#parseCommand()`.","lastModifiedDate":"2021-04-11"},{"lineNumber":346,"author":{"gitId":"Prabhakaran-Gokul"},"content":" The user input will be parsed as an `edit` command and executed to edit the entry specified by","lastModifiedDate":"2021-04-12"},{"lineNumber":347,"author":{"gitId":"Donavanty"},"content":" the index of the command.","lastModifiedDate":"2021-04-11"},{"lineNumber":348,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":349,"author":{"gitId":"Prabhakaran-Gokul"},"content":"If the command `edit 1 re/New review` is passed, the `edit` command essentially replaces the old entry with a new","lastModifiedDate":"2021-04-12"},{"lineNumber":350,"author":{"gitId":"Sidney011100"},"content":" entry that has the new review. The `edit` command calls `Model#setEntry()`, which calls","lastModifiedDate":"2021-04-12"},{"lineNumber":351,"author":{"gitId":"Donavanty"},"content":" `ModelManager#setEntry()`, that calls `FoodDiary#setEntry()` to eventually change the target entry with a new entry.","lastModifiedDate":"2021-04-11"},{"lineNumber":352,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":353,"author":{"gitId":"Donavanty"},"content":"The following sequence diagram shows how Edit feature works:","lastModifiedDate":"2021-04-11"},{"lineNumber":354,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![Edit Sequence Diagram](images/EditSequenceDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":355,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":356,"author":{"gitId":"Donavanty"},"content":"The following activity diagram summarises the events that take place when a user executes the `edit`","lastModifiedDate":"2021-04-11"},{"lineNumber":357,"author":{"gitId":"Donavanty"},"content":"command:","lastModifiedDate":"2021-04-11"},{"lineNumber":358,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![Edit Activity Diagram](images/EditActivityDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":359,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":360,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":361,"author":{"gitId":"Donavanty"},"content":"##### Design Consideration","lastModifiedDate":"2021-04-11"},{"lineNumber":362,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":363,"author":{"gitId":"Sidney011100"},"content":"##### Aspect: Whether to edit a command in the command line or in a new Ui window.","lastModifiedDate":"2021-04-12"},{"lineNumber":364,"author":{"gitId":"Donavanty"},"content":"* **Alternative 1 (current choice):** Edit entry in command line. ","lastModifiedDate":"2021-04-11"},{"lineNumber":365,"author":{"gitId":"Donavanty"},"content":"  * Pros: View all details of an entry and easily revise them with keyboard shortcuts.","lastModifiedDate":"2021-04-11"},{"lineNumber":366,"author":{"gitId":"Donavanty"},"content":"  * Cons: For entries with lengthy details, typing long commands in the command line fills up the text field space","lastModifiedDate":"2021-04-11"},{"lineNumber":367,"author":{"gitId":"Donavanty"},"content":"  and makes it difficult for editing.","lastModifiedDate":"2021-04-11"},{"lineNumber":368,"author":{"gitId":"Sidney011100"},"content":"* **Alternative 2:** Edit the entry in a new Ui window. ","lastModifiedDate":"2021-04-12"},{"lineNumber":369,"author":{"gitId":"Donavanty"},"content":"  * Pros: Edit is purely done in the command line, which might be convenient for minor changes a user want s to make.","lastModifiedDate":"2021-04-11"},{"lineNumber":370,"author":{"gitId":"Sidney011100"},"content":"  * Cons: Edit is not done purely in command line, but rather in a Ui window. This might pose an inconvenience","lastModifiedDate":"2021-04-12"},{"lineNumber":371,"author":{"gitId":"Donavanty"},"content":"  for the user given the added step to edit a field of an entry.","lastModifiedDate":"2021-04-11"},{"lineNumber":372,"author":{"gitId":"Donavanty"},"content":"  ","lastModifiedDate":"2021-04-11"},{"lineNumber":373,"author":{"gitId":"Donavanty"},"content":"  As such, we decided to implement a new feature named `revise` for users to achieve the cons of the current choice","lastModifiedDate":"2021-04-11"},{"lineNumber":374,"author":{"gitId":"Donavanty"},"content":"  for `edit` and the pros for the alternative.","lastModifiedDate":"2021-04-11"},{"lineNumber":375,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":376,"author":{"gitId":"Donavanty"},"content":"### Help Feature","lastModifiedDate":"2021-04-11"},{"lineNumber":377,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":378,"author":{"gitId":"Sidney011100"},"content":"The `help` feature primarily helps the user by showing a help guide whenever a user wishes to see it.","lastModifiedDate":"2021-04-12"},{"lineNumber":379,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":380,"author":{"gitId":"Sidney011100"},"content":"* The help guide is a succinct version of all the commands and keywords for certain input parameters.","lastModifiedDate":"2021-04-12"},{"lineNumber":381,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":382,"author":{"gitId":"Sidney011100"},"content":"* The help guide also displays examples related to each command for users to quickly get a sense of what","lastModifiedDate":"2021-04-12"},{"lineNumber":383,"author":{"gitId":"Donavanty"},"content":" each command does.","lastModifiedDate":"2021-04-11"},{"lineNumber":384,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":385,"author":{"gitId":"Donavanty"},"content":"* The help guide also contains the link to our User Guide where users can copy the link from","lastModifiedDate":"2021-04-11"},{"lineNumber":386,"author":{"gitId":"Sidney011100"},"content":" and visit for more information.","lastModifiedDate":"2021-04-12"},{"lineNumber":387,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":388,"author":{"gitId":"Sidney011100"},"content":"An additional `HelpWindow` is opened when a user enters the `help` command in the Ui. ","lastModifiedDate":"2021-04-12"},{"lineNumber":389,"author":{"gitId":"Sidney011100"},"content":"The command will be passed into `MainWindow#executeCommand()`, in which `Logic#execute()` will be called to parse the","lastModifiedDate":"2021-04-12"},{"lineNumber":390,"author":{"gitId":"Donavanty"},"content":"user input in `FoodDiaryParser#parseCommand()`. The user input will be parsed as a \u0027Help\u0027 command.","lastModifiedDate":"2021-04-11"},{"lineNumber":391,"author":{"gitId":"Sidney011100"},"content":"At the end, a `HelpWindow` is returned.","lastModifiedDate":"2021-04-12"},{"lineNumber":392,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":393,"author":{"gitId":"Donavanty"},"content":"The following sequence diagram shows how the Help feature works:","lastModifiedDate":"2021-04-11"},{"lineNumber":394,"author":{"gitId":"Donavanty"},"content":"![Help Sequence Diagram](images/HelpSequenceDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":395,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":396,"author":{"gitId":"Donavanty"},"content":"The following activity diagram summarizes what happens when a user executes the `help` command:","lastModifiedDate":"2021-04-11"},{"lineNumber":397,"author":{"gitId":"Donavanty"},"content":"![Help Activity Diagram](images/HelpActivityDiagram.png)","lastModifiedDate":"2021-04-11"},{"lineNumber":398,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":399,"author":{"gitId":"Sidney011100"},"content":"### View Feature","lastModifiedDate":"2021-04-06"},{"lineNumber":400,"author":{"gitId":"marcusleeeugene"},"content":"`view`: Allows the user to view a specified entry in a new window, allowing the user to carefully look through","lastModifiedDate":"2021-04-11"},{"lineNumber":401,"author":{"gitId":"marcusleeeugene"},"content":"all the details of an entry. This feature is mainly used to read lengthy food reviews which cannot be shown on the Main ","lastModifiedDate":"2021-04-09"},{"lineNumber":402,"author":{"gitId":"Sidney011100"},"content":"Ui window.","lastModifiedDate":"2021-04-12"},{"lineNumber":403,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":404,"author":{"gitId":"marcusleeeugene"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-08"},{"lineNumber":405,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":406,"author":{"gitId":"marcusleeeugene"},"content":"Step 1. The user launches The Food Diary application. Data will be loaded from the storage to the application memory. ","lastModifiedDate":"2021-04-09"},{"lineNumber":407,"author":{"gitId":"marcusleeeugene"},"content":"The `FoodDiary` will be populated with a list of `Entry`, each contains: `Name`, `Address`, `Price` ","lastModifiedDate":"2021-04-09"},{"lineNumber":408,"author":{"gitId":"marcusleeeugene"},"content":", `Rating`, `Review`, `TagCategory` and `TagSchool`.","lastModifiedDate":"2021-04-09"},{"lineNumber":409,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":410,"author":{"gitId":"marcusleeeugene"},"content":"Step 2. The user executes `view \u003cINDEX\u003e`, for whichever entry with lengthy reviews he/she wants to view.","lastModifiedDate":"2021-04-11"},{"lineNumber":411,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":412,"author":{"gitId":"marcusleeeugene"},"content":"Step 3. If the user input is invalid, an error message will be displayed in the command box, If the entry specified do","lastModifiedDate":"2021-04-09"},{"lineNumber":413,"author":{"gitId":"marcusleeeugene"},"content":"not exist, the filteredEntryList will be empty and no entry will be displayed on the Main Window.  ","lastModifiedDate":"2021-04-09"},{"lineNumber":414,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":415,"author":{"gitId":"Sidney011100"},"content":"The mechanism works in such a way where after the user enters a command in the Ui, the command will be passed into","lastModifiedDate":"2021-04-12"},{"lineNumber":416,"author":{"gitId":"Sidney011100"},"content":"`MainWindow#executeCommand()`, in which `Logic#execute()` will be called to parse the user input in","lastModifiedDate":"2021-04-06"},{"lineNumber":417,"author":{"gitId":"Prabhakaran-Gokul"},"content":"`FoodDiaryParser#parseCommand()`. The parsed command will be recognised as a `view` command and executed to ","lastModifiedDate":"2021-04-12"},{"lineNumber":418,"author":{"gitId":"Sidney011100"},"content":"retrieve all the details related to the specified entry. The result of this execution will be passed back to the Ui and ","lastModifiedDate":"2021-04-12"},{"lineNumber":419,"author":{"gitId":"marcusleeeugene"},"content":"shown in a new window.","lastModifiedDate":"2021-04-09"},{"lineNumber":420,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":421,"author":{"gitId":"Donavanty"},"content":"The following sequence diagram shows how the View feature works:","lastModifiedDate":"2021-04-11"},{"lineNumber":422,"author":{"gitId":"Sidney011100"},"content":"![View Sequence Diagram](images/ViewSequenceDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":423,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":424,"author":{"gitId":"marcusleeeugene"},"content":"The following activity diagram summarizes what happens when a user executes the `view` command:","lastModifiedDate":"2021-04-11"},{"lineNumber":425,"author":{"gitId":"Sidney011100"},"content":"![View Activity Diagram](images/ViewActivityDiagram.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":426,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":427,"author":{"gitId":"marcusleeeugene"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: ","lastModifiedDate":"2021-04-11"},{"lineNumber":428,"author":{"gitId":"marcusleeeugene"},"content":"**Note:** If the index specified by the user do not exist in The Food Diary, a CommandException will be thrown and the","lastModifiedDate":"2021-04-11"},{"lineNumber":429,"author":{"gitId":"marcusleeeugene"},"content":"error will be displayed to the user in the command box. If index is not specified, the error message in the command box","lastModifiedDate":"2021-04-11"},{"lineNumber":430,"author":{"gitId":"Prabhakaran-Gokul"},"content":"will show the correct syntax to use for the `view` command.","lastModifiedDate":"2021-04-12"},{"lineNumber":431,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":433,"author":{"gitId":"marcusleeeugene"},"content":"#### Design Consideration","lastModifiedDate":"2021-04-09"},{"lineNumber":434,"author":{"gitId":"Sidney011100"},"content":"##### Aspect: Whether to view entry with lengthy reviews in the Main Ui or in a new window.","lastModifiedDate":"2021-04-12"},{"lineNumber":435,"author":{"gitId":"marcusleeeugene"},"content":"* **Alternative 1 (current choice):** View entry with lengthy reviews in a new window.","lastModifiedDate":"2021-04-09"},{"lineNumber":436,"author":{"gitId":"Sidney011100"},"content":"    * Pros: Easier to implement, do not need to deal with complex Ui codes. Entry information looks neater.","lastModifiedDate":"2021-04-12"},{"lineNumber":437,"author":{"gitId":"marcusleeeugene"},"content":"    * Cons: User has to close/minimize the window to return to Main Window.","lastModifiedDate":"2021-04-09"},{"lineNumber":438,"author":{"gitId":"Sidney011100"},"content":"* **Alternative 2:** View entry with lengthy reviews in the Main Ui.","lastModifiedDate":"2021-04-12"},{"lineNumber":439,"author":{"gitId":"Sidney011100"},"content":"    * Pros: Design is integrated within Main Ui, which gives it a cleaner look.","lastModifiedDate":"2021-04-12"},{"lineNumber":440,"author":{"gitId":"marcusleeeugene"},"content":"    * Cons: Difficult to implement, lesser time for testability given the project deadline duration.","lastModifiedDate":"2021-04-09"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":442,"author":{"gitId":"marcusleeeugene"},"content":"### Clear Feature","lastModifiedDate":"2021-04-11"},{"lineNumber":443,"author":{"gitId":"marcusleeeugene"},"content":"`clear`: Allows the user to clear entries in The Food Diary.","lastModifiedDate":"2021-04-11"},{"lineNumber":444,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":445,"author":{"gitId":"marcusleeeugene"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-11"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":447,"author":{"gitId":"marcusleeeugene"},"content":"Step 1. The user launches The Food Diary application. Data will be loaded from the storage to the application memory.","lastModifiedDate":"2021-04-11"},{"lineNumber":448,"author":{"gitId":"marcusleeeugene"},"content":"The `FoodDiary` will be populated with a list of `Entry`, each contains: `Name`, `Address`, `Price`","lastModifiedDate":"2021-04-11"},{"lineNumber":449,"author":{"gitId":"marcusleeeugene"},"content":", `Rating`, `Review`, `TagCategory` and `TagSchool`.","lastModifiedDate":"2021-04-11"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":451,"author":{"gitId":"marcusleeeugene"},"content":"Step 2. The user executes `clear` to clear all entries in The Food Diary.","lastModifiedDate":"2021-04-11"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":453,"author":{"gitId":"Sidney011100"},"content":"This feature was brought over to The Food Diary from AB3. There were not many changes apart from modifying it to clear","lastModifiedDate":"2021-04-12"},{"lineNumber":454,"author":{"gitId":"Sidney011100"},"content":"entries instead. Similar to other commands,`MainWindow#executeCommand()` runs and `Logic#execute()` ","lastModifiedDate":"2021-04-12"},{"lineNumber":455,"author":{"gitId":"marcusleeeugene"},"content":"will be called to parse the user input in `FoodDiaryParser#parseCommand()`. The parsed command will be identified","lastModifiedDate":"2021-04-11"},{"lineNumber":456,"author":{"gitId":"marcusleeeugene"},"content":"as a `clear` command.","lastModifiedDate":"2021-04-11"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":458,"author":{"gitId":"Sidney011100"},"content":"### Exit Feature","lastModifiedDate":"2021-04-11"},{"lineNumber":459,"author":{"gitId":"Sidney011100"},"content":"The Exit feature allows a user to close the application.","lastModifiedDate":"2021-04-11"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":461,"author":{"gitId":"Sidney011100"},"content":"Given below is an example usage scenario:","lastModifiedDate":"2021-04-11"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":463,"author":{"gitId":"Sidney011100"},"content":"Step 1. The user is the midst of using The Food Diary application. The user has finished using the application.","lastModifiedDate":"2021-04-11"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":465,"author":{"gitId":"Sidney011100"},"content":"Step 2. The user executes `exit` and closes the application.","lastModifiedDate":"2021-04-11"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":467,"author":{"gitId":"Sidney011100"},"content":"This feature was brought over to The Food Diary from AB3. ","lastModifiedDate":"2021-04-11"},{"lineNumber":468,"author":{"gitId":"Sidney011100"},"content":"There were no changes. Similar to other commands,MainWindow#executeCommand() runs and Logic#execute()","lastModifiedDate":"2021-04-12"},{"lineNumber":469,"author":{"gitId":"Sidney011100"},"content":"will be called to parse the user input in FoodDiaryParser#parseCommand().","lastModifiedDate":"2021-04-11"},{"lineNumber":470,"author":{"gitId":"Sidney011100"},"content":"The parsed command will be identified as the exit command.","lastModifiedDate":"2021-04-11"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":473,"author":{"gitId":"marcusleeeugene"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2021-04-10"},{"lineNumber":474,"author":{"gitId":"marcusleeeugene"},"content":"- [Documentation guide](Documentation.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":475,"author":{"gitId":"marcusleeeugene"},"content":"- [Testing guide](Testing.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":476,"author":{"gitId":"marcusleeeugene"},"content":"- [Logging guide](Logging.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":477,"author":{"gitId":"marcusleeeugene"},"content":"- [Configuration guide](Configuration.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":478,"author":{"gitId":"marcusleeeugene"},"content":"- [DevOps guide](DevOps.md)","lastModifiedDate":"2021-04-10"},{"lineNumber":479,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":480,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":481,"author":{"gitId":"Donavanty"},"content":"## **Appendix A: Challenges Faced**","lastModifiedDate":"2021-04-11"},{"lineNumber":482,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":483,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Challenges Faced \u0026 Rationales","lastModifiedDate":"2021-04-12"},{"lineNumber":484,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":485,"author":{"gitId":"Donavanty"},"content":"1. One of the most significant challenges on the creation of The Food Diary was refactoring and redefining classes and","lastModifiedDate":"2021-04-11"},{"lineNumber":486,"author":{"gitId":"Donavanty"},"content":" methods to match the implementation of a Food Diary, and in doing so do away with previous implementations","lastModifiedDate":"2021-04-11"},{"lineNumber":487,"author":{"gitId":"Donavanty"},"content":" that would otherwise suggest the implementation of an address book.","lastModifiedDate":"2021-04-11"},{"lineNumber":488,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":489,"author":{"gitId":"Donavanty"},"content":" * This thus involved major refactoring of the code base, followed by converting/creating several entities to match","lastModifiedDate":"2021-04-11"},{"lineNumber":490,"author":{"gitId":"Donavanty"},"content":" a Food Diary, such as the `Pricing` and `Rating` classes etc. pertaining to a journal entry in The Food Diary.","lastModifiedDate":"2021-04-11"},{"lineNumber":491,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":492,"author":{"gitId":"Donavanty"},"content":" * Creating these new entities entailed creating the appropriate classes in the `Model` package to manage and process","lastModifiedDate":"2021-04-11"},{"lineNumber":493,"author":{"gitId":"Donavanty"},"content":" these new entities in the app\u0027s memory.","lastModifiedDate":"2021-04-11"},{"lineNumber":494,"author":{"gitId":"Donavanty"},"content":" ","lastModifiedDate":"2021-04-11"},{"lineNumber":495,"author":{"gitId":"Donavanty"},"content":"2. We explored several design options when creating new features such as the `revise` and `view` features. We realised","lastModifiedDate":"2021-04-11"},{"lineNumber":496,"author":{"gitId":"Donavanty"},"content":" that while users could rely majorly on the keyboard to execute most of the app\u0027s features, this was however not the","lastModifiedDate":"2021-04-11"},{"lineNumber":497,"author":{"gitId":"Donavanty"},"content":" best, since users would miss the capability to view the different fields of their entries in full,","lastModifiedDate":"2021-04-11"},{"lineNumber":498,"author":{"gitId":"Donavanty"},"content":" which would have otherwise further enhanced their usage of the app.","lastModifiedDate":"2021-04-11"},{"lineNumber":499,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":500,"author":{"gitId":"Donavanty"},"content":"    * This led us to create new separate windows that would pop up and allow users to view/revise the fields of their","lastModifiedDate":"2021-04-11"},{"lineNumber":501,"author":{"gitId":"Donavanty"},"content":"    specified entry in greater detail, without compromising their ability to edit. For `revise`, users could choose to","lastModifiedDate":"2021-04-11"},{"lineNumber":502,"author":{"gitId":"Donavanty"},"content":"    select which field to edit by clicking, or by using keyboard shortcuts; this did not compromise the","lastModifiedDate":"2021-04-11"},{"lineNumber":503,"author":{"gitId":"Donavanty"},"content":"    keyboard-intensive interface that users might rely on.","lastModifiedDate":"2021-04-11"},{"lineNumber":504,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":505,"author":{"gitId":"Donavanty"},"content":"    * We nonetheless still implemented the keyboard-based `edit` feature, and deemed that it was still useful for users","lastModifiedDate":"2021-04-11"},{"lineNumber":506,"author":{"gitId":"Donavanty"},"content":"     who had minor edits to perform on their specified entry, which would make having to open up a separate window","lastModifiedDate":"2021-04-11"},{"lineNumber":507,"author":{"gitId":"Donavanty"},"content":"     more inconvenient.","lastModifiedDate":"2021-04-11"},{"lineNumber":508,"author":{"gitId":"Donavanty"},"content":"     ","lastModifiedDate":"2021-04-11"},{"lineNumber":509,"author":{"gitId":"Donavanty"},"content":"    * In all, design decisions had to be made, and we put ourselves in the perspectives of our users and implemented","lastModifiedDate":"2021-04-11"},{"lineNumber":510,"author":{"gitId":"Donavanty"},"content":"     features and designs to what we felt best fitted them.","lastModifiedDate":"2021-04-11"},{"lineNumber":511,"author":{"gitId":"Donavanty"},"content":"     ","lastModifiedDate":"2021-04-11"},{"lineNumber":512,"author":{"gitId":"Donavanty"},"content":"3. We constantly questioned ourselves as to how The Food Diary could be catered more towards NUS students.","lastModifiedDate":"2021-04-11"},{"lineNumber":513,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":514,"author":{"gitId":"Donavanty"},"content":"    * As such, we preserved the user interface element of typing to execute functions/features in The Food Diary,","lastModifiedDate":"2021-04-11"},{"lineNumber":515,"author":{"gitId":"Donavanty"},"content":"     given that our target users, NUS students would be comfortable using the app via keyboard-reliant interface.","lastModifiedDate":"2021-04-11"},{"lineNumber":516,"author":{"gitId":"Donavanty"},"content":"     ","lastModifiedDate":"2021-04-11"},{"lineNumber":517,"author":{"gitId":"Donavanty"},"content":"    * Additionally, we matched the colour scheme of The Food Diary to subtly reflect the colours of NUS and make ","lastModifiedDate":"2021-04-11"},{"lineNumber":518,"author":{"gitId":"Donavanty"},"content":"    The Food Diary appealing to the patronage of NUS students.","lastModifiedDate":"2021-04-11"},{"lineNumber":519,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":520,"author":{"gitId":"Sidney011100"},"content":"    * Entries in the Food Diary featured tags that were based off NUS locations. Given the multitude of eateries dotted","lastModifiedDate":"2021-04-12"},{"lineNumber":521,"author":{"gitId":"Donavanty"},"content":"    around NUS, this would make identifying entries based on NUS locations essential to an NUS student","lastModifiedDate":"2021-04-11"},{"lineNumber":522,"author":{"gitId":"Donavanty"},"content":"    who would have referenced back to previous entries in their usage over the longer term.","lastModifiedDate":"2021-04-11"},{"lineNumber":523,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":524,"author":{"gitId":"Donavanty"},"content":"4. Finally, working together to deliver what we set out to do proved hectic at times of immense commitment from the team","lastModifiedDate":"2021-04-11"},{"lineNumber":525,"author":{"gitId":"Sidney011100"},"content":" to other responsibilities in school. Nonetheless, with good planning, open communication, and a strong sense of","lastModifiedDate":"2021-04-12"},{"lineNumber":526,"author":{"gitId":"Donavanty"},"content":" ownership for the effort in the work we have done, we have produced what we believe was usable and useful for the","lastModifiedDate":"2021-04-11"},{"lineNumber":527,"author":{"gitId":"Donavanty"},"content":" NUS students to patronise and enjoy.","lastModifiedDate":"2021-04-11"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"marcusleeeugene"},"content":"## **Appendix B: Product scope**","lastModifiedDate":"2021-04-10"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"DineshMagesvaran"},"content":"**Target user profile**","lastModifiedDate":"2021-04-11"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"Sidney011100"},"content":"This product caters to food-fervent NUS students who would ideally benefit from","lastModifiedDate":"2021-02-25"},{"lineNumber":534,"author":{"gitId":"Sidney011100"},"content":"keeping records of food options tasted in the vicinity of NUS.","lastModifiedDate":"2021-02-25"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":536,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":538,"author":{"gitId":"Sidney011100"},"content":"* can type fast and prefers typing to mouse interactions","lastModifiedDate":"2021-02-25"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":540,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"Sidney011100"},"content":"* occasionally prefers to use Ui for certain tasks","lastModifiedDate":"2021-04-12"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":545,"author":{"gitId":"DineshMagesvaran"},"content":"**Value proposition**","lastModifiedDate":"2021-04-11"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":547,"author":{"gitId":"DineshMagesvaran"},"content":"Product Scope:","lastModifiedDate":"2021-04-11"},{"lineNumber":548,"author":{"gitId":"Sidney011100"},"content":"The Food Diary will allow NUS foodies to save time and effort when finding places to eat around the NUS vicinity.","lastModifiedDate":"2021-02-25"},{"lineNumber":549,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary especially caters to students chiefly on 2 aspects – One, the ability for users to log personal food","lastModifiedDate":"2021-04-11"},{"lineNumber":550,"author":{"gitId":"DineshMagesvaran"},"content":"reviews tagged under different NUS-related location categories for future reference; and two, the ability to","lastModifiedDate":"2021-04-11"},{"lineNumber":551,"author":{"gitId":"DineshMagesvaran"},"content":"effortlessly reference food options based on relevant filters in a user-friendly GUI.","lastModifiedDate":"2021-04-11"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"marcusleeeugene"},"content":"## **Appendix C: User stories**","lastModifiedDate":"2021-04-10"},{"lineNumber":554,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"| Priority| As a …​                                                           | I want to …​                                                        | So that I can…​                                                                    |","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"Donavanty"},"content":"| ------- | ---------------------------------------------------------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------------------- |","lastModifiedDate":"2021-04-11"},{"lineNumber":558,"author":{"gitId":"Donavanty"},"content":"| `* * *` | User wanting to add a review of food experience to a particular restaurant | Add a review of food experience                          | Refer back to the particular element that defined my food experience              |","lastModifiedDate":"2021-04-11"},{"lineNumber":559,"author":{"gitId":"Donavanty"},"content":"| `* * *` | User with little patience and time                               | Add names of places I have visited                                 | Efficiently add a review to a place I have visited                                |","lastModifiedDate":"2021-04-11"},{"lineNumber":560,"author":{"gitId":"Donavanty"},"content":"| `* *`   | User who wants to look at the places I have visited              | View the list of experiences I have had                            | Easily show them to my friends                                                    |","lastModifiedDate":"2021-04-11"},{"lineNumber":561,"author":{"gitId":"Donavanty"},"content":"| `* * *` | Student trying to decide where to eat                            | Look at the places i have visited before                           | Decide where I shall re-visit                                                     |","lastModifiedDate":"2021-04-11"},{"lineNumber":562,"author":{"gitId":"DineshMagesvaran"},"content":"| `* * *` | User who would like to create custom category of food place      | Add the category of the place                                      | I can have a specific view of certain places                                      |","lastModifiedDate":"2021-02-24"},{"lineNumber":563,"author":{"gitId":"Donavanty"},"content":"| `* * *` | User who does not want to visit a place again                    | Remove the place                                                   | Reduce redundant food places in my list                                           |","lastModifiedDate":"2021-04-11"},{"lineNumber":564,"author":{"gitId":"marcusleeeugene"},"content":"| `* * *` | User who wants to remember food ratings                          | Give a rating on the overall food experience                       | I can gauge/ballpark the satisfaction level I get against other food experiences  |","lastModifiedDate":"2021-03-10"},{"lineNumber":565,"author":{"gitId":"marcusleeeugene"},"content":"| `* * *` | User who wants to read lengthy reviews of an entry               | Glance through reviews of an entry                                 | Quickly arrive at a conclusion for a food place                                   |","lastModifiedDate":"2021-04-08"},{"lineNumber":566,"author":{"gitId":"marcusleeeugene"},"content":"| `* *`   | User frequently revisiting a place                               | Add multiple reviews to a single place                             | Store all my food experiences with the place                                      |","lastModifiedDate":"2021-03-24"},{"lineNumber":567,"author":{"gitId":"Donavanty"},"content":"| `* *`   | User who wants to eat good food at an affordable price           | Search for places that match both the rating and price that I want | Visit the best food places without overspending                                   |","lastModifiedDate":"2021-04-11"},{"lineNumber":568,"author":{"gitId":"Donavanty"},"content":"| `* *`   | User who wants identify a place he/she ate at previously by name | Find entries that match the name of the place I last visited       | Judge if I would like to go back to that place and eat there.                     |","lastModifiedDate":"2021-04-11"},{"lineNumber":569,"author":{"gitId":"Donavanty"},"content":"| `* * *` | User who made a mistake in an entry                              | Perform revisions and updates to the entry                         | Keep accurate and up-to-date information of food places                           |","lastModifiedDate":"2021-04-11"},{"lineNumber":570,"author":{"gitId":"Donavanty"},"content":"| `* * *` | User who is unclear of what to do with the app                   | Look at a help guide to get familiar with the app usage            | Use the app confidently and use it to its fullest extent                          |","lastModifiedDate":"2021-04-11"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"marcusleeeugene"},"content":"## **Appendix D: Use cases**","lastModifiedDate":"2021-04-10"},{"lineNumber":575,"author":{"gitId":"marcusleeeugene"},"content":"(For all use cases below, the **System** is the `Food Diary` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-02-25"},{"lineNumber":576,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC01: Add an Entry**","lastModifiedDate":"2021-04-10"},{"lineNumber":578,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":579,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Preconditions: There are lesser than 1 000 000 entries in the Food Diary application.","lastModifiedDate":"2021-04-10"},{"lineNumber":580,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1.  User enters details to add an entry to the Food Diary.","lastModifiedDate":"2021-04-10"},{"lineNumber":584,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2.  Food Diary adds a new entry to the app.","lastModifiedDate":"2021-04-10"},{"lineNumber":585,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    Use case ends.","lastModifiedDate":"2021-02-24"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"marcusleeeugene"},"content":"* 1a.  Food Diary detects invalid command from user.","lastModifiedDate":"2021-02-23"},{"lineNumber":590,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    *   1a1. Food Diary warns user about invalid command syntax.","lastModifiedDate":"2021-04-10"},{"lineNumber":591,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    *\t1a2. User enters correct command syntax.","lastModifiedDate":"2021-04-10"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"Sidney011100"},"content":"         Use case resumes from step 2.","lastModifiedDate":"2021-04-06"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. Food Diary detects duplicate entry that is already stored in the application.","lastModifiedDate":"2021-04-10"},{"lineNumber":596,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    *\t2a1. Food Diary warns user that the entry to be added already exists in the application.","lastModifiedDate":"2021-04-10"},{"lineNumber":597,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"marcusleeeugene"},"content":"         Use case ends.","lastModifiedDate":"2021-02-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":600,"author":{"gitId":"Donavanty"},"content":"**UC02: List all entries**","lastModifiedDate":"2021-04-11"},{"lineNumber":601,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"Donavanty"},"content":"1.  User requests to list all entries.","lastModifiedDate":"2021-04-11"},{"lineNumber":605,"author":{"gitId":"Donavanty"},"content":"2.  Food Diary displays all the entries.","lastModifiedDate":"2021-04-11"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"Donavanty"},"content":"* 1a. Food Diary detects invalid command from user.","lastModifiedDate":"2021-02-22"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"Donavanty"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-02-22"},{"lineNumber":612,"author":{"gitId":"marcusleeeugene"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-02-23"},{"lineNumber":613,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"marcusleeeugene"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-02-23"},{"lineNumber":615,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":616,"author":{"gitId":"Donavanty"},"content":"* 2a. No entries to display.","lastModifiedDate":"2021-04-11"},{"lineNumber":617,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":618,"author":{"gitId":"Donavanty"},"content":"    * 2a1. Tells users that there are no entries.","lastModifiedDate":"2021-04-11"},{"lineNumber":619,"author":{"gitId":"marcusleeeugene"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-02-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":621,"author":{"gitId":"Donavanty"},"content":"      Use case ends.","lastModifiedDate":"2021-02-22"},{"lineNumber":622,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"Donavanty"},"content":"**UC03: Add category**","lastModifiedDate":"2021-04-11"},{"lineNumber":624,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":625,"author":{"gitId":"DineshMagesvaran"},"content":"**MSS**","lastModifiedDate":"2021-02-24"},{"lineNumber":626,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":627,"author":{"gitId":"Sidney011100"},"content":"1. User adds a new category.","lastModifiedDate":"2021-04-06"},{"lineNumber":628,"author":{"gitId":"Sidney011100"},"content":"2. Food Diary adds the new category into the app.","lastModifiedDate":"2021-04-06"},{"lineNumber":629,"author":{"gitId":"Sidney011100"},"content":"3. Food Diary displays the new category added in a tag.","lastModifiedDate":"2021-04-06"},{"lineNumber":630,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":631,"author":{"gitId":"DineshMagesvaran"},"content":"   Use case ends.","lastModifiedDate":"2021-02-24"},{"lineNumber":632,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":633,"author":{"gitId":"DineshMagesvaran"},"content":"**Extensions**","lastModifiedDate":"2021-02-24"},{"lineNumber":634,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":635,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food Diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":636,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":637,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":639,"author":{"gitId":"Sidney011100"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-06"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":641,"author":{"gitId":"Sidney011100"},"content":"* 1b. New category already exists.","lastModifiedDate":"2021-04-06"},{"lineNumber":642,"author":{"gitId":"Sidney011100"},"content":"    * 1b1. Food Diary tells user that the category already exists.","lastModifiedDate":"2021-04-06"},{"lineNumber":643,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":644,"author":{"gitId":"DineshMagesvaran"},"content":"      Use case ends.","lastModifiedDate":"2021-02-24"},{"lineNumber":645,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"Donavanty"},"content":"**UC04: Add on review(s) and/or price to a specified Food Diary Entry**","lastModifiedDate":"2021-04-11"},{"lineNumber":647,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User requests to add a review(s) and/or a price to a specified entry.","lastModifiedDate":"2021-04-10"},{"lineNumber":651,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food Diary checks for the specified entry.","lastModifiedDate":"2021-04-10"},{"lineNumber":652,"author":{"gitId":"Prabhakaran-Gokul"},"content":"3. Food Diary adds review(s) and/or a price to the specified entry.","lastModifiedDate":"2021-04-10"},{"lineNumber":653,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Extensions**:","lastModifiedDate":"2021-02-24"},{"lineNumber":655,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":656,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food Diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":657,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a1. Food Diary warns user about invalid command syntax.","lastModifiedDate":"2021-04-10"},{"lineNumber":658,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a2. User enters correct command.","lastModifiedDate":"2021-04-10"},{"lineNumber":659,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":660,"author":{"gitId":"Sidney011100"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-06"},{"lineNumber":661,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. Specified Food Diary entry not found","lastModifiedDate":"2021-04-10"},{"lineNumber":663,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 2a1. Food Diary tells user that the specified entry is invalid.","lastModifiedDate":"2021-04-10"},{"lineNumber":664,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":665,"author":{"gitId":"marcusleeeugene"},"content":"      Use case ends.","lastModifiedDate":"2021-02-24"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":667,"author":{"gitId":"Donavanty"},"content":"**UC05: Delete an Entry**","lastModifiedDate":"2021-04-11"},{"lineNumber":668,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":669,"author":{"gitId":"Sidney011100"},"content":"**MSS**","lastModifiedDate":"2021-02-25"},{"lineNumber":670,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":671,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User requests to delete a Food Diary entry.","lastModifiedDate":"2021-04-10"},{"lineNumber":672,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food diary removes the entry from its database.","lastModifiedDate":"2021-04-10"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":674,"author":{"gitId":"Sidney011100"},"content":"**Extensions**:","lastModifiedDate":"2021-02-25"},{"lineNumber":675,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":676,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a1. Food Diary warns user about invalid command syntax.","lastModifiedDate":"2021-04-10"},{"lineNumber":677,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a2. User enters a valid command.","lastModifiedDate":"2021-04-10"},{"lineNumber":678,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":679,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-10"},{"lineNumber":680,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":681,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. Specified Food Diary entry not found","lastModifiedDate":"2021-04-10"},{"lineNumber":682,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 2a1. Food Diary tells user that the specified entry is invalid.","lastModifiedDate":"2021-04-10"},{"lineNumber":683,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":684,"author":{"gitId":"Sidney011100"},"content":"      Use case ends.","lastModifiedDate":"2021-02-25"},{"lineNumber":685,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":686,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC06: Find for entries**","lastModifiedDate":"2021-04-11"},{"lineNumber":687,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":688,"author":{"gitId":"marcusleeeugene"},"content":"**MSS**","lastModifiedDate":"2021-03-22"},{"lineNumber":689,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User enters keywords to be used to search for entries.","lastModifiedDate":"2021-04-11"},{"lineNumber":690,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food Diary shows all entries matching user requirements (if any).","lastModifiedDate":"2021-04-11"},{"lineNumber":691,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":692,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   Use case ends.","lastModifiedDate":"2021-04-11"},{"lineNumber":693,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":694,"author":{"gitId":"marcusleeeugene"},"content":"**Extensions**:","lastModifiedDate":"2021-03-22"},{"lineNumber":695,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 1a. Food Diary detects invalid command from user.","lastModifiedDate":"2021-04-11"},{"lineNumber":696,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":697,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":698,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":699,"author":{"gitId":"marcusleeeugene"},"content":"  Use case resumes from step 2.","lastModifiedDate":"2021-04-08"},{"lineNumber":700,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":701,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":702,"author":{"gitId":"Donavanty"},"content":"**UC07: Find all specific entries**","lastModifiedDate":"2021-04-11"},{"lineNumber":703,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":704,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-03-25"},{"lineNumber":705,"author":{"gitId":"Sidney011100"},"content":"1. User enters keywords to specify requirements for entries.","lastModifiedDate":"2021-04-06"},{"lineNumber":706,"author":{"gitId":"Sidney011100"},"content":"2. Food Diary shows all entries matching user requirements (if any).","lastModifiedDate":"2021-04-06"},{"lineNumber":707,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":708,"author":{"gitId":"DineshMagesvaran"},"content":"   Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":709,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":710,"author":{"gitId":"DineshMagesvaran"},"content":"**Extensions**:","lastModifiedDate":"2021-03-25"},{"lineNumber":711,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food Diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":712,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":713,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":714,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":715,"author":{"gitId":"DineshMagesvaran"},"content":"  Use case resumes from step 2.","lastModifiedDate":"2021-03-25"},{"lineNumber":716,"author":{"gitId":"DineshMagesvaran"},"content":"  ","lastModifiedDate":"2021-03-25"},{"lineNumber":717,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC08: Get Help**","lastModifiedDate":"2021-04-11"},{"lineNumber":718,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":719,"author":{"gitId":"marcusleeeugene"},"content":"**MSS**","lastModifiedDate":"2021-03-29"},{"lineNumber":720,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User requests to get help on what commands to use.","lastModifiedDate":"2021-04-11"},{"lineNumber":721,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food Diary returns a succint help guide with the information he needs.","lastModifiedDate":"2021-04-11"},{"lineNumber":722,"author":{"gitId":"Prabhakaran-Gokul"},"content":"3. User reads the help guide and is now familiar with the commands to use.","lastModifiedDate":"2021-04-11"},{"lineNumber":723,"author":{"gitId":"Prabhakaran-Gokul"},"content":"4. User requests to close help guide after use.","lastModifiedDate":"2021-04-11"},{"lineNumber":724,"author":{"gitId":"Prabhakaran-Gokul"},"content":"5. Food Diary closes help guide.","lastModifiedDate":"2021-04-11"},{"lineNumber":725,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":726,"author":{"gitId":"marcusleeeugene"},"content":"**Extensions**:","lastModifiedDate":"2021-03-29"},{"lineNumber":727,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":728,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":729,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":730,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":731,"author":{"gitId":"Donavanty"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-11"},{"lineNumber":732,"author":{"gitId":"Sidney011100"},"content":"      ","lastModifiedDate":"2021-04-06"},{"lineNumber":733,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. User reads help guide but is still unclear of what command to use.","lastModifiedDate":"2021-04-11"},{"lineNumber":734,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 2a1. User requests to see User Guide for more information","lastModifiedDate":"2021-04-11"},{"lineNumber":735,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 2a2. Food Diary returns User Guide link for the user to access","lastModifiedDate":"2021-04-11"},{"lineNumber":736,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":737,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      Use case resumes from step 3.","lastModifiedDate":"2021-04-11"},{"lineNumber":738,"author":{"gitId":"Donavanty"},"content":"  ","lastModifiedDate":"2021-04-11"},{"lineNumber":739,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC09: View an Entry**","lastModifiedDate":"2021-04-11"},{"lineNumber":740,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":741,"author":{"gitId":"Sidney011100"},"content":"**MSS**","lastModifiedDate":"2021-04-06"},{"lineNumber":742,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User requests to view a specific entry.","lastModifiedDate":"2021-04-11"},{"lineNumber":743,"author":{"gitId":"Donavanty"},"content":"2. Food Diary checks requested entry.","lastModifiedDate":"2021-04-11"},{"lineNumber":744,"author":{"gitId":"Prabhakaran-Gokul"},"content":"3. Food diary shows specified entry details.","lastModifiedDate":"2021-04-11"},{"lineNumber":745,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":746,"author":{"gitId":"Sidney011100"},"content":"**Extensions**:","lastModifiedDate":"2021-04-06"},{"lineNumber":747,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":748,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":749,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":751,"author":{"gitId":"Donavanty"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-11"},{"lineNumber":752,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":753,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 2a. No entry found","lastModifiedDate":"2021-04-11"},{"lineNumber":754,"author":{"gitId":"Donavanty"},"content":"    * 2a1. Food Diary tells user that no entry was found.","lastModifiedDate":"2021-04-11"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":756,"author":{"gitId":"Sidney011100"},"content":"      Use case ends.","lastModifiedDate":"2021-04-06"},{"lineNumber":757,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":758,"author":{"gitId":"DineshMagesvaran"},"content":"**UC10: Revise an Entry**","lastModifiedDate":"2021-04-11"},{"lineNumber":759,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":760,"author":{"gitId":"marcusleeeugene"},"content":"**MSS**","lastModifiedDate":"2021-03-29"},{"lineNumber":761,"author":{"gitId":"Sidney011100"},"content":"1. User requests to revise a specific entry.","lastModifiedDate":"2021-04-06"},{"lineNumber":762,"author":{"gitId":"Sidney011100"},"content":"2. Food Diary checks requested entry.","lastModifiedDate":"2021-04-06"},{"lineNumber":763,"author":{"gitId":"Sidney011100"},"content":"3. Food diary allows user to make revisions to the entry.","lastModifiedDate":"2021-04-06"},{"lineNumber":764,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":765,"author":{"gitId":"marcusleeeugene"},"content":"**Extensions**:","lastModifiedDate":"2021-03-29"},{"lineNumber":766,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":767,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":768,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":770,"author":{"gitId":"marcusleeeugene"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-08"},{"lineNumber":771,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":772,"author":{"gitId":"Sidney011100"},"content":"* 2a. User key in a non-existent index in list","lastModifiedDate":"2021-04-12"},{"lineNumber":773,"author":{"gitId":"marcusleeeugene"},"content":"    * 2a1. Food Diary tells user that no entry was found.","lastModifiedDate":"2021-03-29"},{"lineNumber":774,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":775,"author":{"gitId":"marcusleeeugene"},"content":"      Use case ends.","lastModifiedDate":"2021-03-29"},{"lineNumber":776,"author":{"gitId":"marcusleeeugene"},"content":"      ","lastModifiedDate":"2021-03-29"},{"lineNumber":777,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC11: Edit an Entry**","lastModifiedDate":"2021-04-11"},{"lineNumber":778,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":779,"author":{"gitId":"Sidney011100"},"content":"**MSS**","lastModifiedDate":"2021-04-06"},{"lineNumber":780,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User requests to edit entry field(s) of a specific entry due to minor errors.","lastModifiedDate":"2021-04-11"},{"lineNumber":781,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food Diary edits the entry with the updated field(s).","lastModifiedDate":"2021-04-11"},{"lineNumber":782,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":783,"author":{"gitId":"Sidney011100"},"content":"**Extensions**:","lastModifiedDate":"2021-04-06"},{"lineNumber":784,"author":{"gitId":"Sidney011100"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-06"},{"lineNumber":785,"author":{"gitId":"Sidney011100"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":786,"author":{"gitId":"Sidney011100"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-06"},{"lineNumber":787,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":788,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-11"},{"lineNumber":789,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      ","lastModifiedDate":"2021-04-11"},{"lineNumber":790,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 1b. User keys in non-existent index in list","lastModifiedDate":"2021-04-11"},{"lineNumber":791,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1b1. Food Diary tells user that no entry was found.","lastModifiedDate":"2021-04-11"},{"lineNumber":792,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":793,"author":{"gitId":"Sidney011100"},"content":"      Use case ends.","lastModifiedDate":"2021-04-06"},{"lineNumber":794,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":795,"author":{"gitId":"Donavanty"},"content":"**UC12: Clear**","lastModifiedDate":"2021-04-11"},{"lineNumber":796,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":797,"author":{"gitId":"marcusleeeugene"},"content":"**MSS**","lastModifiedDate":"2021-04-08"},{"lineNumber":798,"author":{"gitId":"marcusleeeugene"},"content":"1. User requests to clear all entries.","lastModifiedDate":"2021-04-08"},{"lineNumber":799,"author":{"gitId":"marcusleeeugene"},"content":"2. Food Diary clears all entries.","lastModifiedDate":"2021-04-08"},{"lineNumber":800,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":801,"author":{"gitId":"marcusleeeugene"},"content":"**Extensions**:","lastModifiedDate":"2021-04-08"},{"lineNumber":802,"author":{"gitId":"marcusleeeugene"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-08"},{"lineNumber":803,"author":{"gitId":"marcusleeeugene"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-08"},{"lineNumber":804,"author":{"gitId":"marcusleeeugene"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-08"},{"lineNumber":805,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":806,"author":{"gitId":"marcusleeeugene"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-08"},{"lineNumber":807,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-08"},{"lineNumber":808,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**UC13: Exit**","lastModifiedDate":"2021-04-11"},{"lineNumber":809,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":810,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**MSS**","lastModifiedDate":"2021-04-11"},{"lineNumber":811,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. User exits.","lastModifiedDate":"2021-04-11"},{"lineNumber":812,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. Food Diary closes and data is saved.","lastModifiedDate":"2021-04-11"},{"lineNumber":813,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":814,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Extensions**:","lastModifiedDate":"2021-04-11"},{"lineNumber":815,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* 1a. Food diary detects invalid command from user.","lastModifiedDate":"2021-04-11"},{"lineNumber":816,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a1. Food Diary warns user about wrong syntax.","lastModifiedDate":"2021-04-11"},{"lineNumber":817,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    * 1a2. User enters correct syntax.","lastModifiedDate":"2021-04-11"},{"lineNumber":818,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":819,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      Use case ends.","lastModifiedDate":"2021-04-11"},{"lineNumber":820,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":821,"author":{"gitId":"marcusleeeugene"},"content":"## **Appendix E: Non-Functional Requirements**","lastModifiedDate":"2021-04-10"},{"lineNumber":822,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":823,"author":{"gitId":"marcusleeeugene"},"content":"Non-functional requirements specify the constraints under which the system for The Food Diary is developed and operated.","lastModifiedDate":"2021-02-23"},{"lineNumber":824,"author":{"gitId":"marcusleeeugene"},"content":"The Food Diary system is made up of the front-end, which is interchangeably referred to as the User Interface (UI),","lastModifiedDate":"2021-02-23"},{"lineNumber":825,"author":{"gitId":"marcusleeeugene"},"content":"and the back-end, which handles data management and operations.","lastModifiedDate":"2021-02-23"},{"lineNumber":826,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":827,"author":{"gitId":"DineshMagesvaran"},"content":"### Technical requirements","lastModifiedDate":"2021-04-11"},{"lineNumber":828,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":829,"author":{"gitId":"marcusleeeugene"},"content":"* The system should be operable on Windows, MacOS and Linux operating systems, with Java 11 or above installed.","lastModifiedDate":"2021-02-23"},{"lineNumber":830,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":831,"author":{"gitId":"DineshMagesvaran"},"content":"### Performance requirements","lastModifiedDate":"2021-04-11"},{"lineNumber":832,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":833,"author":{"gitId":"marcusleeeugene"},"content":"* The system should be loaded up within 2 seconds or less.","lastModifiedDate":"2021-02-23"},{"lineNumber":834,"author":{"gitId":"Sidney011100"},"content":"* The Ui should appear within 2 seconds or less and be responsive to User input.","lastModifiedDate":"2021-04-12"},{"lineNumber":835,"author":{"gitId":"Sidney011100"},"content":"* The back-end should be responsive to processing User input at the same time the Ui appears.","lastModifiedDate":"2021-04-12"},{"lineNumber":836,"author":{"gitId":"marcusleeeugene"},"content":"* The back-end should be able to handle 1,000 or more data entries (Food Diary entries) without noticeable sluggishness","lastModifiedDate":"2021-02-23"},{"lineNumber":837,"author":{"gitId":"marcusleeeugene"},"content":"  in performance for typical usage.","lastModifiedDate":"2021-02-23"},{"lineNumber":838,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":839,"author":{"gitId":"DineshMagesvaran"},"content":"### Usability requirements","lastModifiedDate":"2021-04-11"},{"lineNumber":840,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":841,"author":{"gitId":"marcusleeeugene"},"content":"* The user should have access to a keyboard, and be proficient with typing alphanumeric English characters for commands","lastModifiedDate":"2021-02-23"},{"lineNumber":842,"author":{"gitId":"marcusleeeugene"},"content":"  to accomplish most of the usages of The Food Diary.","lastModifiedDate":"2021-02-23"},{"lineNumber":843,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":844,"author":{"gitId":"DineshMagesvaran"},"content":"### Project scope","lastModifiedDate":"2021-04-11"},{"lineNumber":845,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* The system should mainly comprise the handling of Food Diary-entry addition, deletion, and listing.","lastModifiedDate":"2021-02-24"},{"lineNumber":846,"author":{"gitId":"Sidney011100"},"content":"* The system would not be responsible for features involving multiple users.","lastModifiedDate":"2021-04-12"},{"lineNumber":847,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":848,"author":{"gitId":"DineshMagesvaran"},"content":"### Scalability requirements","lastModifiedDate":"2021-04-11"},{"lineNumber":849,"author":{"gitId":"Sidney011100"},"content":"* The system can handle a larger user base with many more food reviews being added to it.","lastModifiedDate":"2021-04-12"},{"lineNumber":850,"author":{"gitId":"Sidney011100"},"content":"* Program is extendable for future addition of features easily.","lastModifiedDate":"2021-04-12"},{"lineNumber":851,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":852,"author":{"gitId":"DineshMagesvaran"},"content":"### Other Noteworthy Points","lastModifiedDate":"2021-04-11"},{"lineNumber":853,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":854,"author":{"gitId":"Sidney011100"},"content":"* The system should preserve data keyed in by the user.","lastModifiedDate":"2021-04-12"},{"lineNumber":855,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":856,"author":{"gitId":"marcusleeeugene"},"content":"## **Appendix F: Glossary**","lastModifiedDate":"2021-04-10"},{"lineNumber":857,"author":{"gitId":"Donavanty"},"content":"The glossary serves to ensure that all stakeholders, including users, have a common understanding of the noteworthy terms, and abbreviations.","lastModifiedDate":"2021-02-22"},{"lineNumber":858,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":859,"author":{"gitId":"Donavanty"},"content":"* **Sluggishness**: The system starts to be slow in displaying user input when typed, and processing user input when entered.","lastModifiedDate":"2021-02-22"},{"lineNumber":860,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":861,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## **Appendix G: Instructions for manual testing**","lastModifiedDate":"2021-04-10"},{"lineNumber":862,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2021-04-10"},{"lineNumber":863,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers","lastModifiedDate":"2021-04-10"},{"lineNumber":864,"author":{"gitId":"Prabhakaran-Gokul"},"content":"to work on.","lastModifiedDate":"2021-04-10"},{"lineNumber":865,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":866,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":867,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Launch and Shutdown","lastModifiedDate":"2021-04-11"},{"lineNumber":868,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":869,"author":{"gitId":"marcusleeeugene"},"content":"1. Initial launch","lastModifiedDate":"2021-04-11"},{"lineNumber":870,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":871,"author":{"gitId":"Sidney011100"},"content":"    1. Download the jar file and copy into an empty folder.","lastModifiedDate":"2021-04-12"},{"lineNumber":872,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":873,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    2. Double-click the jar file Expected: Shows the GUI with a set of sample food Diary entries. The window size may not be optimum.","lastModifiedDate":"2021-04-11"},{"lineNumber":874,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":875,"author":{"gitId":"marcusleeeugene"},"content":"2. Saving window preferences","lastModifiedDate":"2021-04-11"},{"lineNumber":876,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":877,"author":{"gitId":"marcusleeeugene"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2021-04-11"},{"lineNumber":878,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":879,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e ","lastModifiedDate":"2021-04-11"},{"lineNumber":880,"author":{"gitId":"marcusleeeugene"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2021-04-11"},{"lineNumber":881,"author":{"gitId":"marcusleeeugene"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":882,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Add an entry","lastModifiedDate":"2021-04-11"},{"lineNumber":883,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":884,"author":{"gitId":"Sidney011100"},"content":"1. Add an entry with the provided details","lastModifiedDate":"2021-04-12"},{"lineNumber":885,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":886,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    1. Prerequisite: `list` entries to ensure that the entry going to be added in not already displayed in the Food Diary application.","lastModifiedDate":"2021-04-11"},{"lineNumber":887,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":888,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    2. Test case: `add n/Subway ra/5 p/6 re/I like this food a lot! a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":889,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":890,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Add an entry with name Subway, 5/5 Rating, \u0027I like this food a lot!\u0027 review, 3155 Commonwealth Ave W, Singapore 129588 address, ","lastModifiedDate":"2021-04-12"},{"lineNumber":891,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    FastFood and Vegan categories and a SOC. A new entry will be shown in the entry list panel.","lastModifiedDate":"2021-04-11"},{"lineNumber":892,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":893,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    3. Test case: `add n/Subway ra/7 p/6 re/I like this food a lot! a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":894,"author":{"gitId":"marcusleeeugene"},"content":"        ","lastModifiedDate":"2021-04-12"},{"lineNumber":895,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid rating error will be shown in the result display. Entry will not be added.","lastModifiedDate":"2021-04-12"},{"lineNumber":896,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":897,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    4. Test case: `add n/Subway ra/5 p/1000 re/I like this food a lot! a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":898,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":899,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid price error will be shown in the result display. Entry will not be added.","lastModifiedDate":"2021-04-12"},{"lineNumber":900,"author":{"gitId":"Prabhakaran-Gokul"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":901,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    5. Test case: `add n/Subway ra/5 p/6 re/ a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":902,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":903,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid review error will be shown in the result display. Entry will not be added.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":904,"author":{"gitId":"Prabhakaran-Gokul"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":905,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    6. Test case: `add n/Subway ra/5 p/6 re/I like this food a lot! a/ c/FastFood c/Vegan s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":906,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":907,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid address error will be shown in the result display. Entry will not be added.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":908,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":909,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    7. Test case: `add n/Subway ra/5 p/6 re/I like this food a lot! a/Deck c/FastFood c/Math s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":910,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":911,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: A list of valid categories will be shown in the result display. Entry will not be added.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":912,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":913,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    8. Test case: `add n/Subway ra/5 p/6 re/I like this food a lot! a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/Primary`","lastModifiedDate":"2021-04-11"},{"lineNumber":914,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":915,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: A list of valid schools will be shown in the result display. Entry will not be added.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":916,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":917,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    9. Other incorrect add commands to try: `add n/Subway ra/5 p/6 re/I like this food a lot! a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/SOC`","lastModifiedDate":"2021-04-11"},{"lineNumber":918,"author":{"gitId":"marcusleeeugene"},"content":"    followed by `add n/Subway ra/5 p/6 re/I like this food a lot! a/3155 Commonwealth Ave W, Singapore 129588 c/FastFood c/Vegan s/SOC` (duplicate entry)\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":919,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":920,"author":{"gitId":"DineshMagesvaran"},"content":"### Add on to an entry","lastModifiedDate":"2021-04-11"},{"lineNumber":921,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. Add on to an entry with the provided details","lastModifiedDate":"2021-04-11"},{"lineNumber":922,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":923,"author":{"gitId":"marcusleeeugene"},"content":"    1. Prerequisite: `list` to select the entry you want to add on details to. There must be at least one entry displayed.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":924,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":925,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    2. Test case: `addon 1 re/I like this food a lot! p/7`","lastModifiedDate":"2021-04-11"},{"lineNumber":926,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":927,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Add on the review \"I like this food a lot!\" and a price of $7 to the existing price/price range shown in the entry (price range updates if the input price is","lastModifiedDate":"2021-04-12"},{"lineNumber":928,"author":{"gitId":"Sidney011100"},"content":"       out of the initial price range displayed in the entry). Specified Entry will be updated with the addon on fields.","lastModifiedDate":"2021-04-12"},{"lineNumber":929,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":930,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    3. Test case: `addon 1`","lastModifiedDate":"2021-04-12"},{"lineNumber":931,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":932,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Error message \"At least one field to add-on must be provided.\" will be shown in the result display. Nothing will be added on to the specified entry.","lastModifiedDate":"2021-04-12"},{"lineNumber":933,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":934,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    4. Test case: `addon 1 re/`","lastModifiedDate":"2021-04-12"},{"lineNumber":935,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":936,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid review error will be shown in the result display. Nothing will be added on to the specified entry.","lastModifiedDate":"2021-04-12"},{"lineNumber":937,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":938,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    5. Test case: `addon 1 re/Good Food p/1000`","lastModifiedDate":"2021-04-12"},{"lineNumber":939,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":940,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid price error will be shown in the result display. Nothing will be added on to the specified entry.","lastModifiedDate":"2021-04-12"},{"lineNumber":941,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":942,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    6. Other incorrect `addon` commands to try: `addon 10000000000 re/Good Food` (invalid index)","lastModifiedDate":"2021-04-12"},{"lineNumber":943,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":944,"author":{"gitId":"DineshMagesvaran"},"content":"### Delete an Entry","lastModifiedDate":"2021-04-11"},{"lineNumber":945,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. Delete a booking specified by booking ID.","lastModifiedDate":"2021-04-11"},{"lineNumber":946,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":947,"author":{"gitId":"marcusleeeugene"},"content":"    1. Prerequisite: `list` all entries to find out the name of the entry to delete\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":948,"author":{"gitId":"Prabhakaran-Gokul"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":949,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    2. Test case: `delete 1`","lastModifiedDate":"2021-04-12"},{"lineNumber":950,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":951,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Delete entry at index 1. Success message and deleted entry details shown in the result display.","lastModifiedDate":"2021-04-12"},{"lineNumber":952,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":953,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    3. Test case: `delete x` (where x is non-existent booking ID)","lastModifiedDate":"2021-04-12"},{"lineNumber":954,"author":{"gitId":"marcusleeeugene"},"content":"       ","lastModifiedDate":"2021-04-12"},{"lineNumber":955,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Error of invalid entry shown in result display. No entry is deleted.","lastModifiedDate":"2021-04-12"},{"lineNumber":956,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":957,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    4. Other incorrect delete commands to try: `delete`, `delete Starbucks`","lastModifiedDate":"2021-04-12"},{"lineNumber":958,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":959,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: Invalid command format error. No entry is deleted.","lastModifiedDate":"2021-04-12"},{"lineNumber":960,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":961,"author":{"gitId":"DineshMagesvaran"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":962,"author":{"gitId":"DineshMagesvaran"},"content":"### Find entries","lastModifiedDate":"2021-04-11"},{"lineNumber":963,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":964,"author":{"gitId":"DineshMagesvaran"},"content":"1. Finding for entries using the `find` command","lastModifiedDate":"2021-04-11"},{"lineNumber":965,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":966,"author":{"gitId":"DineshMagesvaran"},"content":"    1. Prerequisite: the food diary should contain all default entries","lastModifiedDate":"2021-04-11"},{"lineNumber":967,"author":{"gitId":"DineshMagesvaran"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":968,"author":{"gitId":"DineshMagesvaran"},"content":"    2. Test case: `find 4/5`","lastModifiedDate":"2021-04-11"},{"lineNumber":969,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":970,"author":{"gitId":"DineshMagesvaran"},"content":"        Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":971,"author":{"gitId":"DineshMagesvaran"},"content":"        - All entries shown with a rating of 4/5. ","lastModifiedDate":"2021-04-11"},{"lineNumber":972,"author":{"gitId":"DineshMagesvaran"},"content":"        - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":973,"author":{"gitId":"DineshMagesvaran"},"content":"        - 4 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":974,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":975,"author":{"gitId":"DineshMagesvaran"},"content":"    3. Test case: `find $7`","lastModifiedDate":"2021-04-11"},{"lineNumber":976,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":977,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":978,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown with a price of $7, or a range of price that contains $7. ","lastModifiedDate":"2021-04-11"},{"lineNumber":979,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":980,"author":{"gitId":"DineshMagesvaran"},"content":"       - 1 default entry will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":981,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":982,"author":{"gitId":"DineshMagesvaran"},"content":"    4. Test case: `find western 5/5 $5-10`","lastModifiedDate":"2021-04-11"},{"lineNumber":983,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":984,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":985,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown which contain at least one of the three keywords provided.","lastModifiedDate":"2021-04-11"},{"lineNumber":986,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":987,"author":{"gitId":"Prabhakaran-Gokul"},"content":"       - 9 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":988,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":989,"author":{"gitId":"DineshMagesvaran"},"content":"    5. Test case: `find 3/7`","lastModifiedDate":"2021-04-11"},{"lineNumber":990,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":991,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":992,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown which contain the provided keyword: `3/7`, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":993,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":994,"author":{"gitId":"DineshMagesvaran"},"content":"       - Suggestion message displayed informing the user of a possible typo for a rating search,","lastModifiedDate":"2021-04-11"},{"lineNumber":995,"author":{"gitId":"DineshMagesvaran"},"content":"       providing directions to correct the typo.","lastModifiedDate":"2021-04-11"},{"lineNumber":996,"author":{"gitId":"DineshMagesvaran"},"content":"       - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":997,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":998,"author":{"gitId":"DineshMagesvaran"},"content":"    6. Test case: `find $5-`","lastModifiedDate":"2021-04-11"},{"lineNumber":999,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1000,"author":{"gitId":"DineshMagesvaran"},"content":"        Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1001,"author":{"gitId":"DineshMagesvaran"},"content":"        - All entries shown which contain the provided keyword: `$5-`, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":1002,"author":{"gitId":"DineshMagesvaran"},"content":"        - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1003,"author":{"gitId":"DineshMagesvaran"},"content":"        - Suggestion message displayed informing the user of a possible typo for a price search,","lastModifiedDate":"2021-04-11"},{"lineNumber":1004,"author":{"gitId":"DineshMagesvaran"},"content":"        providing directions to correct the typo.","lastModifiedDate":"2021-04-11"},{"lineNumber":1005,"author":{"gitId":"DineshMagesvaran"},"content":"        - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1006,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1007,"author":{"gitId":"DineshMagesvaran"},"content":"    7. Test case: `find 3/7 $5-`","lastModifiedDate":"2021-04-11"},{"lineNumber":1008,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1009,"author":{"gitId":"DineshMagesvaran"},"content":"        Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1010,"author":{"gitId":"DineshMagesvaran"},"content":"        - All entries shown which contain either of the keywords provided, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":1011,"author":{"gitId":"DineshMagesvaran"},"content":"        - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1012,"author":{"gitId":"DineshMagesvaran"},"content":"        - Suggestion message displayed informing the user of possible typos for a rating search,","lastModifiedDate":"2021-04-11"},{"lineNumber":1013,"author":{"gitId":"DineshMagesvaran"},"content":"        and a price search, providing directions to correct the typos.","lastModifiedDate":"2021-04-11"},{"lineNumber":1014,"author":{"gitId":"DineshMagesvaran"},"content":"        - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1015,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1016,"author":{"gitId":"DineshMagesvaran"},"content":"### Find specific entries","lastModifiedDate":"2021-04-11"},{"lineNumber":1017,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1018,"author":{"gitId":"DineshMagesvaran"},"content":"1. Finding for entries using the `findall` command","lastModifiedDate":"2021-04-11"},{"lineNumber":1019,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":1020,"author":{"gitId":"DineshMagesvaran"},"content":"    1. Prerequisite: the food diary should contain all default entries","lastModifiedDate":"2021-04-11"},{"lineNumber":1021,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1022,"author":{"gitId":"DineshMagesvaran"},"content":"    2. Test case: `findall 4/5`","lastModifiedDate":"2021-04-11"},{"lineNumber":1023,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1024,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1025,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown with a rating of 4/5.","lastModifiedDate":"2021-04-11"},{"lineNumber":1026,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1027,"author":{"gitId":"DineshMagesvaran"},"content":"       - 4 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1028,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1029,"author":{"gitId":"DineshMagesvaran"},"content":"    3. Test case: `findall $7`","lastModifiedDate":"2021-04-11"},{"lineNumber":1030,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1031,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1032,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown with a price of $7, or a range of price that contains $7.","lastModifiedDate":"2021-04-11"},{"lineNumber":1033,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1034,"author":{"gitId":"DineshMagesvaran"},"content":"       - 1 default entry will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1035,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1036,"author":{"gitId":"DineshMagesvaran"},"content":"    4. Test case: `findall western 5/5 $5-10`","lastModifiedDate":"2021-04-11"},{"lineNumber":1037,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1038,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1039,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown which contain all three keywords provided.","lastModifiedDate":"2021-04-11"},{"lineNumber":1040,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1041,"author":{"gitId":"DineshMagesvaran"},"content":"       - 2 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1042,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1043,"author":{"gitId":"DineshMagesvaran"},"content":"    5. Test case: `findall 4/5 5/5`","lastModifiedDate":"2021-04-11"},{"lineNumber":1044,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1045,"author":{"gitId":"DineshMagesvaran"},"content":"        Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1046,"author":{"gitId":"DineshMagesvaran"},"content":"        - All entries shown which contain both of the keywords provided, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":1047,"author":{"gitId":"DineshMagesvaran"},"content":"        - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1048,"author":{"gitId":"DineshMagesvaran"},"content":"        - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1049,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1050,"author":{"gitId":"DineshMagesvaran"},"content":"    6. Test case: `findall 3/7`","lastModifiedDate":"2021-04-11"},{"lineNumber":1051,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1052,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1053,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown which contain the provided keyword: `3/7`, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":1054,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1055,"author":{"gitId":"DineshMagesvaran"},"content":"       - Suggestion message displayed informing the user of a possible typo for a rating search,","lastModifiedDate":"2021-04-11"},{"lineNumber":1056,"author":{"gitId":"DineshMagesvaran"},"content":"       providing directions to correct the typo.","lastModifiedDate":"2021-04-11"},{"lineNumber":1057,"author":{"gitId":"DineshMagesvaran"},"content":"       - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1058,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1059,"author":{"gitId":"DineshMagesvaran"},"content":"    7. Test case: `findall $5-`","lastModifiedDate":"2021-04-11"},{"lineNumber":1060,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1061,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1062,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown which contain the provided keyword: `$5-`, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":1063,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1064,"author":{"gitId":"DineshMagesvaran"},"content":"       - Suggestion message displayed informing the user of a possible typo for a price search,","lastModifiedDate":"2021-04-11"},{"lineNumber":1065,"author":{"gitId":"DineshMagesvaran"},"content":"       providing directions to correct the typo.","lastModifiedDate":"2021-04-11"},{"lineNumber":1066,"author":{"gitId":"DineshMagesvaran"},"content":"       - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1067,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1068,"author":{"gitId":"DineshMagesvaran"},"content":"    8. Test case: `findall 3/7 $5-`","lastModifiedDate":"2021-04-11"},{"lineNumber":1069,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1070,"author":{"gitId":"DineshMagesvaran"},"content":"       Expected:","lastModifiedDate":"2021-04-11"},{"lineNumber":1071,"author":{"gitId":"DineshMagesvaran"},"content":"       - All entries shown which contain both of the keywords provided, if any.","lastModifiedDate":"2021-04-11"},{"lineNumber":1072,"author":{"gitId":"DineshMagesvaran"},"content":"       - Success message displayed informing the user of the number of entries found.","lastModifiedDate":"2021-04-11"},{"lineNumber":1073,"author":{"gitId":"DineshMagesvaran"},"content":"       - Suggestion message displayed informing the user of possible typos for a rating search,","lastModifiedDate":"2021-04-11"},{"lineNumber":1074,"author":{"gitId":"DineshMagesvaran"},"content":"       and a price search, providing directions to correct the typos.","lastModifiedDate":"2021-04-11"},{"lineNumber":1075,"author":{"gitId":"DineshMagesvaran"},"content":"       - 0 default entries will be shown.","lastModifiedDate":"2021-04-11"},{"lineNumber":1076,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1077,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1078,"author":{"gitId":"marcusleeeugene"},"content":"### View an entry","lastModifiedDate":"2021-04-11"},{"lineNumber":1079,"author":{"gitId":"marcusleeeugene"},"content":"1. View an expanded view of an entry with lengthy review","lastModifiedDate":"2021-04-11"},{"lineNumber":1080,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":1081,"author":{"gitId":"marcusleeeugene"},"content":"    1. Prerequisite: Must have entries listed out in the Main Window    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1082,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1083,"author":{"gitId":"marcusleeeugene"},"content":"    2. Test Case: Correct command with valid parameters:`view 1` (provided that entry of index 1 already exists)","lastModifiedDate":"2021-04-11"},{"lineNumber":1084,"author":{"gitId":"marcusleeeugene"},"content":"        ","lastModifiedDate":"2021-04-11"},{"lineNumber":1085,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: A window pops up which shows all details of the specified entry.","lastModifiedDate":"2021-04-11"},{"lineNumber":1086,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1087,"author":{"gitId":"marcusleeeugene"},"content":"    3. Test Case: Command without parameters: `view`","lastModifiedDate":"2021-04-11"},{"lineNumber":1088,"author":{"gitId":"marcusleeeugene"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1089,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: User will be notified that invalid command format is provided. The command box","lastModifiedDate":"2021-04-11"},{"lineNumber":1090,"author":{"gitId":"DineshMagesvaran"},"content":"        will show the correct syntax for `view` command.","lastModifiedDate":"2021-04-11"},{"lineNumber":1091,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1092,"author":{"gitId":"marcusleeeugene"},"content":"    4. Test Case: Command not in lower-case: `ViEw 1` (provided that entry of index 1 already exists)","lastModifiedDate":"2021-04-11"},{"lineNumber":1093,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1094,"author":{"gitId":"marcusleeeugene"},"content":"        Expected: User will be notified about unknown command in the command box.","lastModifiedDate":"2021-04-11"},{"lineNumber":1095,"author":{"gitId":"DineshMagesvaran"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1096,"author":{"gitId":"Sidney011100"},"content":"    5. Test Case: Correct command but with a non-existent index: `view 100000` (provided that entry of index 100000 ","lastModifiedDate":"2021-04-12"},{"lineNumber":1097,"author":{"gitId":"marcusleeeugene"},"content":"       do not exists)","lastModifiedDate":"2021-04-11"},{"lineNumber":1098,"author":{"gitId":"marcusleeeugene"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1099,"author":{"gitId":"Sidney011100"},"content":"        Expected: User will be notified of invalid command, and the number of entries in The Food Diary.","lastModifiedDate":"2021-04-12"},{"lineNumber":1100,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1101,"author":{"gitId":"Sidney011100"},"content":"### Revise an Entry","lastModifiedDate":"2021-04-11"},{"lineNumber":1102,"author":{"gitId":"Sidney011100"},"content":"1. Edit the `Name`, `Rating`, `Price`, `Address`, `Reviews`, `School(s)`, `Category(s)`","lastModifiedDate":"2021-04-11"},{"lineNumber":1103,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":1104,"author":{"gitId":"Sidney011100"},"content":"    1. Prerequisite: Have a list of Entries or at least 1 Entry in view. In command line, execute `Revise \u003cIndex\u003e`. ","lastModifiedDate":"2021-04-11"},{"lineNumber":1105,"author":{"gitId":"Sidney011100"},"content":"                    `Index` refers to index of Entry to revise in view.","lastModifiedDate":"2021-04-11"},{"lineNumber":1106,"author":{"gitId":"Sidney011100"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1107,"author":{"gitId":"Sidney011100"},"content":"    2. Test case: Under Name, change name to `McDonalds`. Click `Revise` button. ","lastModifiedDate":"2021-04-11"},{"lineNumber":1108,"author":{"gitId":"Sidney011100"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1109,"author":{"gitId":"Sidney011100"},"content":"        Expected: Name of entry to be changed to `McDonalds`, Revise window to close and Main Window to show a list of","lastModifiedDate":"2021-04-11"},{"lineNumber":1110,"author":{"gitId":"Sidney011100"},"content":"       all entries. Success Message leads with `Edited Entry: ...` shown in status bar.","lastModifiedDate":"2021-04-11"},{"lineNumber":1111,"author":{"gitId":"Sidney011100"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1112,"author":{"gitId":"Sidney011100"},"content":"    3. Test case: Under Rating, change rating to `2`. Click `Revise` button.","lastModifiedDate":"2021-04-11"},{"lineNumber":1113,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1114,"author":{"gitId":"Sidney011100"},"content":"        Expected: Rating of entry changes to 2/5, Revise window to close and Main Window to show a list of","lastModifiedDate":"2021-04-11"},{"lineNumber":1115,"author":{"gitId":"Sidney011100"},"content":"       all entries. Success Message leads with `Edited Entry: ...` shown in status bar.","lastModifiedDate":"2021-04-11"},{"lineNumber":1116,"author":{"gitId":"Sidney011100"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1117,"author":{"gitId":"Sidney011100"},"content":"    4. Test case: Under Price, change to `5`. Click `Revise` button.","lastModifiedDate":"2021-04-11"},{"lineNumber":1118,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1119,"author":{"gitId":"Sidney011100"},"content":"       Expected: Price of entry to be changed to `5`, Revise window to close and Main Window to show a list of","lastModifiedDate":"2021-04-11"},{"lineNumber":1120,"author":{"gitId":"Sidney011100"},"content":"       all entries. Success Message leads with `Edited Entry: ...` shown in status bar.","lastModifiedDate":"2021-04-11"},{"lineNumber":1121,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1122,"author":{"gitId":"Sidney011100"},"content":"    5. Test case: Under Address, change to `Computing Drive`. Click `Revise` button.","lastModifiedDate":"2021-04-11"},{"lineNumber":1123,"author":{"gitId":"Sidney011100"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1124,"author":{"gitId":"Sidney011100"},"content":"       Expected: Address of entry to be changed to `Computing Drive`, Revise window to close and Main Window to show a list of","lastModifiedDate":"2021-04-11"},{"lineNumber":1125,"author":{"gitId":"Sidney011100"},"content":"       all entries. Success Message leads with `Edited Entry: ...` shown in status bar.","lastModifiedDate":"2021-04-11"},{"lineNumber":1126,"author":{"gitId":"Sidney011100"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1127,"author":{"gitId":"Sidney011100"},"content":"    6. Test case: Under Categories, add `western`. Click `Revise` button.","lastModifiedDate":"2021-04-11"},{"lineNumber":1128,"author":{"gitId":"Sidney011100"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1129,"author":{"gitId":"Sidney011100"},"content":"       Expected: Categories of entry to add `Western`, Revise window to close and Main Window to show a list of","lastModifiedDate":"2021-04-11"},{"lineNumber":1130,"author":{"gitId":"Sidney011100"},"content":"       all entries. Success Message leads with `Edited Entry: ...` shown in status bar.","lastModifiedDate":"2021-04-11"},{"lineNumber":1131,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1132,"author":{"gitId":"Sidney011100"},"content":"   7. Test case: Under Categories, add to `soc`. Click `Revise` button.","lastModifiedDate":"2021-04-11"},{"lineNumber":1133,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1134,"author":{"gitId":"Sidney011100"},"content":"       Expected: Categories of entry to add `SOC`, Revise window to close and Main Window to show a list of","lastModifiedDate":"2021-04-11"},{"lineNumber":1135,"author":{"gitId":"Sidney011100"},"content":"       all entries. Success Message leads with `Edited Entry: ...` shown in status bar.","lastModifiedDate":"2021-04-11"},{"lineNumber":1136,"author":{"gitId":"Sidney011100"},"content":"      ","lastModifiedDate":"2021-04-11"},{"lineNumber":1137,"author":{"gitId":"Sidney011100"},"content":"    8. Other valid test cases to try: Combine any of the above testcases before pressing `Revise`. All changes should be","lastModifiedDate":"2021-04-11"},{"lineNumber":1138,"author":{"gitId":"Sidney011100"},"content":"    accounted for.","lastModifiedDate":"2021-04-11"},{"lineNumber":1139,"author":{"gitId":"Sidney011100"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1140,"author":{"gitId":"Sidney011100"},"content":"    9. Other invalid test cases to try: Use non-alphanumeric names, change name and address to be the same as an Entry that ","lastModifiedDate":"2021-04-11"},{"lineNumber":1141,"author":{"gitId":"Sidney011100"},"content":"    already exists, invalid Categories `westen` and Schools `Com`. ","lastModifiedDate":"2021-04-11"},{"lineNumber":1142,"author":{"gitId":"Sidney011100"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1143,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Edit an entry","lastModifiedDate":"2021-04-11"},{"lineNumber":1144,"author":{"gitId":"Donavanty"},"content":"1. Edit the `Name`, `Rating`, `Price`, `Address`, `Reviews`, `School(s)`, `Category(-ies)`","lastModifiedDate":"2021-04-12"},{"lineNumber":1145,"author":{"gitId":"Donavanty"},"content":"   ","lastModifiedDate":"2021-04-12"},{"lineNumber":1146,"author":{"gitId":"Donavanty"},"content":"    1. Prerequisite: Have a list of Entries or at least 1 Entry in view. In command line,","lastModifiedDate":"2021-04-12"},{"lineNumber":1147,"author":{"gitId":"Donavanty"},"content":"    execute `edit \u003cINDEX\u003e \u003cKEYWORD\u003e ...`. ","lastModifiedDate":"2021-04-12"},{"lineNumber":1148,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":1149,"author":{"gitId":"Donavanty"},"content":"    * `INDEX` refers to index of Entry to revise in view.","lastModifiedDate":"2021-04-12"},{"lineNumber":1150,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":1151,"author":{"gitId":"Donavanty"},"content":"    * The following test cases will test different permutations and numbers of `KEYWORD`(s).","lastModifiedDate":"2021-04-12"},{"lineNumber":1152,"author":{"gitId":"Donavanty"},"content":"       ","lastModifiedDate":"2021-04-12"},{"lineNumber":1153,"author":{"gitId":"Donavanty"},"content":"    2. Test case: `edit 1 n/McDonalds`","lastModifiedDate":"2021-04-12"},{"lineNumber":1154,"author":{"gitId":"Donavanty"},"content":"    ","lastModifiedDate":"2021-04-12"},{"lineNumber":1155,"author":{"gitId":"Donavanty"},"content":"       Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1156,"author":{"gitId":"Donavanty"},"content":"       - First entry has named changed to \"McDonalds\".","lastModifiedDate":"2021-04-12"},{"lineNumber":1157,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown","lastModifiedDate":"2021-04-12"},{"lineNumber":1158,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1159,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1160,"author":{"gitId":"Donavanty"},"content":"    3. Test case: `edit 2 ra/0`","lastModifiedDate":"2021-04-12"},{"lineNumber":1161,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1162,"author":{"gitId":"Donavanty"},"content":"       Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1163,"author":{"gitId":"Donavanty"},"content":"       - Second entry has rating changed to 0. (0/5)","lastModifiedDate":"2021-04-12"},{"lineNumber":1164,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown (with the first entry remaining edited as done previously).","lastModifiedDate":"2021-04-12"},{"lineNumber":1165,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1166,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1167,"author":{"gitId":"Donavanty"},"content":"    4. Test case: `edit 3 a/50 West Coast Road`","lastModifiedDate":"2021-04-12"},{"lineNumber":1168,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1169,"author":{"gitId":"Donavanty"},"content":"       Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1170,"author":{"gitId":"Donavanty"},"content":"       - Third entry has address changed to \"50 West Coast Road\".","lastModifiedDate":"2021-04-12"},{"lineNumber":1171,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown (with all entries updated previously).","lastModifiedDate":"2021-04-12"},{"lineNumber":1172,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1173,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1174,"author":{"gitId":"Donavanty"},"content":"    5. Test case: `edit 4 re/I had a great time here.`","lastModifiedDate":"2021-04-12"},{"lineNumber":1175,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1176,"author":{"gitId":"Donavanty"},"content":"        Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1177,"author":{"gitId":"Donavanty"},"content":"       - Fourth entry has review changed to \"I had a great time here\".","lastModifiedDate":"2021-04-12"},{"lineNumber":1178,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown (with all entries updated previously).","lastModifiedDate":"2021-04-12"},{"lineNumber":1179,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1180,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1181,"author":{"gitId":"Donavanty"},"content":"    6. Test case: `edit 5 p/20`","lastModifiedDate":"2021-04-12"},{"lineNumber":1182,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1183,"author":{"gitId":"Donavanty"},"content":"       Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1184,"author":{"gitId":"Donavanty"},"content":"       - Fifth entry has price changed to \"20\". ($20)","lastModifiedDate":"2021-04-12"},{"lineNumber":1185,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown (with all entries updated previously).","lastModifiedDate":"2021-04-12"},{"lineNumber":1186,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1187,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1188,"author":{"gitId":"Donavanty"},"content":"    7. Test case: `edit 1 n/Hwangs ra/4 p/7 a/NUS re/Korean food makes me happy. s/Utown c/Korean`","lastModifiedDate":"2021-04-12"},{"lineNumber":1189,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1190,"author":{"gitId":"Donavanty"},"content":"       Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1191,"author":{"gitId":"Donavanty"},"content":"       - First entry has name changed to \"Hwangs\", rating changed to \"4\" (4/5), price changed to \"7\" ($7),","lastModifiedDate":"2021-04-12"},{"lineNumber":1192,"author":{"gitId":"Donavanty"},"content":"        review changed to \"Korean food makes me happy.\", school location tags changed to \"UTOWN\", and ","lastModifiedDate":"2021-04-12"},{"lineNumber":1193,"author":{"gitId":"Donavanty"},"content":"        food category changed to \"Korean\".","lastModifiedDate":"2021-04-12"},{"lineNumber":1194,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown (with all entries updated previously).","lastModifiedDate":"2021-04-12"},{"lineNumber":1195,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1196,"author":{"gitId":"Donavanty"},"content":"       ","lastModifiedDate":"2021-04-12"},{"lineNumber":1197,"author":{"gitId":"Donavanty"},"content":"    8. Test case: `edit 1 c/Korean c/Others`","lastModifiedDate":"2021-04-12"},{"lineNumber":1198,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":1199,"author":{"gitId":"Donavanty"},"content":"       Expected:","lastModifiedDate":"2021-04-12"},{"lineNumber":1200,"author":{"gitId":"Donavanty"},"content":"       - First entry has food category changed to \"Korean\" and \"Others\".","lastModifiedDate":"2021-04-12"},{"lineNumber":1201,"author":{"gitId":"Donavanty"},"content":"       - All entries remained shown (with all entries updated previously).","lastModifiedDate":"2021-04-12"},{"lineNumber":1202,"author":{"gitId":"Donavanty"},"content":"       - Success message displayed informing the user of change.","lastModifiedDate":"2021-04-12"},{"lineNumber":1203,"author":{"gitId":"DineshMagesvaran"},"content":"  ","lastModifiedDate":"2021-04-11"},{"lineNumber":1204,"author":{"gitId":"marcusleeeugene"},"content":"### Clear all entries","lastModifiedDate":"2021-04-11"},{"lineNumber":1205,"author":{"gitId":"marcusleeeugene"},"content":"1. Remove all entries from The Food Diary","lastModifiedDate":"2021-04-11"},{"lineNumber":1206,"author":{"gitId":"DineshMagesvaran"},"content":"   ","lastModifiedDate":"2021-04-11"},{"lineNumber":1207,"author":{"gitId":"marcusleeeugene"},"content":"    1. Prerequisite: None","lastModifiedDate":"2021-04-11"},{"lineNumber":1208,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-11"},{"lineNumber":1209,"author":{"gitId":"marcusleeeugene"},"content":"    2. Test Case: Correct command:`clear` ","lastModifiedDate":"2021-04-11"},{"lineNumber":1210,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1211,"author":{"gitId":"marcusleeeugene"},"content":"       Expected: Success message will show up in command box informing user that all entries are cleared.","lastModifiedDate":"2021-04-11"},{"lineNumber":1212,"author":{"gitId":"marcusleeeugene"},"content":"    3. Test Case: Command not in lower-case: `cLeAr`","lastModifiedDate":"2021-04-11"},{"lineNumber":1213,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":1214,"author":{"gitId":"marcusleeeugene"},"content":"       Expected: User will be notified about unknown command in the command box.","lastModifiedDate":"2021-04-11"},{"lineNumber":1215,"author":{"gitId":"marcusleeeugene"},"content":"       ","lastModifiedDate":"2021-04-11"},{"lineNumber":1216,"author":{"gitId":"Sidney011100"},"content":"## **UI Mockup**","lastModifiedDate":"2021-04-12"},{"lineNumber":1217,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":1218,"author":{"gitId":"Sidney011100"},"content":"![Ui Mock-up](images/Ui.png)","lastModifiedDate":"2021-03-06"}],"authorContributionMap":{"marcusleeeugene":176,"Donavanty":209,"Sidney011100":240,"DineshMagesvaran":258,"-":172,"Prabhakaran-Gokul":163}},{"path":"docs/Documentation.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Documentation guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"**Setting up and maintaining the project website:**","lastModifiedDate":"2020-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* We use [**Jekyll**](https://jekyllrb.com/) to manage documentation.","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* The `docs/` folder is used for documentation.","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html).","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"**Style guidance:**","lastModifiedDate":"2020-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style).","lastModifiedDate":"2020-06-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)","lastModifiedDate":"2020-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Diagrams:**","lastModifiedDate":"2020-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"* See the UML diagrams [T14-2 UML Diagrams](https://www.figma.com/embed?embed_host\u003dshare\u0026url\u003dhttps%3A%2F%2Fwww.figma.com%2Ffile%2Fusq7ChDOFXFccaeNrY4pt3%2FCS2103-UML%3Fnode-id%3D209%253A2)","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**Converting a document to the PDF format:**","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)","lastModifiedDate":"2020-06-07"}],"authorContributionMap":{"marcusleeeugene":1,"-":24}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"   1. Run the `fooddiary.Main` and try a few commands.","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"Donavanty":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"   e.g. `fooddiary.commons.StringUtilTest`","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"   e.g. `fooddiary.storage.StorageManagerTest`","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"   e.g. `fooddiary.logicLogicManagerTest`","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"Donavanty":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-02-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2021-02-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"###  Done by (CS2103-T14-2):","lastModifiedDate":"2021-02-24"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"Donavan Lim, Marcus Lee Eugene, Chong Sidney, Dinesh S/O Magesvaran, Prabhakaran Gokul","lastModifiedDate":"2021-02-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"---","lastModifiedDate":"2021-02-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-02-24"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-02-24"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"## Description","lastModifiedDate":"2021-02-24"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) and packaged with a Graphical User Interface (GUI).","lastModifiedDate":"2021-02-24"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food options tasted in the vicinity of NUS.","lastModifiedDate":"2021-02-24"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"The Food Diary will allow students to save time and effort when finding places to eat around the NUS vicinity. The Food Diary especially caters to students mainly on 4 aspects:","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"1. The ability for users to save food diary entries for future reference.","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. The ability for users to find entries based on specific fields.","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"3. The ability for users to have multiple food reviews for a food place.","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"4. The option for users to use Commands / UI to perform some tasks quickly.","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"## Quick Start","lastModifiedDate":"2021-04-11"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2021-04-11"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"2. Download the latest jar file from [here](https://github.com/AY2021S2-CS2103-T14-2/tp/releases).","lastModifiedDate":"2021-04-11"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"3. Copy the file to the folder you want to use as the home folder for The Food Diary app.","lastModifiedDate":"2021-04-11"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"4. Open your terminal at where the home folder is, and run java -jar [file name].jar without the","lastModifiedDate":"2021-04-11"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"   [ ] brackets to start the app.","lastModifiedDate":"2021-04-11"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-11"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"5. You should now see The Food Diary’s home page.","lastModifiedDate":"2021-04-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"## User Interface","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"This section discusses the main semantics and purpose of the design of The Food Diary.","lastModifiedDate":"2021-04-05"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"![Main Window UI](images/Ui.png)","lastModifiedDate":"2021-04-05"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"On start up of The Food Diary, users are greeted with the main window display.","lastModifiedDate":"2021-04-12"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":" The main window displays all entries of the in The Food Diary on start up,","lastModifiedDate":"2021-04-05"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":" in the order that the entries were added in.","lastModifiedDate":"2021-04-05"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"### Main Window","lastModifiedDate":"2021-04-05"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"* The main window features 5 components. From top to bottom, they are:","lastModifiedDate":"2021-04-05"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"    1. A menu bar","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"    2. A command box text field","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"    3. A result display","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"    4. A list of entries","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"    5. A status bar","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"### Menu Bar","lastModifiedDate":"2021-04-05"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"* The menu bar features 2 buttons: File, and Help.","lastModifiedDate":"2021-04-05"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"* The File menu contains Exit, which when pressed, exits the app.","lastModifiedDate":"2021-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"* The Help menu contains Help, which when pressed, opens a new Help window displaying all the a help guide for users.","lastModifiedDate":"2021-04-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"### Command Box","lastModifiedDate":"2021-04-05"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"* The command box is the text field users will type their commands in their in to use The Food Diary.","lastModifiedDate":"2021-04-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"### Result Display","lastModifiedDate":"2021-04-05"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"* The result display displays necessary logging information to the user.","lastModifiedDate":"2021-04-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"* Information shown generally include the status of whether the command was written correctly syntactically,","lastModifiedDate":"2021-04-05"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":" which would then allow for the app to perform the user\u0027s desired request.","lastModifiedDate":"2021-04-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"* If the command cannot be interpreted by the app, the appropriate error message and corresponding rectification","lastModifiedDate":"2021-04-05"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":" is displayed for the user to rectify their input command.","lastModifiedDate":"2021-04-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"* The text field is also text-selectable.","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"### List of Entries","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"* This component features a list of entries currently stored in The Food Diary.","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"* A list of entries is auto-populated on start up, or when there is no existing data. To start afresh, use the `clear`","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"Donavanty"},"content":" function as stated below.","lastModifiedDate":"2021-04-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"* Each entry displayed contains 5 compulsory fields, and 2 optional fields:","lastModifiedDate":"2021-04-05"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"    1. Name of Restaurant","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"    2. Rating of Restaurant","lastModifiedDate":"2021-04-05"},{"lineNumber":96,"author":{"gitId":"Donavanty"},"content":"    3. Price (an estimate) of the Restaurant\u0027s Food","lastModifiedDate":"2021-04-05"},{"lineNumber":97,"author":{"gitId":"Donavanty"},"content":"    4. Address of Restaurant","lastModifiedDate":"2021-04-05"},{"lineNumber":98,"author":{"gitId":"Donavanty"},"content":"    5. User\u0027s Review of the Restaurant","lastModifiedDate":"2021-04-05"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"    6. (Optional) Food Categories (i.e. Cuisine, Restaurant/Food Characteristic etc.)","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"    7. (Optional) NUS School Location Categories","lastModifiedDate":"2021-04-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"#### Consolidation of Entries","lastModifiedDate":"2021-04-05"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"* Users need not add an extra entry if they wish to add on an extra review, or price pertaining to the same restaurant","lastModifiedDate":"2021-04-05"},{"lineNumber":104,"author":{"gitId":"Donavanty"},"content":" and location. A common situation involves users wanting to document their experience visiting the same restaurant","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"Donavanty"},"content":" more than once.","lastModifiedDate":"2021-04-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"Donavanty"},"content":"* As such, multiple reviews and prices pertaining to an entry can be added using the `addon` command. Refer to the","lastModifiedDate":"2021-04-05"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"`addon` feature below for more information.","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":110,"author":{"gitId":"Donavanty"},"content":"* An entry with multiple reviews only shows the first review, truncated with an ellipsis (...).","lastModifiedDate":"2021-04-05"},{"lineNumber":111,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"Donavanty"},"content":"* This is done to keep each entry\u0027s window height short for the user to view more entries","lastModifiedDate":"2021-04-05"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":" in within the main window.","lastModifiedDate":"2021-04-05"},{"lineNumber":114,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":115,"author":{"gitId":"Donavanty"},"content":"* To view all the reviews pertaining to that entry, use the `view` command. Refer to the `view` feature below for","lastModifiedDate":"2021-04-05"},{"lineNumber":116,"author":{"gitId":"Donavanty"},"content":" more information.","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"Donavanty"},"content":"* An entry with multiple prices shows a price range, ranging from the minimum to the maximum price","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"Donavanty"},"content":" among the prices added for the corresponding entry.","lastModifiedDate":"2021-04-05"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"### Status Bar","lastModifiedDate":"2021-04-05"},{"lineNumber":123,"author":{"gitId":"Donavanty"},"content":"* Displays the path directory information for the local storage file of The Food Diary.","lastModifiedDate":"2021-04-05"},{"lineNumber":124,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":125,"author":{"gitId":"Donavanty"},"content":"### Help Window","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"Donavanty"},"content":"* The help window shows a help guide for users on a separate window.","lastModifiedDate":"2021-04-05"},{"lineNumber":127,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":128,"author":{"gitId":"Donavanty"},"content":"* The help guide has 3 main sections:","lastModifiedDate":"2021-04-05"},{"lineNumber":129,"author":{"gitId":"Donavanty"},"content":"    1. A list of Commands","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":"    2. A list of Food Categories","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"Donavanty"},"content":"    3. A list of School Location Categories","lastModifiedDate":"2021-04-05"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":133,"author":{"gitId":"Donavanty"},"content":"* A list of commands gives a succint, convenient overview of all the commands executable","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":" in The Food Diary for the user.","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":"* The Food and School Location categories aid users in learning what possible options they can tag their","lastModifiedDate":"2021-04-05"},{"lineNumber":137,"author":{"gitId":"Donavanty"},"content":" entries as in their commands.","lastModifiedDate":"2021-04-05"},{"lineNumber":138,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"* Users can copy the link with the `Copy URL` button, and view this User Guide for more information.","lastModifiedDate":"2021-04-05"},{"lineNumber":140,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"* Refer to the `help` feature below for more information.","lastModifiedDate":"2021-04-05"},{"lineNumber":142,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"Donavanty"},"content":"### View \u0026 Revise Window","lastModifiedDate":"2021-04-05"},{"lineNumber":144,"author":{"gitId":"Donavanty"},"content":"* These windows are described in detail in the `view` and `revise` features below respectively.","lastModifiedDate":"2021-04-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":155,"author":{"gitId":"Sidney011100"},"content":"e.g. in add n/NAME, NAME is a parameter which can be used as add n/Frontier.","lastModifiedDate":"2021-04-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"Donavanty"},"content":"* Items in angle brackets `\u003c...\u003e` are compulsory.","lastModifiedDate":"2021-04-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Items in square brackets `[...]` are optional.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":160,"author":{"gitId":"Donavanty"},"content":"  e.g `\u003cn/NAME\u003e [s/SCHOOL LOCATION]` can be used as `n/Subway t/UTOWN` or as `n/Subway` only.","lastModifiedDate":"2021-04-05"},{"lineNumber":161,"author":{"gitId":"marcusleeeugene"},"content":"  ","lastModifiedDate":"2021-02-23"},{"lineNumber":162,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Items with `…​` (i.e an ellipsis) after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":163,"author":{"gitId":"Prabhakaran-Gokul"},"content":"  e.g. `[c/CATEGORY] …​` can be used as `c/Fastfood c/Western c/Fastfood`, or 0 times etc.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":164,"author":{"gitId":"Donavanty"},"content":"  e.g. `\u003cKEYWORD\u003e ...` means that there must be one keyword present in the command, and each keyword can take on","lastModifiedDate":"2021-04-05"},{"lineNumber":165,"author":{"gitId":"Donavanty"},"content":"  any part of the entry as specified by the command (i.e. price, review etc.). See features for more understanding.","lastModifiedDate":"2021-04-05"},{"lineNumber":166,"author":{"gitId":"Sidney011100"},"content":"  ","lastModifiedDate":"2021-04-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":168,"author":{"gitId":"Donavanty"},"content":"  e.g. if the command specifies `\u003cn/NAME\u003e \u003cp/PRICE\u003e`, then `\u003cp/PRICE\u003e \u003cn/NAME\u003e` is also acceptable.","lastModifiedDate":"2021-04-05"},{"lineNumber":169,"author":{"gitId":"Sidney011100"},"content":"  ","lastModifiedDate":"2021-04-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":171,"author":{"gitId":"Donavanty"},"content":"  e.g. if you specify `p/5 p/6`, only `p/6` will be taken.","lastModifiedDate":"2021-04-05"},{"lineNumber":172,"author":{"gitId":"Sidney011100"},"content":"  ","lastModifiedDate":"2021-04-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-04-05"},{"lineNumber":175,"author":{"gitId":"Sidney011100"},"content":"  ","lastModifiedDate":"2021-04-04"},{"lineNumber":176,"author":{"gitId":"Donavanty"},"content":"* `[c/CATEGORY]`needs to be titled-cased, `[s/SCHOOL]` can be lower or upper-cased.","lastModifiedDate":"2021-04-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-12"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-23"},{"lineNumber":180,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Add a FoodDiary entry: `add`","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Adds an entry to the Food Diary.","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":184,"author":{"gitId":"Donavanty"},"content":"Format: `add \u003cn/RESTAURANT NAME\u003e \u003cra/RATING\u003e \u003cp/PRICE\u003e \u003cre/REVIEW\u003e \u003ca/ADDRESS\u003e [c/CATEGORY]... [s/SCHOOL LOCATION]...`","lastModifiedDate":"2021-04-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":186,"author":{"gitId":"Donavanty"},"content":"Parameters:","lastModifiedDate":"2021-02-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":188,"author":{"gitId":"Donavanty"},"content":"In any order:","lastModifiedDate":"2021-04-05"},{"lineNumber":189,"author":{"gitId":"Donavanty"},"content":"1. Restaurant name: `\u003cn/RESTAURANT NAME\u003e`","lastModifiedDate":"2021-04-05"},{"lineNumber":190,"author":{"gitId":"Donavanty"},"content":"2. Rating of restaurant experience: `\u003cra/RATING\u003e`","lastModifiedDate":"2021-04-05"},{"lineNumber":191,"author":{"gitId":"Donavanty"},"content":"3. Price (estimate) of restaurant\u0027s foood: `\u003cp/PRICE\u003e`","lastModifiedDate":"2021-04-05"},{"lineNumber":192,"author":{"gitId":"Donavanty"},"content":"3. Address of restuarant: `\u003ca/ADDRESS\u003e`","lastModifiedDate":"2021-04-05"},{"lineNumber":193,"author":{"gitId":"Donavanty"},"content":"4. Review of restaurant: `\u003cre/REVIEW\u003e`","lastModifiedDate":"2021-04-05"},{"lineNumber":194,"author":{"gitId":"Donavanty"},"content":"5. Food category: `[c/CATEGORY] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":195,"author":{"gitId":"Donavanty"},"content":"6. NUS School location category: `[s/SCHOOL LOCATION] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"Sidney011100"},"content":"Schools are limited to the following NUS locations:","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"Sidney011100"},"content":"    `BIZ`, `CLB`, `DENT`, `FASS`, `FOE`,`MED`, `NUSS`, `PGP`, `SCIENCE`, `SDE`, `SOC`,","lastModifiedDate":"2021-03-31"},{"lineNumber":199,"author":{"gitId":"Sidney011100"},"content":"`USC`, `UTOWN`, `UHALL`, `VENTUS`, `YIH`","lastModifiedDate":"2021-03-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":201,"author":{"gitId":"Sidney011100"},"content":"Categories are limited to the following:","lastModifiedDate":"2021-03-31"},{"lineNumber":202,"author":{"gitId":"Sidney011100"},"content":"    `Chinese`, `Dessert`, `Fastfood`, `Fruits`, `Fusion`, `Halal`, `Indian`, `Japanese`, `Korean`, `Malay`,","lastModifiedDate":"2021-03-31"},{"lineNumber":203,"author":{"gitId":"Sidney011100"},"content":"`Vegan`, `Vegetarian` ,`Western`, `Others`","lastModifiedDate":"2021-03-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":205,"author":{"gitId":"Donavanty"},"content":"Note:","lastModifiedDate":"2021-04-05"},{"lineNumber":206,"author":{"gitId":"Donavanty"},"content":"- Names can only be alphanumeric characters. We justify that the sole use of alphanumeric characters suffices –","lastModifiedDate":"2021-04-05"},{"lineNumber":207,"author":{"gitId":"Donavanty"},"content":" users will still be able to know which restaurant the entry is referring to despite","lastModifiedDate":"2021-04-05"},{"lineNumber":208,"author":{"gitId":"Donavanty"},"content":" not using non-alphanumeric characters, such as apostrophe(\u0027) etc.","lastModifiedDate":"2021-04-05"},{"lineNumber":209,"author":{"gitId":"Donavanty"},"content":"- Raing should be an integer between 0 and 5.","lastModifiedDate":"2021-04-05"},{"lineNumber":210,"author":{"gitId":"Donavanty"},"content":"- Price range: $0 - 999.","lastModifiedDate":"2021-04-05"},{"lineNumber":211,"author":{"gitId":"Donavanty"},"content":"- Address will not be checked if it is a valid location, this is left for the user to input any address they deem","lastModifiedDate":"2021-04-05"},{"lineNumber":212,"author":{"gitId":"Donavanty"},"content":" as legitimate.","lastModifiedDate":"2021-04-05"},{"lineNumber":213,"author":{"gitId":"Donavanty"},"content":"- Multiple entries can exist with the same name but different locations, and vice versa.","lastModifiedDate":"2021-04-05"},{"lineNumber":214,"author":{"gitId":"Donavanty"},"content":"- A FoodDiary entry can have any number of categories or schools.","lastModifiedDate":"2021-04-05"},{"lineNumber":215,"author":{"gitId":"DineshMagesvaran"},"content":"- Food Diary can contain up to 1,000,000 entries, beyond which it will not be possible to","lastModifiedDate":"2021-04-07"},{"lineNumber":216,"author":{"gitId":"DineshMagesvaran"},"content":"add more entries until one or more existing entries have been deleted.","lastModifiedDate":"2021-04-07"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":218,"author":{"gitId":"Donavanty"},"content":"Example:","lastModifiedDate":"2021-02-22"},{"lineNumber":219,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":220,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    add n/Al Amaan Restaurant ra/5 p/8 re/best for Butter Chicken a/12 Clementi Rd, Singapore 129742 c/Indian s/FOE","lastModifiedDate":"2021-03-31"},{"lineNumber":221,"author":{"gitId":"Sidney011100"},"content":"    add n/7 Eleven ra/3 p/4 re/Mac and cheese there is amazing a/NUS c/Halal s/YIH s/SOC","lastModifiedDate":"2021-03-31"},{"lineNumber":222,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":223,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Addon a review or a price to a FoodDiary entry: `addon`","lastModifiedDate":"2021-03-31"},{"lineNumber":224,"author":{"gitId":"Sidney011100"},"content":"Adds-on additional review and/or a price to a FoodDiary entry of the Food Diary quickly.","lastModifiedDate":"2021-04-04"},{"lineNumber":225,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":226,"author":{"gitId":"Donavanty"},"content":"Format: `addon \u003cINDEX\u003e \u003cKEYWORD\u003e ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":227,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":228,"author":{"gitId":"Donavanty"},"content":"Parameters:","lastModifiedDate":"2021-03-31"},{"lineNumber":229,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":230,"author":{"gitId":"Donavanty"},"content":"KEYWORD(s) of any number and sequence:","lastModifiedDate":"2021-04-05"},{"lineNumber":231,"author":{"gitId":"Donavanty"},"content":"1. To add on a review: `[re/REVIEW] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":232,"author":{"gitId":"Prabhakaran-Gokul"},"content":"2. To add on a price: `[p/PRICE]`","lastModifiedDate":"2021-04-06"},{"lineNumber":233,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":234,"author":{"gitId":"Donavanty"},"content":"Note:","lastModifiedDate":"2021-04-05"},{"lineNumber":235,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- Adds on review(s) and/or a price to a FoodDiary entry at the specified `INDEX`.","lastModifiedDate":"2021-04-06"},{"lineNumber":236,"author":{"gitId":"Sidney011100"},"content":"- Multiple reviews with one price can be added on.","lastModifiedDate":"2021-04-01"},{"lineNumber":237,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- Index refers to the index number shown in the displayed FoodDiary entry list. The index must be a","lastModifiedDate":"2021-03-31"},{"lineNumber":238,"author":{"gitId":"Sidney011100"},"content":"  positive integer (e.g. 1,2,3,...).","lastModifiedDate":"2021-04-04"},{"lineNumber":239,"author":{"gitId":"Sidney011100"},"content":"- At least one of the optional fields must be provided.","lastModifiedDate":"2021-04-04"},{"lineNumber":240,"author":{"gitId":"Sidney011100"},"content":"- Existing reviews in the FoodDiary entry (at the specified `INDEX`) will be added on to the input reviews.","lastModifiedDate":"2021-04-04"},{"lineNumber":241,"author":{"gitId":"Sidney011100"},"content":"- Existing price in the FoodDiary entry (at the specified `INDEX`) will be updated according to the","lastModifiedDate":"2021-04-04"},{"lineNumber":242,"author":{"gitId":"Prabhakaran-Gokul"},"content":"input price only if price added is beyond current range (e.g. Price range $5-10 will not be updated when a price of ","lastModifiedDate":"2021-04-06"},{"lineNumber":243,"author":{"gitId":"Prabhakaran-Gokul"},"content":"  $6 is added on)","lastModifiedDate":"2021-04-06"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":245,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":247,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    addon 1 re/I like the way the rice is cooked p/6","lastModifiedDate":"2021-03-30"},{"lineNumber":248,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    addon 2 re/I like the way the rice is cooked","lastModifiedDate":"2021-03-30"},{"lineNumber":249,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    addon 3 p/6","lastModifiedDate":"2021-03-30"},{"lineNumber":250,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    addon 3 p/6 re/I like the way the rice is cooked re/I also liked the way the chicken was marinated","lastModifiedDate":"2021-04-06"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":252,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Delete a FoodDiary entry: `delete`","lastModifiedDate":"2021-03-31"},{"lineNumber":253,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":254,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Deletes a FoodDiary entry from the Food Diary.","lastModifiedDate":"2021-03-31"},{"lineNumber":255,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":256,"author":{"gitId":"marcusleeeugene"},"content":"Format: `delete \u003cINDEX\u003e`","lastModifiedDate":"2021-04-04"},{"lineNumber":257,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":258,"author":{"gitId":"Donavanty"},"content":"Parameters:","lastModifiedDate":"2021-03-31"},{"lineNumber":259,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":260,"author":{"gitId":"marcusleeeugene"},"content":"1. `Index of FoodDiary entry`","lastModifiedDate":"2021-04-04"},{"lineNumber":261,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":262,"author":{"gitId":"Donavanty"},"content":"Example:","lastModifiedDate":"2021-02-22"},{"lineNumber":263,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-22"},{"lineNumber":264,"author":{"gitId":"marcusleeeugene"},"content":"    delete 1","lastModifiedDate":"2021-04-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"DineshMagesvaran"},"content":"### Find FoodDiary entries by keywords: `find`","lastModifiedDate":"2021-04-07"},{"lineNumber":267,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":268,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Finds FoodDiary entries whose names, ratings, price, address, categories and schools match any of the provided keywords.","lastModifiedDate":"2021-03-31"},{"lineNumber":269,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":270,"author":{"gitId":"Donavanty"},"content":"Format: `find \u003cKEYWORD\u003e ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":271,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":272,"author":{"gitId":"Donavanty"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":273,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":274,"author":{"gitId":"Donavanty"},"content":"KEYWORD(s) of any number and sequence:","lastModifiedDate":"2021-04-05"},{"lineNumber":275,"author":{"gitId":"Donavanty"},"content":"1. To search by food place name: `[NAME]`","lastModifiedDate":"2021-04-05"},{"lineNumber":276,"author":{"gitId":"Donavanty"},"content":"2. To search by rating: `[RATING/5]`","lastModifiedDate":"2021-04-05"},{"lineNumber":277,"author":{"gitId":"Donavanty"},"content":"3. To search by price: `[$PRICE]`","lastModifiedDate":"2021-04-05"},{"lineNumber":278,"author":{"gitId":"Donavanty"},"content":"4. To search by price range: `[$PRICE-PRICE]`","lastModifiedDate":"2021-04-05"},{"lineNumber":279,"author":{"gitId":"Donavanty"},"content":"5. To search by address: `[ADDRESS]`","lastModifiedDate":"2021-04-05"},{"lineNumber":280,"author":{"gitId":"Donavanty"},"content":"6. To search by categories: `[CATEGORY] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":281,"author":{"gitId":"Donavanty"},"content":"7. To search by schools: `[SCHOOL LOCATION] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":282,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":283,"author":{"gitId":"Donavanty"},"content":"Note:","lastModifiedDate":"2021-04-05"},{"lineNumber":284,"author":{"gitId":"DineshMagesvaran"},"content":"- More than one keyword per entry field can be accepted as a parameter.","lastModifiedDate":"2021-04-07"},{"lineNumber":285,"author":{"gitId":"DineshMagesvaran"},"content":"- Different entry fields can also be simultaneously accepted as parameters.","lastModifiedDate":"2021-04-07"},{"lineNumber":286,"author":{"gitId":"DineshMagesvaran"},"content":"- Keywords need to match a full word from the entry fields to return the corresponding entry as a result","lastModifiedDate":"2021-04-07"},{"lineNumber":287,"author":{"gitId":"DineshMagesvaran"},"content":"  (Example: Keyword \u0027Clem\u0027 will not match with \u0027Clementi\u0027 but keyword Techno will match with \u0027Techno Edge\u0027)","lastModifiedDate":"2021-04-07"},{"lineNumber":288,"author":{"gitId":"Donavanty"},"content":"- Rating should be an integer between 0 and 5. Note the syntax.","lastModifiedDate":"2021-04-05"},{"lineNumber":289,"author":{"gitId":"Donavanty"},"content":"- For the price field, a price range can also be accepted as a parameter, and any","lastModifiedDate":"2021-03-31"},{"lineNumber":290,"author":{"gitId":"Donavanty"},"content":"  FoodDiary entry that contains at least one of the prices within the specified range","lastModifiedDate":"2021-04-05"},{"lineNumber":291,"author":{"gitId":"Donavanty"},"content":"  will be returned as a search result. Note the syntax.","lastModifiedDate":"2021-04-05"},{"lineNumber":292,"author":{"gitId":"DineshMagesvaran"},"content":"- When finding by price, the entries are assumed to contain every single price within its own price range.","lastModifiedDate":"2021-04-07"},{"lineNumber":293,"author":{"gitId":"DineshMagesvaran"},"content":"  (Example: An entry with price field \u0027$4-8\u0027 is assumed to contain \u0027$4\u0027, \u0027$5\u0027, \u0027$6\u0027, \u0027$7\u0027 and \u0027$8\u0027","lastModifiedDate":"2021-04-07"},{"lineNumber":294,"author":{"gitId":"DineshMagesvaran"},"content":"  even if the only prices added previously to this entry were \u0027$4\u0027 and \u0027$8\u0027)","lastModifiedDate":"2021-04-07"},{"lineNumber":295,"author":{"gitId":"Donavanty"},"content":"- Note the syntax, especially for `rating` and `price` parameters.","lastModifiedDate":"2021-04-05"},{"lineNumber":296,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":297,"author":{"gitId":"DineshMagesvaran"},"content":"Example:","lastModifiedDate":"2021-03-16"},{"lineNumber":298,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":299,"author":{"gitId":"DineshMagesvaran"},"content":"    find techno","lastModifiedDate":"2021-03-30"},{"lineNumber":300,"author":{"gitId":"DineshMagesvaran"},"content":"    find science fass","lastModifiedDate":"2021-03-30"},{"lineNumber":301,"author":{"gitId":"DineshMagesvaran"},"content":"    find fastfood indian $6","lastModifiedDate":"2021-03-30"},{"lineNumber":302,"author":{"gitId":"DineshMagesvaran"},"content":"    find clementi 5/5 $8-15 western","lastModifiedDate":"2021-03-30"},{"lineNumber":303,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":304,"author":{"gitId":"DineshMagesvaran"},"content":"### Find specific FoodDiary entries by keywords: `findall`","lastModifiedDate":"2021-04-07"},{"lineNumber":305,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":306,"author":{"gitId":"Sidney011100"},"content":"Finds FoodDiary entries whose names, ratings, price, address, categories and schools matches all of the provided keywords.","lastModifiedDate":"2021-04-04"},{"lineNumber":307,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":308,"author":{"gitId":"Donavanty"},"content":"Format: `find \u003cKEYWORD\u003e ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":309,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":310,"author":{"gitId":"Donavanty"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":311,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":312,"author":{"gitId":"Donavanty"},"content":"KEYWORD(s) of any number and sequence:","lastModifiedDate":"2021-04-05"},{"lineNumber":313,"author":{"gitId":"Donavanty"},"content":"1. To search by food place name: `[NAME]`","lastModifiedDate":"2021-04-05"},{"lineNumber":314,"author":{"gitId":"Donavanty"},"content":"2. To search by rating: `[RATING/5]`","lastModifiedDate":"2021-04-05"},{"lineNumber":315,"author":{"gitId":"Donavanty"},"content":"3. To search by price: `[$PRICE]`","lastModifiedDate":"2021-04-05"},{"lineNumber":316,"author":{"gitId":"Donavanty"},"content":"4. To search by price range: `[$PRICE-PRICE]`","lastModifiedDate":"2021-04-05"},{"lineNumber":317,"author":{"gitId":"Donavanty"},"content":"5. To search by address: `[ADDRESS]`","lastModifiedDate":"2021-04-05"},{"lineNumber":318,"author":{"gitId":"Donavanty"},"content":"6. To search by categories: `[CATEGORY] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":319,"author":{"gitId":"Donavanty"},"content":"7. To search by schools: `[SCHOOL LOCATION] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":320,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":321,"author":{"gitId":"Donavanty"},"content":"Note:","lastModifiedDate":"2021-04-05"},{"lineNumber":322,"author":{"gitId":"DineshMagesvaran"},"content":"- More than one keyword per entry field can be accepted as parameters.","lastModifiedDate":"2021-04-07"},{"lineNumber":323,"author":{"gitId":"DineshMagesvaran"},"content":"- Different entry fields can also be simultaneously accepted as parameters.","lastModifiedDate":"2021-04-07"},{"lineNumber":324,"author":{"gitId":"DineshMagesvaran"},"content":"- Keywords need to match a full word from the entry fields to return the corresponding entry as a result","lastModifiedDate":"2021-04-07"},{"lineNumber":325,"author":{"gitId":"DineshMagesvaran"},"content":"  (Example: Keyword \u0027Clem\u0027 will not match with \u0027Clementi\u0027 but keyword Techno will match with \u0027Techno Edge\u0027)","lastModifiedDate":"2021-04-07"},{"lineNumber":326,"author":{"gitId":"Donavanty"},"content":"- For the price field, a price range can also be accepted as a parameter, and any FoodDiary entry that contains at least","lastModifiedDate":"2021-03-31"},{"lineNumber":327,"author":{"gitId":"Donavanty"},"content":"  one of the prices within the specified range will be returned as a search result.","lastModifiedDate":"2021-03-31"},{"lineNumber":328,"author":{"gitId":"DineshMagesvaran"},"content":"- When finding by price, the entries are assumed to contain every single price within its own price range.","lastModifiedDate":"2021-04-07"},{"lineNumber":329,"author":{"gitId":"DineshMagesvaran"},"content":"  (Example: An entry with price field \u0027$4-8\u0027 is assumed to contain \u0027$4\u0027, \u0027$5\u0027, \u0027$6\u0027, \u0027$7\u0027 and \u0027$8\u0027","lastModifiedDate":"2021-04-07"},{"lineNumber":330,"author":{"gitId":"DineshMagesvaran"},"content":"  even if the only prices added previously to this entry were \u0027$4\u0027 and \u0027$8\u0027)","lastModifiedDate":"2021-04-07"},{"lineNumber":331,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Unlike the find feature, the findall feature only returns search results of FoodDiary entries that contain all of","lastModifiedDate":"2021-03-31"},{"lineNumber":332,"author":{"gitId":"DineshMagesvaran"},"content":" the provided keywords.**","lastModifiedDate":"2021-03-30"},{"lineNumber":333,"author":{"gitId":"Donavanty"},"content":"- Note the syntax, especially for `rating` and `price` parameters.","lastModifiedDate":"2021-04-05"},{"lineNumber":334,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":335,"author":{"gitId":"DineshMagesvaran"},"content":"Example:","lastModifiedDate":"2021-03-16"},{"lineNumber":336,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":337,"author":{"gitId":"DineshMagesvaran"},"content":"    findall clementi fastfood 5/5 $9","lastModifiedDate":"2021-03-30"},{"lineNumber":338,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":339,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### View a specific FoodDiary entry: `view`","lastModifiedDate":"2021-03-31"},{"lineNumber":340,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":341,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Opens up a window, showing the details of a specified FoodDiary entry in a full expanded view. Allows the user to read through","lastModifiedDate":"2021-03-31"},{"lineNumber":342,"author":{"gitId":"marcusleeeugene"},"content":" reviews that are too lengthy to be shown in the main UI window.","lastModifiedDate":"2021-03-29"},{"lineNumber":343,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":344,"author":{"gitId":"marcusleeeugene"},"content":"Format: `view \u003cINDEX\u003e`","lastModifiedDate":"2021-03-17"},{"lineNumber":345,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":346,"author":{"gitId":"Donavanty"},"content":"Parameter:","lastModifiedDate":"2021-03-31"},{"lineNumber":347,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":348,"author":{"gitId":"marcusleeeugene"},"content":"1. The index of The Food Diary entry: `\u003cINDEX\u003e`","lastModifiedDate":"2021-04-07"},{"lineNumber":349,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":350,"author":{"gitId":"marcusleeeugene"},"content":"Example:","lastModifiedDate":"2021-03-17"},{"lineNumber":351,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":352,"author":{"gitId":"marcusleeeugene"},"content":"    view 1","lastModifiedDate":"2021-03-17"},{"lineNumber":353,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":354,"author":{"gitId":"marcusleeeugene"},"content":"![View Window UI](images/ViewWindowUi.png)","lastModifiedDate":"2021-03-31"},{"lineNumber":355,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":356,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### List all the FoodDiary entries : `list`","lastModifiedDate":"2021-03-31"},{"lineNumber":357,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":358,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Shows a list of all FoodDiary entries.","lastModifiedDate":"2021-03-31"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":360,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2021-03-31"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":362,"author":{"gitId":"marcusleeeugene"},"content":"Parameters: none","lastModifiedDate":"2021-04-04"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":364,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Example:","lastModifiedDate":"2021-03-31"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":366,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    list","lastModifiedDate":"2021-03-31"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":368,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Open Help Window : `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":369,"author":{"gitId":"Donavanty"},"content":"Opens up a window to show a condensed form of all the different commands,","lastModifiedDate":"2021-03-31"},{"lineNumber":370,"author":{"gitId":"Donavanty"},"content":" and parameters of the commands,","lastModifiedDate":"2021-03-31"},{"lineNumber":371,"author":{"gitId":"Donavanty"},"content":" that can be typed by the user in The Food Diary.","lastModifiedDate":"2021-03-31"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":373,"author":{"gitId":"Donavanty"},"content":"Format: `help`","lastModifiedDate":"2021-03-31"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":375,"author":{"gitId":"marcusleeeugene"},"content":"Parameters: none","lastModifiedDate":"2021-04-04"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":377,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Example:","lastModifiedDate":"2021-03-31"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":379,"author":{"gitId":"Donavanty"},"content":"    help","lastModifiedDate":"2021-03-31"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":381,"author":{"gitId":"Prabhakaran-Gokul"},"content":"![Help Window UI](images/HelpWindowUi.png)","lastModifiedDate":"2021-03-31"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":383,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Revise a specific FoodDiary entry `revise`","lastModifiedDate":"2021-03-31"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":385,"author":{"gitId":"marcusleeeugene"},"content":"Opens up a window, showing the existing details of a FoodDiary entry and allows for quick corrections and updates without","lastModifiedDate":"2021-04-04"},{"lineNumber":386,"author":{"gitId":"marcusleeeugene"},"content":"requiring the use of prefixes and command syntax in the UI. Mainly used to revise entry with many existing reviews as compared","lastModifiedDate":"2021-04-04"},{"lineNumber":387,"author":{"gitId":"marcusleeeugene"},"content":"to using the `edit` command.","lastModifiedDate":"2021-04-04"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":389,"author":{"gitId":"Donavanty"},"content":"Format: `revise \u003cINDEX\u003e`","lastModifiedDate":"2021-04-05"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":391,"author":{"gitId":"Donavanty"},"content":"Parameter:","lastModifiedDate":"2021-04-05"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":393,"author":{"gitId":"marcusleeeugene"},"content":"1. The index of FoodDiary entry: `\u003cINDEX\u003e`","lastModifiedDate":"2021-04-07"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":395,"author":{"gitId":"Donavanty"},"content":"Available Shortcut keys for fast typists:","lastModifiedDate":"2021-04-05"},{"lineNumber":396,"author":{"gitId":"Donavanty"},"content":"- `TAB` key to iterate through fields.","lastModifiedDate":"2021-04-05"},{"lineNumber":397,"author":{"gitId":"Donavanty"},"content":"- `Ctrl + S` (Windows) or `Command + S` (Mac) to save.","lastModifiedDate":"2021-04-05"},{"lineNumber":398,"author":{"gitId":"Donavanty"},"content":"- `ESC` key to quickly exit the revise window.","lastModifiedDate":"2021-04-05"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":400,"author":{"gitId":"Donavanty"},"content":"Note:","lastModifiedDate":"2021-04-05"},{"lineNumber":401,"author":{"gitId":"Donavanty"},"content":"- Price can be a value or a range e.g. `5` or `5-9`.","lastModifiedDate":"2021-04-05"},{"lineNumber":402,"author":{"gitId":"Donavanty"},"content":"- Leave a white-space between categories to separate them.","lastModifiedDate":"2021-04-05"},{"lineNumber":403,"author":{"gitId":"Donavanty"},"content":"- Leave a white-space between schools to separate them.","lastModifiedDate":"2021-04-05"},{"lineNumber":404,"author":{"gitId":"Donavanty"},"content":"- Leave a blank line to differentiate between each review.","lastModifiedDate":"2021-04-05"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":406,"author":{"gitId":"Donavanty"},"content":"Expected behaviour: Revise window will close, showing successful edit of entry in Main Window\u0027s command box.","lastModifiedDate":"2021-04-05"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":408,"author":{"gitId":"marcusleeeugene"},"content":"Unexpected behaviour: Revise window will close, showing an error message in Main Window\u0027s command box.","lastModifiedDate":"2021-04-07"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":410,"author":{"gitId":"marcusleeeugene"},"content":"Example:","lastModifiedDate":"2021-03-29"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":412,"author":{"gitId":"marcusleeeugene"},"content":"    revise 1","lastModifiedDate":"2021-03-29"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":414,"author":{"gitId":"marcusleeeugene"},"content":"![Revise Window UI](images/ReviseWindowUi.png)","lastModifiedDate":"2021-03-31"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":416,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Editing a specific FoodDiary entry `edit`","lastModifiedDate":"2021-03-31"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":418,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Edits the details of the FoodDiary entry specified. Existing values will be overwritten by the new values.","lastModifiedDate":"2021-03-31"},{"lineNumber":419,"author":{"gitId":"marcusleeeugene"},"content":"Mainly used if previous entry values do not matter in new edit.","lastModifiedDate":"2021-04-04"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":421,"author":{"gitId":"marcusleeeugene"},"content":"Format: `edit \u003cINDEX\u003e \u003cKEYWORD\u003e ...`","lastModifiedDate":"2021-04-07"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":423,"author":{"gitId":"Donavanty"},"content":"Parameters:","lastModifiedDate":"2021-04-05"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":425,"author":{"gitId":"Donavanty"},"content":"KEYWORD(s) of any number and sequence:","lastModifiedDate":"2021-04-05"},{"lineNumber":426,"author":{"gitId":"Donavanty"},"content":"1. To edit food place name: `[n/RESTAURANT NAME]`","lastModifiedDate":"2021-04-05"},{"lineNumber":427,"author":{"gitId":"Donavanty"},"content":"2. To edit rating: `[ra/RATING]`","lastModifiedDate":"2021-04-05"},{"lineNumber":428,"author":{"gitId":"Donavanty"},"content":"3. To edit price: `[p/PRICE]`","lastModifiedDate":"2021-04-05"},{"lineNumber":429,"author":{"gitId":"Donavanty"},"content":"4. To edit review: `[re/REVIEW]`","lastModifiedDate":"2021-04-05"},{"lineNumber":430,"author":{"gitId":"Donavanty"},"content":"5. To edit address: `[ra/ADDRESS]`","lastModifiedDate":"2021-04-05"},{"lineNumber":431,"author":{"gitId":"Donavanty"},"content":"6. To edit categories: `[c/CATEGORIES] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":432,"author":{"gitId":"Donavanty"},"content":"7. To edit school location catgeoris `[s/SCHOOL LOCATIONS] ...`","lastModifiedDate":"2021-04-05"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":434,"author":{"gitId":"Sidney011100"},"content":"Note:","lastModifiedDate":"2021-04-01"},{"lineNumber":435,"author":{"gitId":"Donavanty"},"content":"- Rating should be an integer between 0 and 5.","lastModifiedDate":"2021-04-05"},{"lineNumber":436,"author":{"gitId":"Donavanty"},"content":"- Price can be a value or a range e.g. `5` or `5-9`.","lastModifiedDate":"2021-04-05"},{"lineNumber":437,"author":{"gitId":"Donavanty"},"content":"- Address will not be checked if it is a valid location.","lastModifiedDate":"2021-04-05"},{"lineNumber":438,"author":{"gitId":"Donavanty"},"content":"- Categories and schools tags are stated in `add` command.","lastModifiedDate":"2021-04-05"},{"lineNumber":439,"author":{"gitId":"Donavanty"},"content":"- Note the syntax before each keyword.","lastModifiedDate":"2021-04-05"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":441,"author":{"gitId":"marcusleeeugene"},"content":"Example:","lastModifiedDate":"2021-03-31"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":443,"author":{"gitId":"marcusleeeugene"},"content":"    edit 1 ra/5 p/7 re/I like this food a lot! a/Science c/Indian c/Halal s/Ventus","lastModifiedDate":"2021-03-31"},{"lineNumber":444,"author":{"gitId":"Donavanty"},"content":"    edit 1 re/I like the chicken. re/ I like the rice.","lastModifiedDate":"2021-04-05"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Clear all entries `clear`","lastModifiedDate":"2021-03-31"},{"lineNumber":447,"author":{"gitId":"Sidney011100"},"content":"Clearing all entries from food diary.","lastModifiedDate":"2021-03-31"},{"lineNumber":448,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":449,"author":{"gitId":"Sidney011100"},"content":"Format: `clear`","lastModifiedDate":"2021-03-31"},{"lineNumber":450,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":451,"author":{"gitId":"marcusleeeugene"},"content":"Parameters: none","lastModifiedDate":"2021-04-04"},{"lineNumber":452,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":453,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### Exiting food diary `exit`","lastModifiedDate":"2021-03-31"},{"lineNumber":454,"author":{"gitId":"Sidney011100"},"content":"Close and exit the program.","lastModifiedDate":"2021-03-31"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":456,"author":{"gitId":"Sidney011100"},"content":"Format: `exit`","lastModifiedDate":"2021-03-31"},{"lineNumber":457,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":458,"author":{"gitId":"marcusleeeugene"},"content":"Parameters: none","lastModifiedDate":"2021-04-04"},{"lineNumber":459,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":460,"author":{"gitId":"Prabhakaran-Gokul"},"content":"------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-31"},{"lineNumber":461,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2021-03-31"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":463,"author":{"gitId":"DineshMagesvaran"},"content":"Q: How do I transfer my data to another Computer?","lastModifiedDate":"2021-03-31"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":465,"author":{"gitId":"Donavanty"},"content":"A: Download the latest version of The Food Diary app in the other computer,","lastModifiedDate":"2021-04-07"},{"lineNumber":466,"author":{"gitId":"Donavanty"},"content":"and overwrite the empty data file it creates with the file that","lastModifiedDate":"2021-04-07"},{"lineNumber":467,"author":{"gitId":"Donavanty"},"content":"contains the data of your previous Food Diary home folder. The image below shows the file directory to get the ","lastModifiedDate":"2021-04-07"},{"lineNumber":468,"author":{"gitId":"Donavanty"},"content":"`foodDiary.json` file, and where you should add it to if you would like the app to","lastModifiedDate":"2021-04-07"},{"lineNumber":469,"author":{"gitId":"Donavanty"},"content":"read from the new data. ","lastModifiedDate":"2021-04-07"},{"lineNumber":470,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":471,"author":{"gitId":"Sidney011100"},"content":"![Food Diary Json File Directory](images/FoodDiaryJsonFileDirectory.png)","lastModifiedDate":"2021-04-06"},{"lineNumber":472,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":473,"author":{"gitId":"marcusleeeugene"},"content":"-------------------------------------------------------------------------------------","lastModifiedDate":"2021-02-24"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Add**     | `add \u003cn/RESTAURANT NAME\u003e \u003cra/RATING\u003e \u003cp/PRICE\u003e \u003cre/REVIEW\u003e \u003ca/ADDRESS\u003e [c/CATEGORY]... [s/SCHOOL LOCATION]...` \u003cbr\u003e e.g. `add n/Al Amaan Restaurant ra/4 p/6 re/best for Butter Chicken a/12 Clementi Rd, Singapore 129742 c/Indian Muslim`","lastModifiedDate":"2021-04-06"},{"lineNumber":480,"author":{"gitId":"Donavanty"},"content":"**AddOn**   | `addon \u003cINDEX\u003e \u003cKEYWORD\u003e ...` \u003cbr\u003ee.g.`addon 1 re/I like this food a lot p/5`","lastModifiedDate":"2021-04-05"},{"lineNumber":481,"author":{"gitId":"marcusleeeugene"},"content":"**Delete**  | `delete \u003cINDEX\u003e` \u003cbr\u003e e.g. `delete 1`","lastModifiedDate":"2021-04-04"},{"lineNumber":482,"author":{"gitId":"marcusleeeugene"},"content":"**List**    | `list` \u003cbr\u003e e.g. `list`","lastModifiedDate":"2021-04-04"},{"lineNumber":483,"author":{"gitId":"marcusleeeugene"},"content":"**Find**    | `find \u003cKEYWORD\u003e ...` \u003cbr\u003e e.g. `find kfc`","lastModifiedDate":"2021-04-04"},{"lineNumber":484,"author":{"gitId":"marcusleeeugene"},"content":"**FindAll** | `findall \u003cKEYWORD\u003e ...` \u003cbr\u003e e.g. `findall clementi fastfood 5/5 $5-10`","lastModifiedDate":"2021-04-04"},{"lineNumber":485,"author":{"gitId":"marcusleeeugene"},"content":"**Help**    | `help` \u003cbr\u003e e.g. `help`","lastModifiedDate":"2021-04-04"},{"lineNumber":486,"author":{"gitId":"marcusleeeugene"},"content":"**View**    | `view \u003cINDEX\u003e` \u003cbr\u003e e.g. `view 1`","lastModifiedDate":"2021-04-04"},{"lineNumber":487,"author":{"gitId":"marcusleeeugene"},"content":"**Revise**  | `revise \u003cINDEX\u003e` \u003cbr\u003e e.g. `revise 1`","lastModifiedDate":"2021-04-04"},{"lineNumber":488,"author":{"gitId":"marcusleeeugene"},"content":"**Edit**    | `edit \u003cINDEX\u003e \u003cKEYWORD\u003e ...` \u003cbr\u003e e.g. `edit 1 ra/5 p/7 re/I like this food a lot! a/Science c/Indian c/Halal s/Ventus`","lastModifiedDate":"2021-04-07"},{"lineNumber":489,"author":{"gitId":"marcusleeeugene"},"content":"**Clear**   | `clear` \u003cbr\u003e e.g. `clear`","lastModifiedDate":"2021-04-04"},{"lineNumber":490,"author":{"gitId":"marcusleeeugene"},"content":"**Exit**    | `exit` \u003cbr\u003e e.g. `exit`","lastModifiedDate":"2021-04-04"},{"lineNumber":491,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-02-24"},{"lineNumber":492,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## Keyboard Shortcuts Summary","lastModifiedDate":"2021-03-31"},{"lineNumber":493,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":494,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Action | Keyboard Shortcut| Windows where Keyboard shortcut is available","lastModifiedDate":"2021-03-31"},{"lineNumber":495,"author":{"gitId":"Donavanty"},"content":":--------------------------------------------:|:------------------------------------------------:|:-------------:","lastModifiedDate":"2021-04-05"},{"lineNumber":496,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Exit/Close Window**                         | `ESC`   | Main Window, View Window, Revise Window, Help Window","lastModifiedDate":"2021-03-31"},{"lineNumber":497,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Open Help Window**                          | `F1`                                             | Main Window","lastModifiedDate":"2021-03-31"},{"lineNumber":498,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Skip through text fields in Revise Window** | `TAB`                                            | Revise Window","lastModifiedDate":"2021-03-31"},{"lineNumber":499,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**Save Changes in Revise Window**             | `Ctrl + S (Windows OS)` or `Command + S (macOS)` | Revise Window","lastModifiedDate":"2021-03-31"},{"lineNumber":500,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":501,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## Glossary","lastModifiedDate":"2021-03-31"},{"lineNumber":502,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":503,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Main Window:** The Window that appears when the application starts up","lastModifiedDate":"2021-03-31"},{"lineNumber":504,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **View Window:** The Window that appears when viewing a FoodDiary entry through the `view` command","lastModifiedDate":"2021-03-31"},{"lineNumber":505,"author":{"gitId":"marcusleeeugene"},"content":"- **Revise Window** The Window that appears when revising a FoodDairy entry through the `revise` command","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"marcusleeeugene":64,"Donavanty":208,"Sidney011100":31,"DineshMagesvaran":47,"-":97,"Prabhakaran-Gokul":58}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"marcusleeeugene"},"content":"    content: \"The Food Diary\";","lastModifiedDate":"2021-04-11"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"marcusleeeugene":1,"-":294}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePerson(p)","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(foodDiary)","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"Donavanty":1,"-":37}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"ecp -\u003e ec ++: index, editEntryDescriptor","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"Donavanty":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"title: Food Diary","lastModifiedDate":"2021-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-T14-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-T14-2/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-04-12"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T14-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-T14-2/tp)","lastModifiedDate":"2021-04-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"**FoodDiary is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* If you are interested in using FoodDiary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* If you are interested about developing FoodDiary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"marcusleeeugene":2,"Sidney011100":1,"-":13,"Prabhakaran-Gokul":3}},{"path":"docs/team/dineshmagesvaran.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"---","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"layout: page","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"title: Dinesh S/O Magesvaran\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"---","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"## Project: The Food Diary","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) and","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"packaged with a Graphical User Interface (GUI). The Food Diary caters to food-passionate NUS students who would ideally","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"benefit from keeping records of food options tasted in the vicinity of NUS. The Food Diary will allow students to save","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"time and effort when finding places to eat around the NUS vicinity.","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"The app is built upon an existing app AddressBook AB3, which is a desktop application used for teaching Software","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"Engineering Principles. It is written in Java and has about 10-15 kLoC.","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"* **Find Feature**: A modified version of the existing find command","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"    * What it does: The Find Command allows the user to search for Food Diary entries by providing keywords to find with","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"    * Justification: The existing find command only searched by the entry name, while the modified version searches","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"    through various entry fields, such as name, rating, price, address, categories \u0026 schools. The improved version","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    significantly improves the entire product, as there is more flexibility in finding for food options, and helps the","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"    user better manage a larger number of entries in the Food Diary","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    * Highlights: One of the specialities of this feature is the ability to search by price ranges. This was","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    significantly harder to implement than the other fields due to the complexity of handling ranges versus a simple","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    comparison. However, its implementation greatly improved the ability to perform more complex searches","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"      ","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"* **FindAll Feature**: A new command that implements a specialised version of the find command","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    * What it does: The FindAll Command allows the user to search for specific Food Diary entries by providing keywords","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    to find with, with an additional condition to the find command that all keywords must be present in the Food Diary","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    entry","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"    * Justification: The find command returns a Food Diary entry as a search result as long as any of the provided","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    keywords match successfully. This is useful when performing generic searches, but falls short when the user wants","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"    multiple keywords to be satisfied. The FindAll command improves the overall product, by greatly complimenting","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"    the existing find command to provide the user with more overall flexibility in the way they wish to search for","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"    food Diary entries","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"    * Highlights: The FindAll command also features the speciality of searching by price ranges","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"    ","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"* **Price Feature**: A new FoodDiary entry field","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"    * What it does: The price field enables users to store a price or price range for a particular food entry","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"    * Justification: As the target audience of the app are NUS students who are still studying, budget is an important","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"    concern for them when eating at various places. By introducing the ability for users to log the prices of the","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"    various food places, it significantly improves the product for the target audience as they can now make more","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"    informed choices regarding their budget when choosing for a place to eat at","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"    * Highlights: The price field can contain price ranges, which enables the user to store better price data for future","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"    reference","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"      ","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"* **Code Contributed**: [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dDineshMagesvaran\u0026tabRepo\u003dAY2021S2-CS2103-T14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update the details for the Find command","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update the details for the FindAll command","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update the description of the app","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update the FAQ","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"    ","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update the description of the app","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update the FindAll command details, Use Cases, User Stories","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"    * Update UML diagrams for FindAll command","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"  ","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"    * Helped maintain the issue tracker","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"    * Refactored parts of the code to fit the new product, with a focus on test code","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"    * Improved the error messages and tests across various parts of the code","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"  ","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"* **Mentoring Contributions**:","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"    * Reviewed PRs: [PRs Reviewed](https://github.com/AY2021S2-CS2103-T14-2/tp/pulls?q\u003dis%3Apr+commenter%3ADineshMagesvaran+)","lastModifiedDate":"2021-04-11"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"    * Gave suggestions to narrow down the target audience to be limited to NUS students","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"    * Gave suggestions to customise the app to specifically meet the needs of the target audience","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"      * Pre-populate the app with Food Diary entries of food places within NUS for the students to be better informed","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"        of the food options available to them","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"      * Add a new price field to help address the needs of students who tend to have limited budgets","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"DineshMagesvaran":79}},{"path":"docs/team/donavanty.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"---","lastModifiedDate":"2021-02-20"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"layout: page","lastModifiedDate":"2021-02-20"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"title: Donavan\u0027s Portfolio Page","lastModifiedDate":"2021-02-20"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"---","lastModifiedDate":"2021-02-20"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"## Project: The Food Diary","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"The Food Diary - The Food Diary is a desktop app for managing food diary entries,","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":" optimized with a Command Line Interface (CLI) and packaged with a Graphical User Interface (GUI) using JavaFX.","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":" It is written in Java, and has about 7.5k LoC.","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-02-20"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"* **UI**: Formatted the GUI, layout and colour scheme throughout the app","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"  * What was done: Improved the UI, layout of elements, and colour scheme to appeal to the usage and patronisation","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"  from NUS students.","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"  * Justification: The UI is pivotal in presenting to users information in a clear and readable manner, allowing them to","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"  interact with The Food Diary intuitively. Visual elements are not jarring or useless to the usage of the app.","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"  * Highlights: The UI theme is congruent throughout the different windows, in particular, the Main window, the Help","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"  window, the Revise window, and the View Window, are themed accordingly.","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"  The implementation required thorough trial and error to get the theme and feel of the UI right,","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"  as well as synchronise it across the different windows that can be opened in the app.","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"* **Overall Code Quality and Refactoring**: Refactored the codebase to fit to the functionality of The Food Diary.","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"  * What was done: All packages, classes, and methods have been refactored to be logical and congruent with the semantics","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"  and business logic of how a Food Diary should be operated on.","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"  Also, ensured the overall code quality of new functionalities added.","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"  * Justification: Inheriting a codebase and customising the code to fit the business logic of our product is essential","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"  for the seamless and logical continuation of development by us or other developers.","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"  * Highlights: No trace of the previous app implementation remains, and classes have been designed to make logical","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"  sense to the operations of a Food Diary. Each entry features a restaurant name, rating, price, address, review and tags.","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"* **Help Window**: Dedicated a resizable window for the Help guide that users can have local access to on the app.","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"  * What was done: Implemented a separate window that contains a succint help guide with examples for users to","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"  conveniently access and learn what and how each perform performs.","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"  * Justification: Having access to a help guide while using the app allows new users (and testers) to quickly comprehend","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"  the set of features in the app.","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"  * Highlights: The help guide features 3 main sections: A succint list of commands, all options for Food categories,","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"  and for School Location categories. The information provided is presented neatly, and a url to the full user guide","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"  is provided to users for users to get the complete guide.","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003ddonavan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-02-19)","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"* **Project management**:","lastModifiedDate":"2021-02-20"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2021-02-20"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"  * Refactored the code base","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"  * Enhanced the Help Window","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2021-02-20"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"* **Documentation**:","lastModifiedDate":"2021-02-20"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"  * User Guide:","lastModifiedDate":"2021-02-20"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"    * Added a section pertaining to the explanation of the User Interface to users","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"    * Neatened the syntax and presentation of each feature and the corresponding command to make it consistent with the","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"    usage of the command in our app.","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"    * Explained the rationale of each feature and function very clearly.","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"  * Developer Guide:","lastModifiedDate":"2021-02-20"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"    * Added implementation details of the `edit` and `help` feature.","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"* **Community**:","lastModifiedDate":"2021-02-20"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2021-02-20"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2021-02-20"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2021-02-20"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2021-02-20"}],"authorContributionMap":{"Donavanty":65}},{"path":"docs/team/marcusleeeugene.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"---","lastModifiedDate":"2021-04-04"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"layout: page","lastModifiedDate":"2021-04-04"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"title: Marcus Lee Eugene\u0027s Project Portfolio Page","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"---","lastModifiedDate":"2021-04-04"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"## Project: The Food Diary","lastModifiedDate":"2021-04-04"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"The Food Diary - The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) and packaged with a Graphical User Interface (GUI) using JavaFX. It is written in Java, and has about 8.5k LoC.","lastModifiedDate":"2021-04-11"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-04-04"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"* **Revise Feature**: Added the ability to allow users to quickly make corrections to existing data in the UI with shortcut keys.","lastModifiedDate":"2021-04-11"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    * What it does: Opens up a window, showing the existing details of a FoodDiary entry and allows for quick corrections and updates without requiring the use of prefixes and command syntax in the UI.","lastModifiedDate":"2021-04-04"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    * Justification: This feature improves the product significantly because a user can make corrections to existing data quickly, without losing previous entry details.","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    * Implementation: The revise feature is built upon the existing Edit command. When the user enters the revise command, ","lastModifiedDate":"2021-04-11"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"      The Food Diary will get the specified entry from the model\u0027s `getFilteredEntryList()`. Then it will pass the entry to command result ","lastModifiedDate":"2021-04-11"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"      in the `MainWindow.java`. From there, `MainWindow#handleRevise` will execute and `ReviseWindow.java` will project the ","lastModifiedDate":"2021-04-11"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"      details of the entry into a pop up window for revision. Upon revise completion, edit command will be executed and changes will ","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"      be updated. There are some codes in place which allows for the TAB, ESC and Ctrl-S / Command-S key to be used to quickly iterate ","lastModifiedDate":"2021-04-11"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"      through text fields, close the window and save revisions respectively.","lastModifiedDate":"2021-04-11"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    * Pull requests: [#96](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/96), [#100](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/100), [#103](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/103), [#184](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/184)","lastModifiedDate":"2021-04-11"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"* **View Feature**: Added the ability to allow users to open an expanded view for entries that are very lengthy.","lastModifiedDate":"2021-04-11"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    * What it does: Opens up a window, showing the details of a specified FoodDiary entry in a full expanded view. Allows the user to read through reviews that are too lengthy to be shown in the main UI window.","lastModifiedDate":"2021-04-04"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    * Justification: This feature allows users to view entry reviews that are too lengthy to be shown in the entry card. All the data are projected onto the view window UI and also separates reviews within the entry for easier view.","lastModifiedDate":"2021-04-04"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    * Implementation: When the user enters the view command, The Food Diary will get the specified entry from the model\u0027s `getFilteredEntryList()`. Then it will pass the entry to command result","lastModifiedDate":"2021-04-11"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"      in the `MainWindow.java`. From there, `MainWindow#handleView` will execute and `ReviseWindow.java` will project the","lastModifiedDate":"2021-04-11"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"      details of the entry into a pop up window for view.","lastModifiedDate":"2021-04-11"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    * Pull requests: [#68](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/68), [#76](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/76), [#87](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/87), [#93](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/93)","lastModifiedDate":"2021-04-11"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    ","lastModifiedDate":"2021-04-04"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dmarcusleeeugene\u0026tabRepo\u003dAY2021S2-CS2103-T14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-04-04"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"* **Project management**:","lastModifiedDate":"2021-04-04"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    * Managed releases `v1.2.1`, `v1.3.0` and `v1.4.0` (3 releases) on GitHub","lastModifiedDate":"2021-04-04"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    * Tracked team\u0027s tasks using project board and setting deadlines","lastModifiedDate":"2021-04-04"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-04-11"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"* **Documentation**:","lastModifiedDate":"2021-04-04"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"    * User Guide:","lastModifiedDate":"2021-04-04"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        * Added documentation for `revise`, `view` and `edit`","lastModifiedDate":"2021-04-11"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        * Product description","lastModifiedDate":"2021-04-10"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    * Developer Guide:","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        * Implementation and design considerations for `view`","lastModifiedDate":"2021-04-11"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        * Design considerations for `revise`","lastModifiedDate":"2021-04-11"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        * Added component details for the Model architecture","lastModifiedDate":"2021-04-04"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        * Added command details and user stories for the features `view`, `clear`, `revise`","lastModifiedDate":"2021-04-04"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        * Instructions for manual testing: View an entry, Clear all entries","lastModifiedDate":"2021-04-11"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2021-04-04"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    * Set up Github team repo","lastModifiedDate":"2021-04-04"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    * Set up Github actions","lastModifiedDate":"2021-04-04"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    * Maintain issue tracker","lastModifiedDate":"2021-04-04"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    * Release management","lastModifiedDate":"2021-04-04"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    * Merged pull requests","lastModifiedDate":"2021-04-04"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"    * Refactored model, logic and test codes from AB3 to fit FoodDiary","lastModifiedDate":"2021-04-10"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    * Worked on Revise and View features and UI enhancements","lastModifiedDate":"2021-04-11"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2021-04-04"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"    * Helped the person in charge of merging, with resolving conflicts","lastModifiedDate":"2021-04-10"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"    * PRs reviewed:","lastModifiedDate":"2021-04-04"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"      ","lastModifiedDate":"2021-04-10"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"      [#189](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/189), ","lastModifiedDate":"2021-04-10"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"      [#185](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/185),","lastModifiedDate":"2021-04-10"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"      [#114](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/114),","lastModifiedDate":"2021-04-10"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"      [#102](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/102),","lastModifiedDate":"2021-04-10"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"      [#98](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/98),","lastModifiedDate":"2021-04-10"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"      [#97](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/97),","lastModifiedDate":"2021-04-10"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"      [#86](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/86),","lastModifiedDate":"2021-04-10"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"      [#84](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/84),","lastModifiedDate":"2021-04-10"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"      [#83](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/83),","lastModifiedDate":"2021-04-10"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"      [#82](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/82),","lastModifiedDate":"2021-04-10"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"      [#78](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/78),","lastModifiedDate":"2021-04-10"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"      [#75](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/75),","lastModifiedDate":"2021-04-10"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"      [#67](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/67),","lastModifiedDate":"2021-04-10"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"      [#66](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/66),","lastModifiedDate":"2021-04-10"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"      [#65](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/65), ","lastModifiedDate":"2021-04-10"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"      [#55](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/55),","lastModifiedDate":"2021-04-10"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"      [#44](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/44), ","lastModifiedDate":"2021-04-10"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"      [#26](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/26),","lastModifiedDate":"2021-04-10"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"      [#21](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/21), ","lastModifiedDate":"2021-04-10"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"      [#17](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/17), ","lastModifiedDate":"2021-04-10"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"      [#1](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/1)","lastModifiedDate":"2021-04-10"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"      ","lastModifiedDate":"2021-04-04"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2021-04-04"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"    * Shared approach to using enums for individual project [#14](https://github.com/nus-cs2103-AY2021S2/forum/issues/14)","lastModifiedDate":"2021-04-04"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"    * Helped user who faced difficulties in opening jar file due to java version [#158](https://github.com/nus-cs2103-AY2021S2/forum/issues/158)","lastModifiedDate":"2021-04-04"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"}],"authorContributionMap":{"marcusleeeugene":94}},{"path":"docs/team/prabhakaran-gokul.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"### The Food Diary Project","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"#### About the project","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- The Food Diary is a desktop app for managing food diary entries, optimized with a Command Line Interface (CLI) and packaged with a Graphical User Interface (GUI).","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-02-21"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food options tasted in the vicinity of NUS.","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- The Food Diary will allow students to save time and effort when finding places to eat around the NUS vicinity.","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"#### My Contributions to the project","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Code Contributed:** [RepoSense Link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dPrabhakaran-Gokul\u0026tabRepo\u003dAY2021S2-CS2103-T14-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse)","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Enhancements implemented:**","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Add On command","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        - This command Allows users to quickly add on parameters like Price and Reviews to existing","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"          Food Diary Entries.","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        - Previously reviews and prices cannot be added to a Food Diary Entry (e.g. KFC) With this add on command,","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"          users are able to add multiple reviews and a price range easily, without have to delete and add a brand new entry","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Refactored the Food Diary entries to contain multiple reviews instead of being restricted to a single review","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Added a price range to the Food Diary entries","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Contributions to User Guide:**","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - AddOn command details","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Keyboard Shortcuts Summary ","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Glossary","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Contributions to Developer Guide:**","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Addon Command Use Case and UML diagrams","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Addon Command implementation details","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Add Command Use Case","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Contributions to Team based tasks:**","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Helped out in setting up GitHub Team Repo","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Solve merge conflicts and merge most of the pull requests","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Refactor model and test codes from AB3 to fit FoodDiary","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Mentoring Contributions:**","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - [Reviewed Pull Requests](https://github.com/AY2021S2-CS2103-T14-2/tp/pulls?q\u003dis%3Apr+commenter%3APrabhakaran-Gokul+)","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Helped team members with github merging, forking workflow and git terminal commands","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Suggested an elegant way to implement the revise command feature, without breaking the current architecture of the ","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    application","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"- **Contributions beyond the project team:**","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Helped user with issues opening jar file due to java version [#158](https://github.com/nus-cs2103-AY2021S2/forum/issues/158)","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Helped user who was failing some test cases when following the AB3 tutorial [#160](https://github.com/nus-cs2103-AY2021S2/forum/issues/160)","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    - Shared my recommendations for handling large text in sequence diagrams [#258](https://github.com/nus-cs2103-AY2021S2/forum/issues/258)","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"Prabhakaran-Gokul":41}},{"path":"docs/team/sidney011100.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Sidney011100"},"content":"---","lastModifiedDate":"2021-02-20"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"layout: page","lastModifiedDate":"2021-02-20"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"title: Sidney011100\u0027s Project Portfolio Page","lastModifiedDate":"2021-02-20"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"---","lastModifiedDate":"2021-02-20"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"## Project: Food Diary","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"The Food Diary caters to food-passionate NUS students who would ideally benefit from keeping records of food options tasted in the vicinity of NUS. The Food Diary has pre-set data that will allow students to save time and effort when finding places to eat around the NUS vicinity.","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-02-20"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-02-20"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"* **New Feature 1**: Allowed a user to add the Category of their food place in Food Diary.","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    * The Category are restricted to a certain set using enum so that the users will not misuse the application.* A tagCateogry class was implemented to inherit from Tag so that the class tag can be reused for other instances.","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    * The Category are placed in presentable tags for better UI. The color of these category tags were","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"        changes to blue to fit with the NUS color theme.","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"    * The feature is complete as many food categories that were available in NUS are accounted for.","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"        Moreover, the error message thrown clearly states to users what are the acceptable categories.","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"    * The most challenging part of this was accounting for all testcases that were made previously.","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"        The changes made from the previous code in AB3 involved the Tag class that was replaced with these tag categories.","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"        Many other aspects had to be accounted for too, e.g previous Storage in various Json files.","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"* **New Feature 2**: Giving Food Diary the NUS context by allowing them to tag a food place by School.","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"    * The additional implementation of this brought about a lot of changes to the implemented Tag class","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"      that was initially used for Categories.","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"      This taught the lesson for the need of abstraction so that classes can be reused.","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"    * Apart from the revamp of previously implemented Tag class to Tag Category,","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"      the other challenges faced were similar to during the implementation of Categories.","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"    * The feature is complete as all buildings with eateries have been added to the application.","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    * The enhancement was set to orange to be on the same theme as NUS colors.","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"    * The feature is meant to set the NUS context; Thus, no additional schools are allowed to be added.","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"      The restriction was implemented via the use of an enum class.","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsidney011100 )","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"* **Enhancements to existing features**: Giving Food Diary the NUS context by populating the preset data to eateries in NUS.","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"    * This involved finding food places all around NUS as a group.","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"    * The challenge was putting them into storage. This was tedious as every food place was an entry that","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"      required the different sections, for example, review, categories and name, to be encapsulated into its own object.","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"      This was done to ensure none of the preset entries violated the restrictions set by our application.","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"* **Enhancements to Presentation of product**:","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"    * This was challenging as it involved understanding every component clearly. It was a valuable learning","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"      experience of JavaFx to know which components were responsible for the different aspects of the application.","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"      The clear knowledge was required to meet the goal of the expected UI.","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"* **Documentation in User Guide**:","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"    * Format User Guide.","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"    * Added in different Schools and Categories that a user can add by alphabetical order.","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"    * Included implementations of some commands.","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"    * After Practical Examination Dry Run, handled all the enhancements and issues with respect to User Guide.","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"    * This involved replicating different commands in the application to insert screenshot from the finalized application.","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"* **Documentation in Developer Guide**:","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"    * Format Developer Guide so that it is standardized for team members and they know where to insert their allocated sections.","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"    * Build Diagrams for Architecture Diagram and Architecture Sequence Diagram.","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"    * Build Logic Class Diagram.","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"    * Added in Revise Activity and Sequence Diagrams.","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"    * Inserted different use cases for List, Parse and Exit commands.","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"Sidney011100"},"content":"    * Revised Developer Guide while bringing up different Use Cases for team members to discuss and see where some Use Cases (e.g add Category) will be most fitting in.","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"* **Contributions to Team-Based Tasks**:","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"Sidney011100"},"content":"    1.\tSetting up the GitHub team org/repo","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"Sidney011100"},"content":"    2.\tNecessary general code enhancements:","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"        * Removing Address Book from the code.","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"        * Coming up with Food Diary Logo.","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"        * Setting up Figma for teammates to share with a fix set of templates with for the different diagrams to standardise our diagrams.","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"    3.\tMaintaining the issue tracker","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"Sidney011100"},"content":"          -\tTagging the issues with correct milestones and assignees.","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"    4.\tClosing our milestone v1.3 before the deadline.","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"    5.\tUpdating user/developer docs that are not specific to a feature e.g. documenting the target user profile","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"* **Reviewing Contributions**:","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"Sidney011100"},"content":"    * [Pull Request #15](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/15)","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"    * [Pull Request #32](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/32)","lastModifiedDate":"2021-04-07"},{"lineNumber":83,"author":{"gitId":"Sidney011100"},"content":"    * [Pull Request #83](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/83)","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"Sidney011100"},"content":"    * [Pull Request #187](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/186)","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"Sidney011100"},"content":"    * [Pull Request #190](https://github.com/AY2021S2-CS2103-T14-2/tp/pull/190)","lastModifiedDate":"2021-04-07"},{"lineNumber":86,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"Sidney011100"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"Sidney011100"},"content":"    * Took notes of the bugs I have identified during the testing of our team project. Tested the same bugs during PED for the other group, to share my learning.","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"Sidney011100"},"content":"    * Group for PED: T12-2, number of bugs reported: 13.","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"Sidney011100":91}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"import Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":" * Changes the remark of an existing entry in the address book.","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the entry identified \"","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"            + \"by the index number used in the last entry listing. \"","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"     * @param index of the entry in the filtered entry list to edit the remark","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"     * @param remark of the entry to be updated to","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"Donavanty"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of entry data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the entry’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a entry.","lastModifiedDate":"2021-03-17"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"Donavanty"},"content":"Create a new `Remark` in `seedu.address.model.entry`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2021-03-17"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"Donavanty"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each entry.","lastModifiedDate":"2021-03-17"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"Donavanty"},"content":"Simply add the following to [`PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-03-17"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"Donavanty"},"content":"public PersonCard(Person entry, int displayedIndex) {","lastModifiedDate":"2021-03-17"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"Donavanty"},"content":"    remark.setText(entry.getRemark().value);","lastModifiedDate":"2021-03-17"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"Donavanty"},"content":"        Person entryToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":344,"author":{"gitId":"Donavanty"},"content":"        Person editedEntry \u003d new Person(entryToEdit.getName(), entryToEdit.getPhone(), entryToEdit.getEmail(),","lastModifiedDate":"2021-03-17"},{"lineNumber":345,"author":{"gitId":"Donavanty"},"content":"                entryToEdit.getAddress(), remark, entryToEdit.getTags());","lastModifiedDate":"2021-03-17"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"Donavanty"},"content":"        model.setPerson(entryToEdit, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"Donavanty"},"content":"        return new CommandResult(generateSuccessMessage(editedEntry));","lastModifiedDate":"2021-03-17"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"Donavanty"},"content":"     * {@code entryToEdit}.","lastModifiedDate":"2021-03-17"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"Donavanty"},"content":"    private String generateSuccessMessage(Person entryToEdit) {","lastModifiedDate":"2021-03-17"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"Donavanty"},"content":"        return String.format(message, entryToEdit);","lastModifiedDate":"2021-03-17"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"Donavanty":22,"-":372}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"The `address` field in `Person` is actually an instance of the `Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"\u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" /\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"  \"entries\": [ {","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"9482424\",","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":2,"-":99}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base.","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `fooddiary.ui.CommandBox.CommandExecutor`.","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it.","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"Donavanty"},"content":"       Person entryToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":156,"author":{"gitId":"Donavanty"},"content":"       Person editedEntry \u003d createEditedPerson(entryToEdit, editEntryDescriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"Donavanty"},"content":"       if (!entryToEdit.isSamePerson(editedEntry) \u0026\u0026 model.hasPerson(editedEntry)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"Donavanty"},"content":"       model.setPerson(entryToEdit, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"Donavanty"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedEntry));","lastModifiedDate":"2021-03-17"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"Donavanty"},"content":"       entries.addAll(","lastModifiedDate":"2021-03-17"},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Donavanty":7,"-":243}},{"path":"gradle/wrapper/gradle-wrapper.properties","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"#Wed Mar 17 19:53:08 SGT 2021","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"-"},"content":"distributionBase\u003dGRADLE_USER_HOME","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"distributionPath\u003dwrapper/dists","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"zipStorePath\u003dwrapper/dists","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"zipStoreBase\u003dGRADLE_USER_HOME","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"Donavanty":3,"-":3}},{"path":"src/main/java/fooddiary/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.FileUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"Donavanty":3,"-":61}},{"path":"src/main/java/fooddiary/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"Donavanty":5,"-":20}},{"path":"src/main/java/fooddiary/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Config;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Version;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.ConfigUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.Logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.LogicManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.FoodDiaryStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.JsonFoodDiaryStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.Storage;","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.StorageManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.UserPrefsStorage;","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"import fooddiary.ui.Ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"import fooddiary.ui.UiManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FoodDiary ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"        FoodDiaryStorage foodDiaryStorage \u003d new JsonFoodDiaryStorage(userPrefs.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"        storage \u003d new StorageManager(foodDiaryStorage, userPrefsStorage);","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s food diary and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"     * The data from the sample food diary will be used instead if {@code storage}\u0027s food diary is not found,","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"     * or an empty food diary will be used instead if errors occur when reading {@code storage}\u0027s food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"        Optional\u003cReadOnlyFoodDiary\u003e foodDiaryOptional;","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"        ReadOnlyFoodDiary initialData;","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"            foodDiaryOptional \u003d storage.readFoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"            if (!foodDiaryOptional.isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"                logger.info(\"Data file not found. Will be starting with a sample FoodDiary\");","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"            initialData \u003d foodDiaryOptional.orElseGet(SampleDataUtil::getSampleFoodDiary);","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty FoodDiary\");","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"            initialData \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"Donavanty"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodDiary\");","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"Donavanty"},"content":"            initialData \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"Donavanty"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty FoodDiary\");","lastModifiedDate":"2021-03-17"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"Donavanty"},"content":"        logger.info(\"Starting FoodDiary \" + MainApp.VERSION);","lastModifiedDate":"2021-03-17"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"Donavanty"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Food Diary ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-17"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":43,"-":139}},{"path":"src/main/java/fooddiary/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":62}},{"path":"src/main/java/fooddiary/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":78}},{"path":"src/main/java/fooddiary/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"    private static final String LOG_FILE \u003d \"fooddiary.log\";","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":2,"-":110}},{"path":"src/main/java/fooddiary/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.AddCommand.MAX_NO_OF_ENTRIES_ALLOWED;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS \u003d \"The entry index provided \"","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"is out of bounds as Food Diary can only contain up to \" + MAX_NO_OF_ENTRIES_ALLOWED + \" entries. \"","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"(Index Bounds: 1 to \" + MAX_NO_OF_ENTRIES_ALLOWED + \" Inclusive)\";","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL \u003d \"The entry index provided is invalid as \"","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"the currently displayed list only contains %1$d entries\";","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR \u003d \"The entry index provided is invalid as\"","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"            + \" the currently displayed list only contains 1 entry\";","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_ENTRIES_LISTED_OVERVIEW \u003d \"%1$d entry/entries listed.\";","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION \u003d \"%1$d entry/entries listed.\\n%2$s\";","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    //suggestion messages for search features","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String SUGGESTION_MESSAGE_EMPTY \u003d \"\";","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String SUGGESTION_MESSAGE_FOR_RATING \u003d \"Suggestion: One or more of the keywords provided \"","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"closely resembles a search for ratings. Ratings need to be of the form \u0027INTEGER/5\u0027, where the integer \"","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"can be from 0 to 5 both inclusive.\";","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String SUGGESTION_MESSAGE_FOR_PRICE \u003d \"Suggestion: One or more of the keywords provided \"","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"closely resembles a search for prices. Prices need to be of the form \u0027$INTEGER\u0027 or \u0027$INTEGER-INTEGER\u0027, \"","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"where the integers can be from 0 to 999 inclusive.\";","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String SUGGESTION_MESSAGE_FOR_RATING_AND_PRICE \u003d \"Suggestion: Two or more of the keywords \"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"provided closely resembles searches for ratings and prices. Ratings need to be of the form \u0027INTEGER/5\u0027, \"","lastModifiedDate":"2021-03-31"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"where the integer can be from 0 to 5 both inclusive. Prices need to be of the form \u0027$INTEGER\u0027 or \"","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"\u0027$INTEGER-INTEGER\u0027, where the integers can be from 0 to 999 inclusive.\";","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":1,"DineshMagesvaran":23,"-":10}},{"path":"src/main/java/fooddiary/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":115}},{"path":"src/main/java/fooddiary/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core.index;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Donavanty":1,"-":53}},{"path":"src/main/java/fooddiary/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":10}},{"path":"src/main/java/fooddiary/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":1,"-":20}},{"path":"src/main/java/fooddiary/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.MainApp;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Donavanty":2,"-":40}},{"path":"src/main/java/fooddiary/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":1,"-":34}},{"path":"src/main/java/fooddiary/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Config;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":3,"-":20}},{"path":"src/main/java/fooddiary/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":82}},{"path":"src/main/java/fooddiary/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":4,"-":141}},{"path":"src/main/java/fooddiary/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":3,"-":64}},{"path":"src/main/java/fooddiary/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"     * Returns the FoodDiary.","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"     * @see Model#getFoodDiary()","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"    ReadOnlyFoodDiary getFoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"    /** Returns an unmodifiable view of the filtered list of entries */","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"    ObservableList\u003cEntry\u003e getFilteredEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"     * Returns the user prefs\u0027 food diary file path.","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"    Path getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Donavanty":16,"-":36}},{"path":"src/main/java/fooddiary/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.FoodDiaryParser;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.Storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    private final FoodDiaryParser foodDiaryParser;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        foodDiaryParser \u003d new FoodDiaryParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"        Command command \u003d foodDiaryParser.parseCommand(commandText);","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"            storage.saveFoodDiary(model.getFoodDiary());","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"    public ReadOnlyFoodDiary getFoodDiary() {","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"        return model.getFoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"    public ObservableList\u003cEntry\u003e getFilteredEntryList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        return model.getFilteredEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"    public Path getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"        return model.getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Donavanty":23,"-":58}},{"path":"src/main/java/fooddiary/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.CliSyntax;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":" * Adds a person to the food diary.","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final int MAX_NO_OF_ENTRIES_ALLOWED \u003d 1000000;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new entry to the food diary.\\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_RATING + \"RATING \"","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"            + CliSyntax.PREFIX_PRICE + \"PRICE \"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_REVIEW + \"REVIEW \"","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"            + \"[\" + CliSyntax.PREFIX_TAG_CATEGORY + \"TAG]... \"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"            + \"[\" + CliSyntax.PREFIX_TAG_SCHOOL + \"TAG]...\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"            + CliSyntax.PREFIX_NAME + \"Subway \"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_RATING + \"5 \"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"            + CliSyntax.PREFIX_PRICE + \"6 \"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_REVIEW + \"I like this food a lot! \"","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"            + CliSyntax.PREFIX_ADDRESS + \"3155 Commonwealth Ave W, Singapore 129588 \"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"            + CliSyntax.PREFIX_TAG_CATEGORY + \"FastFood \"","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"            + CliSyntax.PREFIX_TAG_CATEGORY + \"Vegan \"","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"            + CliSyntax.PREFIX_TAG_SCHOOL + \"SOC\";","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New entry added: %1$s\";","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the food diary\";","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_ENTRY_LIMIT_REACHED \u003d \"Food Diary has reached the maximum limit of \"","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"            + MAX_NO_OF_ENTRIES_ALLOWED + \". Remove some existing entries to make space for more entries\";","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"    private final Entry toAdd;","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"     * Creates an AddCommand to add the specified {@code Entry}","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"    public AddCommand(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        toAdd \u003d entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        if (model.hasEntry(toAdd)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"        if (model.getFoodDiary().getEntryList().size() \u003e\u003d MAX_NO_OF_ENTRIES_ALLOWED) {","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(MESSAGE_ENTRY_LIMIT_REACHED);","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        model.addEntry(toAdd);","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":18,"Sidney011100":5,"DineshMagesvaran":15,"-":35,"Prabhakaran-Gokul":1}},{"path":"src/main/java/fooddiary/logic/commands/AddOnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.model.Model.PREDICATE_SHOW_ALL_ENTRIES;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.model.entry.Price.PRICE_RANGE_DASH;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.parser.CliSyntax;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Add-on details to an existing entry in the FoodDiary.","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class AddOnCommand extends Command {","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String COMMAND_WORD \u003d \"addon\";","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds-on details of the entry identified \"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"by the index number used in the displayed entry list. \"","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"Existing values will be added on to the input values.\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"[\" + CliSyntax.PREFIX_REVIEW + \"REVIEW] \"","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"[\" + CliSyntax.PREFIX_PRICE + \"PRICE]\\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + CliSyntax.PREFIX_REVIEW + \"I like this food a lot! \"","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            + CliSyntax.PREFIX_PRICE + \"5\";","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_ADDON_TO_ENTRY_SUCCESS \u003d \"Added on to entry: %1$s\";","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_NOT_ADDED_ON \u003d \"At least one field to add-on must be provided.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddOnCommand.class);","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final Index index;","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final AddOnToEntryDescriptor addOnToEntryDescriptor;","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param index of the entry in the filtered entry list to edit","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param addOnToEntryDescriptor details to add on to entry with","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnCommand(Index index, AddOnToEntryDescriptor addOnToEntryDescriptor) {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(addOnToEntryDescriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.addOnToEntryDescriptor \u003d new AddOnToEntryDescriptor(addOnToEntryDescriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size() \u0026\u0026 lastShownList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"                    lastShownList.size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Entry entryToAddOn \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Entry updatedEntry \u003d createUpdatedEntry(entryToAddOn, addOnToEntryDescriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!addOnToEntryDescriptor.isAnyFieldAddedOn()) {","lastModifiedDate":"2021-04-05"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(MESSAGE_NOT_ADDED_ON);","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!entryToAddOn.isSameEntry(updatedEntry) \u0026\u0026 model.hasEntry(updatedEntry)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        model.setEntry(entryToAddOn, updatedEntry);","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new CommandResult(String.format(MESSAGE_ADDON_TO_ENTRY_SUCCESS, updatedEntry));","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Creates and returns a {@code Entry} with the details of {@code entryToEdit}","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static Entry createUpdatedEntry(Entry entryToAddOn, AddOnToEntryDescriptor addOnToEntryDescriptor) {","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert entryToAddOn !\u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Name updatedName \u003d entryToAddOn.getName(); //cannot add on name","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Rating updatedRating \u003d entryToAddOn.getRating();","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Price updatedPrice \u003d entryToAddOn.getPrice();","lastModifiedDate":"2021-03-28"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (addOnToEntryDescriptor.getPrice().isPresent()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            updatedPrice \u003d updatePrice(updatedPrice, addOnToEntryDescriptor.getPrice().get());","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cReview\u003e updatedReviews \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        updatedReviews.addAll(entryToAddOn.getReviews());","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        addOnToEntryDescriptor.getReviews().ifPresent(r -\u003e updatedReviews.addAll(r));","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        logger.fine(\"Added additional Review\");","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Address updatedAddress \u003d entryToAddOn.getAddress();","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e updatedTagCategories \u003d entryToAddOn.getTagCategories();","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagSchool\u003e updatedTagSchools \u003d entryToAddOn.getTagSchools();","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":121,"author":{"gitId":"Sidney011100"},"content":"        return new Entry(updatedName, updatedRating, updatedPrice, updatedReviews,","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"Sidney011100"},"content":"                updatedAddress, updatedTagCategories, updatedTagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":124,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static Price updatePrice(Price currentPrice, Price priceToAddOn) {","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String[] priceValues \u003d currentPrice.value.split(PRICE_RANGE_DASH);","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert priceValues.length \u003d\u003d 2 || priceValues.length \u003d\u003d 1","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                : \"Expected Price values to contain minimum 1 value or maximum two values\";","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String updatedPriceValue;","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (priceValues.length \u003d\u003d 1) {","lastModifiedDate":"2021-03-28"},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            updatedPriceValue \u003d createPriceRange(priceValues, priceToAddOn.value);","lastModifiedDate":"2021-03-28"},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            updatedPriceValue \u003d updatePriceRange(priceValues, priceToAddOn.value);","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Price(updatedPriceValue);","lastModifiedDate":"2021-03-28"},{"lineNumber":138,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    //TODO add function to format price range","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static String createPriceRange(String[] priceValues, String priceValueToAddOn) {","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String priceRange;","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert priceValues.length \u003d\u003d 1;","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (Integer.parseInt(priceValues[0]) \u003d\u003d Integer.parseInt(priceValueToAddOn)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            priceRange \u003d priceValueToAddOn;","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (Integer.parseInt(priceValues[0]) \u003c Integer.parseInt(priceValueToAddOn)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            priceRange \u003d priceValues[0] + PRICE_RANGE_DASH + priceValueToAddOn;","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            priceRange \u003d priceValueToAddOn + PRICE_RANGE_DASH + priceValues[0];","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return priceRange;","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static String updatePriceRange(String[] priceValues, String priceValueToAddOn) {","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String priceRange;","lastModifiedDate":"2021-03-28"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert priceValues.length \u003d\u003d 2;","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String firstPriceValue \u003d priceValues[0];","lastModifiedDate":"2021-03-28"},{"lineNumber":158,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String secondPriceValue \u003d priceValues[1];","lastModifiedDate":"2021-03-28"},{"lineNumber":159,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (Integer.parseInt(priceValueToAddOn) \u003c Integer.parseInt(firstPriceValue)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            priceRange \u003d priceValueToAddOn + PRICE_RANGE_DASH + Integer.parseInt(secondPriceValue);","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (Integer.parseInt(priceValueToAddOn) \u003e Integer.parseInt(secondPriceValue)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":162,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            priceRange \u003d Integer.parseInt(firstPriceValue) + PRICE_RANGE_DASH + priceValueToAddOn;","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":164,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            priceRange \u003d firstPriceValue + PRICE_RANGE_DASH + secondPriceValue;","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":166,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return priceRange;","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":170,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-23"},{"lineNumber":171,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-23"},{"lineNumber":172,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-23"},{"lineNumber":173,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return true;","lastModifiedDate":"2021-03-23"},{"lineNumber":174,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":175,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":176,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":177,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":178,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return false;","lastModifiedDate":"2021-03-23"},{"lineNumber":179,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":180,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":181,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":182,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        AddOnCommand e \u003d (AddOnCommand) other;","lastModifiedDate":"2021-03-23"},{"lineNumber":183,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-23"},{"lineNumber":184,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                \u0026\u0026 addOnToEntryDescriptor.equals(e.addOnToEntryDescriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":185,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":186,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":187,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":188,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Stores the details to edit the entry with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-23"},{"lineNumber":189,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * corresponding field value of the entry.","lastModifiedDate":"2021-03-23"},{"lineNumber":190,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":191,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static class AddOnToEntryDescriptor {","lastModifiedDate":"2021-03-23"},{"lineNumber":192,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        private Price price;","lastModifiedDate":"2021-03-27"},{"lineNumber":193,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        private List\u003cReview\u003e reviews;","lastModifiedDate":"2021-03-26"},{"lineNumber":194,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":195,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public AddOnToEntryDescriptor() {}","lastModifiedDate":"2021-03-23"},{"lineNumber":196,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":197,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        /**","lastModifiedDate":"2021-03-23"},{"lineNumber":198,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-23"},{"lineNumber":199,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-23"},{"lineNumber":200,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         */","lastModifiedDate":"2021-03-23"},{"lineNumber":201,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public AddOnToEntryDescriptor(AddOnToEntryDescriptor toCopy) {","lastModifiedDate":"2021-03-23"},{"lineNumber":202,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            setReviews(toCopy.reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":203,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            setPrice(toCopy.price);","lastModifiedDate":"2021-03-27"},{"lineNumber":204,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":205,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":206,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        /**","lastModifiedDate":"2021-03-23"},{"lineNumber":207,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Returns true if at least one field is updated with more details (eg. additional reviews).","lastModifiedDate":"2021-03-23"},{"lineNumber":208,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         */","lastModifiedDate":"2021-03-23"},{"lineNumber":209,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public boolean isAnyFieldAddedOn() {","lastModifiedDate":"2021-03-26"},{"lineNumber":210,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return CollectionUtil.isAnyNonNull(reviews, price);","lastModifiedDate":"2021-03-28"},{"lineNumber":211,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":212,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":213,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":214,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Sets {@code reviews} to this object\u0027s {@code reviews}.","lastModifiedDate":"2021-03-26"},{"lineNumber":215,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * A defensive copy of {@code reviews} is used internally.","lastModifiedDate":"2021-03-26"},{"lineNumber":216,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":217,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public void setReviews(List\u003cReview\u003e reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":218,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.reviews \u003d (reviews !\u003d null) ? new ArrayList\u003c\u003e(reviews) : null;","lastModifiedDate":"2021-03-26"},{"lineNumber":219,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":220,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":221,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":222,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Returns an unmodifiable review list, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-26"},{"lineNumber":223,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-26"},{"lineNumber":224,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Returns {@code Optional#empty()} if {@code reviews} is null.","lastModifiedDate":"2021-03-26"},{"lineNumber":225,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":226,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public Optional\u003cList\u003cReview\u003e\u003e getReviews() {","lastModifiedDate":"2021-03-26"},{"lineNumber":227,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return (reviews !\u003d null) ? Optional.of(Collections.unmodifiableList(reviews)) : Optional.empty();","lastModifiedDate":"2021-03-26"},{"lineNumber":228,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":229,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":230,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public void setPrice(Price price) {","lastModifiedDate":"2021-03-27"},{"lineNumber":231,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.price \u003d price;","lastModifiedDate":"2021-03-27"},{"lineNumber":232,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":233,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":234,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public Optional\u003cPrice\u003e getPrice() {","lastModifiedDate":"2021-03-27"},{"lineNumber":235,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return Optional.ofNullable(price);","lastModifiedDate":"2021-03-27"},{"lineNumber":236,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":237,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":238,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":239,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-23"},{"lineNumber":240,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-23"},{"lineNumber":241,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-23"},{"lineNumber":242,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                return true;","lastModifiedDate":"2021-03-23"},{"lineNumber":243,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":244,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":245,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":246,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (!(other instanceof AddOnToEntryDescriptor)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":247,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                return false;","lastModifiedDate":"2021-03-23"},{"lineNumber":248,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":249,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":250,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":251,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            AddOnToEntryDescriptor e \u003d (AddOnToEntryDescriptor) other;","lastModifiedDate":"2021-03-23"},{"lineNumber":252,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":253,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return getReviews().equals(e.getReviews())","lastModifiedDate":"2021-03-27"},{"lineNumber":254,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    \u0026\u0026 getPrice().equals((e.getPrice()));","lastModifiedDate":"2021-03-27"},{"lineNumber":255,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":256,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":257,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"Sidney011100":6,"DineshMagesvaran":9,"Prabhakaran-Gokul":242}},{"path":"src/main/java/fooddiary/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":" * Clears the food diary.","lastModifiedDate":"2021-04-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Food Diary has been cleared!\";","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"        model.setFoodDiary(new FoodDiary());","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":5,"Sidney011100":1,"-":17}},{"path":"src/main/java/fooddiary/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":3,"-":17}},{"path":"src/main/java/fooddiary/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    private final Entry entry;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    private final Index index;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    /** A view of the specified entry should be shown to the user. */","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    private final boolean enableView;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    /** A window for revision of the specified entry should be shown to the user. */","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    private final boolean enableRevise;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructs a {@code CommandResult} with the specified fields,","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     * used for help, view, revise, exit","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    public CommandResult(Entry entry, Index index, String feedbackToUser, boolean showHelp,","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"                         boolean enableView, boolean enableRevise, boolean exit) {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        this.entry \u003d entry;","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        this.enableView \u003d enableView;","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        this.enableRevise \u003d enableRevise;","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"        this(null, null, feedbackToUser, false, false, false, false);","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isEnableView() {","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        return enableView;","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isReviseEntry() {","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"        return enableRevise;","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"    public Entry getEntry() {","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"        return entry;","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"    public Index getIndex() {","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"        return index;","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"        return entry \u003d\u003d otherCommandResult.entry","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 index \u003d\u003d otherCommandResult.index","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 enableView \u003d\u003d otherCommandResult.enableView","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 enableRevise \u003d\u003d otherCommandResult.enableRevise","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"        return Objects.hash(entry, index, feedbackToUser, showHelp, enableView, enableRevise, exit);","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marcusleeeugene":44,"Donavanty":1,"-":65}},{"path":"src/main/java/fooddiary/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":" * Deletes a entry identified using it\u0027s displayed index from the food diary.","lastModifiedDate":"2021-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Entry: %1$s\";","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() \u0026\u0026 lastShownList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-04-06"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-06"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"                    lastShownList.size()));","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"        Entry entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        model.deleteEntry(entryToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":11,"Sidney011100":1,"DineshMagesvaran":5,"-":39}},{"path":"src/main/java/fooddiary/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.model.Model.PREDICATE_SHOW_ALL_ENTRIES;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.CliSyntax;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":" * Edits the details of an existing entry in the food diary.","lastModifiedDate":"2021-04-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the entry identified \"","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"            + \"by the index number used in the displayed entry list. \"","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"[\" + CliSyntax.PREFIX_RATING + \"RATING] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"[\" + CliSyntax.PREFIX_PRICE + \"PRICE] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"            + \"[\" + CliSyntax.PREFIX_REVIEW + \"REVIEW] \"","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"            + \"[\" + CliSyntax.PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"            + \"[\" + CliSyntax.PREFIX_TAG_CATEGORY + \"CATEGORIES]...\"","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"            + \"[\" + CliSyntax.PREFIX_TAG_SCHOOL + \"SCHOOLS]...\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"            + CliSyntax.PREFIX_RATING + \"5 \"","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"            + CliSyntax.PREFIX_REVIEW + \"I like this food a lot!\";","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_EDIT_ENTRY_SUCCESS \u003d \"Edited Entry: %1$s\";","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the food diary.\";","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"    private final EditEntryDescriptor editEntryDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param index of the entry in the filtered entry list to edit","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param editEntryDescriptor details to edit the entry with","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"    public EditCommand(Index index, EditEntryDescriptor editEntryDescriptor) {","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(editEntryDescriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"        this.editEntryDescriptor \u003d new EditEntryDescriptor(editEntryDescriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size() \u0026\u0026 lastShownList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"                    lastShownList.size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"        Entry entryToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"        Entry editedEntry \u003d createEditedEntry(entryToEdit, editEntryDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!editEntryDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-04-05"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-04-05"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-04-05"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":89,"author":{"gitId":"Donavanty"},"content":"        if (!entryToEdit.isSameEntry(editedEntry) \u0026\u0026 model.hasEntry(editedEntry)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"Donavanty"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"        model.setEntry(entryToEdit, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry));","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"     * Creates and returns a {@code Entry} with the details of {@code entryToEdit}","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"     * edited with {@code editEntryDescriptor}.","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"    private static Entry createEditedEntry(Entry entryToEdit, EditEntryDescriptor editEntryDescriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"        assert entryToEdit !\u003d null;","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"Donavanty"},"content":"        Name updatedName \u003d editEntryDescriptor.getName().orElse(entryToEdit.getName());","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"Donavanty"},"content":"        Rating updatedRating \u003d editEntryDescriptor.getRating().orElse(entryToEdit.getRating());","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"        Price updatedPrice \u003d editEntryDescriptor.getPrice().orElse(entryToEdit.getPrice());","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cReview\u003e updatedReview \u003d editEntryDescriptor.getReviews().orElse(entryToEdit.getReviews());","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"Donavanty"},"content":"        Address updatedAddress \u003d editEntryDescriptor.getAddress().orElse(entryToEdit.getAddress());","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e updatedTagCategories \u003d editEntryDescriptor.getTagCategories()","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"Sidney011100"},"content":"                                                    .orElse(entryToEdit.getTagCategories());","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagSchool\u003e updatedTagSchools \u003d editEntryDescriptor.getTagSchools().orElse(entryToEdit.getTagSchools());","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"Sidney011100"},"content":"        return new Entry(updatedName, updatedRating, updatedPrice, updatedReview,","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"Sidney011100"},"content":"                updatedAddress, updatedTagCategories, updatedTagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":133,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 editEntryDescriptor.equals(e.editEntryDescriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"     * Stores the details to edit the entry with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":"     * corresponding field value of the entry.","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"Donavanty"},"content":"    public static class EditEntryDescriptor {","lastModifiedDate":"2021-03-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"marcusleeeugene"},"content":"        private Rating rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"        private Price price;","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        private List\u003cReview\u003e reviews;","lastModifiedDate":"2021-03-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"Sidney011100"},"content":"        private Set\u003cTagCategory\u003e tagCategories;","lastModifiedDate":"2021-03-27"},{"lineNumber":147,"author":{"gitId":"Sidney011100"},"content":"        private Set\u003cTagSchool\u003e tagSchools;","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"Donavanty"},"content":"        public EditEntryDescriptor() {}","lastModifiedDate":"2021-03-17"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":156,"author":{"gitId":"Donavanty"},"content":"        public EditEntryDescriptor(EditEntryDescriptor toCopy) {","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":158,"author":{"gitId":"marcusleeeugene"},"content":"            setRating(toCopy.rating);","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"DineshMagesvaran"},"content":"            setPrice(toCopy.price);","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            setReviews(toCopy.reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":162,"author":{"gitId":"Sidney011100"},"content":"            setTagCategories(toCopy.tagCategories);","lastModifiedDate":"2021-03-27"},{"lineNumber":163,"author":{"gitId":"Sidney011100"},"content":"            setTagSchools(toCopy.tagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":164,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"Sidney011100"},"content":"            return CollectionUtil.isAnyNonNull(name, rating, price, reviews, address, tagCategories, tagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"marcusleeeugene"},"content":"        public void setRating(Rating rating) {","lastModifiedDate":"2021-03-08"},{"lineNumber":183,"author":{"gitId":"marcusleeeugene"},"content":"            this.rating \u003d rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"marcusleeeugene"},"content":"        public Optional\u003cRating\u003e getRating() {","lastModifiedDate":"2021-03-08"},{"lineNumber":187,"author":{"gitId":"marcusleeeugene"},"content":"            return Optional.ofNullable(rating);","lastModifiedDate":"2021-03-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"DineshMagesvaran"},"content":"        public void setPrice(Price price) {","lastModifiedDate":"2021-03-24"},{"lineNumber":191,"author":{"gitId":"DineshMagesvaran"},"content":"            this.price \u003d price;","lastModifiedDate":"2021-03-24"},{"lineNumber":192,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":193,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":194,"author":{"gitId":"DineshMagesvaran"},"content":"        public Optional\u003cPrice\u003e getPrice() {","lastModifiedDate":"2021-03-24"},{"lineNumber":195,"author":{"gitId":"DineshMagesvaran"},"content":"            return Optional.ofNullable(price);","lastModifiedDate":"2021-03-24"},{"lineNumber":196,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":197,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":198,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":199,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Sets {@code reviews} to this object\u0027s {@code reviews}.","lastModifiedDate":"2021-03-26"},{"lineNumber":200,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * A defensive copy of {@code reviews} is used internally.","lastModifiedDate":"2021-03-26"},{"lineNumber":201,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":202,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public void setReviews(List\u003cReview\u003e reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":203,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.reviews \u003d (reviews !\u003d null) ? new ArrayList\u003c\u003e(reviews) : null;","lastModifiedDate":"2021-03-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        /**","lastModifiedDate":"2021-03-26"},{"lineNumber":207,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Returns an unmodifiable review list, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-26"},{"lineNumber":208,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-26"},{"lineNumber":209,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         * Returns {@code Optional#empty()} if {@code reviews} is null.","lastModifiedDate":"2021-03-26"},{"lineNumber":210,"author":{"gitId":"Prabhakaran-Gokul"},"content":"         */","lastModifiedDate":"2021-03-26"},{"lineNumber":211,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        public Optional\u003cList\u003cReview\u003e\u003e getReviews() {","lastModifiedDate":"2021-03-26"},{"lineNumber":212,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return (reviews !\u003d null) ? Optional.of(Collections.unmodifiableList(reviews)) : Optional.empty();","lastModifiedDate":"2021-03-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":225,"author":{"gitId":"Sidney011100"},"content":"         * Sets {@code tags} to this object\u0027s {@code tagCategories}.","lastModifiedDate":"2021-03-27"},{"lineNumber":226,"author":{"gitId":"Sidney011100"},"content":"         * A defensive copy of {@code tag} is used internally.","lastModifiedDate":"2021-03-27"},{"lineNumber":227,"author":{"gitId":"Sidney011100"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":228,"author":{"gitId":"Sidney011100"},"content":"        public void setTagCategories(Set\u003cTagCategory\u003e tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":229,"author":{"gitId":"Sidney011100"},"content":"            this.tagCategories \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-27"},{"lineNumber":230,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":231,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":232,"author":{"gitId":"Sidney011100"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":233,"author":{"gitId":"Sidney011100"},"content":"         * Sets {@code tags} to this object\u0027s {@code tagSchools}.","lastModifiedDate":"2021-03-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":235,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":236,"author":{"gitId":"Sidney011100"},"content":"        public void setTagSchools(Set\u003cTagSchool\u003e tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":237,"author":{"gitId":"Sidney011100"},"content":"            this.tagSchools \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":241,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":242,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":243,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":244,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":245,"author":{"gitId":"Sidney011100"},"content":"        public Optional\u003cSet\u003cTagCategory\u003e\u003e getTagCategories() {","lastModifiedDate":"2021-03-27"},{"lineNumber":246,"author":{"gitId":"Sidney011100"},"content":"            return (tagCategories !\u003d null) ? Optional.of(Collections.unmodifiableSet(tagCategories)) : Optional.empty();","lastModifiedDate":"2021-03-27"},{"lineNumber":247,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":248,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":249,"author":{"gitId":"Sidney011100"},"content":"        public Optional\u003cSet\u003cTagSchool\u003e\u003e getTagSchools() {","lastModifiedDate":"2021-03-27"},{"lineNumber":250,"author":{"gitId":"Sidney011100"},"content":"            return (tagSchools !\u003d null) ? Optional.of(Collections.unmodifiableSet(tagSchools)) : Optional.empty();","lastModifiedDate":"2021-03-27"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":261,"author":{"gitId":"Donavanty"},"content":"            if (!(other instanceof EditEntryDescriptor)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":266,"author":{"gitId":"Donavanty"},"content":"            EditEntryDescriptor e \u003d (EditEntryDescriptor) other;","lastModifiedDate":"2021-03-17"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":269,"author":{"gitId":"marcusleeeugene"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())","lastModifiedDate":"2021-03-08"},{"lineNumber":270,"author":{"gitId":"DineshMagesvaran"},"content":"                    \u0026\u0026 getPrice().equals(e.getPrice())","lastModifiedDate":"2021-03-24"},{"lineNumber":271,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    \u0026\u0026 getReviews().equals(e.getReviews())","lastModifiedDate":"2021-03-26"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":273,"author":{"gitId":"Sidney011100"},"content":"                    \u0026\u0026 getTagCategories().equals(e.getTagCategories())","lastModifiedDate":"2021-03-27"},{"lineNumber":274,"author":{"gitId":"Sidney011100"},"content":"                    \u0026\u0026 getTagSchools().equals(e.getTagSchools());","lastModifiedDate":"2021-03-27"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"marcusleeeugene":7,"Donavanty":44,"Sidney011100":36,"DineshMagesvaran":33,"-":138,"Prabhakaran-Gokul":19}},{"path":"src/main/java/fooddiary/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Food Diary as requested ...\";","lastModifiedDate":"2021-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(null, null, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, false, true);","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":2,"Sidney011100":1,"-":15}},{"path":"src/main/java/fooddiary/logic/commands/FindAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsAllKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" * Finds and lists all food places whose entries contain all of the argument keywords.","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String COMMAND_WORD \u003d \"findall\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all food places whose entries contain all of \"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Example: \" + COMMAND_WORD + \" 5/5 fastfood\";","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    private final NameContainsAllKeywordsPredicate predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    public FindAllCommand(NameContainsAllKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        model.updateFilteredEntryList(predicate);","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION,","lastModifiedDate":"2021-03-31"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"                        model.getFilteredEntryList().size(), predicate.getSuggestionMessage()));","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"                || (other instanceof FindAllCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"                \u0026\u0026 predicate.equals(((FindAllCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Donavanty":7,"DineshMagesvaran":36}},{"path":"src/main/java/fooddiary/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" * Finds and lists all food places whose entries contains any of the argument keywords.","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all food places whose entries contain any of \"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" kfc macdonalds\\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" western\\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"            + \"Example 3: \" + COMMAND_WORD + \" 5/5\";","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"        model.updateFilteredEntryList(predicate);","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION,","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"                        model.getFilteredEntryList().size(), predicate.getSuggestionMessage()));","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Donavanty":5,"DineshMagesvaran":7,"-":33}},{"path":"src/main/java/fooddiary/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(null, null, SHOWING_HELP_MESSAGE, true, false, false, false);","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":2,"-":18}},{"path":"src/main/java/fooddiary/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.model.Model.PREDICATE_SHOW_ALL_ENTRIES;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":" * Lists all entries in the food diary to the user.","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all entries\";","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"        model.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":7,"-":17}},{"path":"src/main/java/fooddiary/logic/commands/ReviseCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.List;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":" * Allows revision of specified entry in a separate window.","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"public class ReviseCommand extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String COMMAND_WORD \u003d \"revise\";","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"            + \": Enables revision of entry based on the index number used in the displayed entry list.\\n\"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_REVISE_ENTRY_SUCCESS \u003d \"Revising Entry: %1$s\";","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates an ReviseCommand to revise the specified {@code Entry}","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    public ReviseCommand(Index targetIndex) {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        assert targetIndex.getZeroBased() \u003e\u003d 0 : \"Negative integer supplied\";","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        assert model !\u003d null : \"Model is null\";","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() \u0026\u0026 lastShownList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"                    lastShownList.size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        assert lastShownList.get(targetIndex.getZeroBased()) !\u003d null : \"Entry do not exist\";","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        Entry entry \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(entry, targetIndex, String.format(MESSAGE_REVISE_ENTRY_SUCCESS, entry),","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"                false , false, true, false);","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"                || (other instanceof ReviseCommand // instanceof handles nulls","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 targetIndex.equals(((ReviseCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"marcusleeeugene":57,"DineshMagesvaran":5}},{"path":"src/main/java/fooddiary/logic/commands/ViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":" * Views the full specified entry in a separate window.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"public class ViewCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"            + \": Views the full entry identified by the index number used in the displayed entry list.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_VIEW_ENTRY_SUCCESS \u003d \"Viewing Entry: %1$s\";","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates an ViewCommand to view the specified {@code Entry}","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewCommand(Index targetIndex) {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        assert targetIndex.getZeroBased() \u003e\u003d 0 : \"Negative integer supplied\";","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        assert model !\u003d null : \"Model is null\";","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"        List\u003cEntry\u003e lastShownList \u003d model.getFilteredEntryList();","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() \u0026\u0026 lastShownList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new CommandException(String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"                    lastShownList.size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        assert lastShownList.get(targetIndex.getZeroBased()) !\u003d null : \"Entry do not exist\";","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"        Entry entry \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"        return new CommandResult(entry, null, String.format(MESSAGE_VIEW_ENTRY_SUCCESS, entry),","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"                false , true, false, false);","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"marcusleeeugene":49,"Donavanty":9,"DineshMagesvaran":5}},{"path":"src/main/java/fooddiary/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"Donavanty":1,"-":16}},{"path":"src/main/java/fooddiary/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"                ArgumentTokenizer.tokenize(args, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_RATING,","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"                        CliSyntax.PREFIX_PRICE, CliSyntax.PREFIX_REVIEW,","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"                        CliSyntax.PREFIX_ADDRESS, CliSyntax.PREFIX_TAG_CATEGORY, CliSyntax.PREFIX_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        if (!arePrefixesPresent(argMultimap, CliSyntax.PREFIX_NAME, CliSyntax.PREFIX_ADDRESS,","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"                CliSyntax.PREFIX_RATING, CliSyntax.PREFIX_PRICE, CliSyntax.PREFIX_REVIEW)","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get());","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(CliSyntax.PREFIX_RATING).get());","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(CliSyntax.PREFIX_PRICE).get());","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cReview\u003e reviewList \u003d ParserUtil.parseReviews(argMultimap.getValueInList(CliSyntax.PREFIX_REVIEW));","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).get());","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e tagCategoriesList \u003d ParserUtil.parseTagsCategories(argMultimap","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"                                                .getAllValues(CliSyntax.PREFIX_TAG_CATEGORY));","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagSchool\u003e tagSchoolList \u003d ParserUtil.parseTagSchool(argMultimap.getAllValues(CliSyntax.PREFIX_TAG_SCHOOL));","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"        Entry entry \u003d new Entry(name, rating, price, reviewList, address, tagCategoriesList, tagSchoolList);","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"        return new AddCommand(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"Donavanty":15,"Sidney011100":7,"DineshMagesvaran":4,"-":36,"Prabhakaran-Gokul":2}},{"path":"src/main/java/fooddiary/logic/parser/AddOnCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_PRICE;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_REVIEW;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.AddOnCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.AddOnCommand.AddOnToEntryDescriptor;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Parses input arguments and creates a new AddOnCommand object","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class AddOnCommandParser implements Parser\u003cAddOnCommand\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses the given {@code String} of arguments in the context of the AddOnCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * and returns an AddOnCommand object for execution.","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REVIEW, PREFIX_PRICE);","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Index index;","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"                    AddOnCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        AddOnToEntryDescriptor addOnToEntryDescriptor \u003d new AddOnToEntryDescriptor();","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        parseReviewsForAddOn(argMultimap.getAllValues(PREFIX_REVIEW)).ifPresent(addOnToEntryDescriptor::setReviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (isSinglePriceValue(argMultimap.getValue(PREFIX_PRICE).get())) {","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                addOnToEntryDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"                throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"                        AddOnCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new AddOnCommand(index, addOnToEntryDescriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses {@code Collection\u003cString\u003e reviews} into a {@code List\u003cReview\u003e} if {@code reviews} is non-empty.","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * If {@code reviews} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * {@code List\u003cReview\u003e} containing zero reviews.","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Optional\u003cList\u003cReview\u003e\u003e parseReviewsForAddOn(Collection\u003cString\u003e reviews) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert reviews !\u003d null;","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (reviews.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Collection\u003cString\u003e reviewList \u003d reviews;","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return Optional.of(ParserUtil.parseReviews(reviewList));","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Checks is the input price is a single price value or a price range","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param price the price to be checked","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return a boolean value stating is the input price is a single price value","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private boolean isSinglePriceValue(String price) {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return !price.contains(Price.PRICE_RANGE_DASH);","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"DineshMagesvaran":7,"Prabhakaran-Gokul":80}},{"path":"src/main/java/fooddiary/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public List\u003cString\u003e getValueInList(Prefix prefix) {","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cString\u003e lastValue \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!values.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            lastValue.add(values.get(values.size() - 1));","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return lastValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"Donavanty":1,"-":59,"Prabhakaran-Gokul":9}},{"path":"src/main/java/fooddiary/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"Donavanty":1,"-":147}},{"path":"src/main/java/fooddiary/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"ra/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final Prefix PREFIX_REVIEW \u003d new Prefix(\"re/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    public static final Prefix PREFIX_TAG_CATEGORY \u003d new Prefix(\"c/\");","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    public static final Prefix PREFIX_TAG_SCHOOL \u003d new Prefix(\"s/\");","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":1,"Sidney011100":2,"DineshMagesvaran":1,"-":11,"Prabhakaran-Gokul":1}},{"path":"src/main/java/fooddiary/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"                    DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Donavanty":4,"DineshMagesvaran":5,"-":21}},{"path":"src/main/java/fooddiary/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_PRICE;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_RATING;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_REVIEW;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_TAG_CATEGORY;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_TAG_SCHOOL;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand.EditEntryDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_RATING, PREFIX_PRICE,","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"                PREFIX_REVIEW, PREFIX_ADDRESS, PREFIX_TAG_CATEGORY, PREFIX_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"                    EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"        EditEntryDescriptor editEntryDescriptor \u003d new EditEntryDescriptor();","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"            editEntryDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"            editEntryDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"            editEntryDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        parseReviewsForEdit(argMultimap.getAllValues(PREFIX_REVIEW)).ifPresent(editEntryDescriptor::setReviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"            editEntryDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"Sidney011100"},"content":"        parseTagCategoriesForEdit(argMultimap.getAllValues(PREFIX_TAG_CATEGORY))","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"Sidney011100"},"content":"                .ifPresent(editEntryDescriptor::setTagCategories);","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"        parseTagSchoolsForEdit(argMultimap.getAllValues(PREFIX_TAG_SCHOOL))","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"                .ifPresent(editEntryDescriptor::setTagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"        return new EditCommand(index, editEntryDescriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"    private Optional\u003cSet\u003cTagCategory\u003e\u003e parseTagCategoriesForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"Sidney011100"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"Sidney011100"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"Sidney011100"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"Sidney011100"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"Sidney011100"},"content":"        return Optional.of(ParserUtil.parseTagsCategories(tagSet));","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"Sidney011100"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"Sidney011100"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"Sidney011100"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"Sidney011100"},"content":"    private Optional\u003cSet\u003cTagSchool\u003e\u003e parseTagSchoolsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":104,"author":{"gitId":"Sidney011100"},"content":"        return Optional.of(ParserUtil.parseTagSchool(tagSet));","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses {@code Collection\u003cString\u003e reviews} into a {@code List\u003cReview\u003e} if {@code reviews} is non-empty.","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * If {@code reviews} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * {@code List\u003cReview\u003e} containing zero reviews.","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Optional\u003cList\u003cReview\u003e\u003e parseReviewsForEdit(Collection\u003cString\u003e reviews) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert reviews !\u003d null;","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (reviews.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Collection\u003cString\u003e reviewList \u003d reviews;","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return Optional.of(ParserUtil.parseReviews(reviewList));","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":121,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":16,"Sidney011100":26,"DineshMagesvaran":10,"-":51,"Prabhakaran-Gokul":18}},{"path":"src/main/java/fooddiary/logic/parser/FindAllCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindAllCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsAllKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":" * Parses input arguments and creates a new FindAllCommand object","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommandParser implements Parser\u003cFindAllCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAllCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"     * and returns a FindAllCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    public FindAllCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        return new FindAllCommand(new NameContainsAllKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"}],"authorContributionMap":{"Donavanty":7,"DineshMagesvaran":28}},{"path":"src/main/java/fooddiary/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Donavanty":5,"DineshMagesvaran":2,"-":25}},{"path":"src/main/java/fooddiary/logic/parser/FoodDiaryParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.AddCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.AddOnCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.Command;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindAllCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ListCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.ReviseCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ViewCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"public class FoodDiaryParser {","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"        case ViewCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"            return new ViewCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"        case ReviseCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"            return new ReviseCommandParser().parse(arguments);","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"        case FindAllCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"            return new FindAllCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case AddOnCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return new AddOnCommandParser().parse(arguments);","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marcusleeeugene":7,"Donavanty":17,"DineshMagesvaran":3,"-":62,"Prabhakaran-Gokul":4}},{"path":"src/main/java/fooddiary/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"Donavanty":3,"-":13}},{"path":"src/main/java/fooddiary/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not an integer.\";","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        String integerRegex \u003d \"^-?\\\\d+$\";","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!trimmedIndex.matches(integerRegex)) {","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new IndexOutOfBoundsException(MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-06"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (Integer.parseInt(trimmedIndex) \u003d\u003d 0 || Integer.parseInt(trimmedIndex) \u003e 1000000) {","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new IndexOutOfBoundsException(MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"     * Parses a {@code String rating} into a {@code Rating}.","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws ParseException if the given {@code rating} is invalid.","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"    public static Rating parseRating(String rating) throws ParseException {","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(rating);","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"        String trimmedRating \u003d rating.trim();","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"        if (!Rating.isValidRating(trimmedRating)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        return new Rating(trimmedRating);","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"     * Parses a {@code String price} into a {@code Price}.","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"     * @throws ParseException if the given {@code price} is invalid.","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"    public static Price parsePrice(String price) throws ParseException {","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"        requireNonNull(price);","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"        String trimmedPrice \u003d price.trim();","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(Price.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        return new Price(trimmedPrice);","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses a {@code String review} into an {@code Review}.","lastModifiedDate":"2021-03-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws ParseException if the given {@code review} is invalid.","lastModifiedDate":"2021-03-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static Review parseReview(String review) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(review);","lastModifiedDate":"2021-03-12"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String trimmedReview \u003d review.trim();","lastModifiedDate":"2021-03-12"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!Review.isValidReview(trimmedReview)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":118,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new ParseException(Review.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Review(trimmedReview);","lastModifiedDate":"2021-03-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses {@code Collection\u003cString\u003e reviews} into a {@code List\u003cReview\u003e}.","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static List\u003cReview\u003e parseReviews(Collection\u003cString\u003e reviews) throws ParseException {","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        final List\u003cReview\u003e reviewList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        for (String reviewValue : reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reviewList.add(parseReview(reviewValue));","lastModifiedDate":"2021-03-26"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return reviewList;","lastModifiedDate":"2021-03-26"},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"Sidney011100"},"content":"     * Parses a {@code String tag} into a {@code TagCategory}.","lastModifiedDate":"2021-03-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"Sidney011100"},"content":"    public static TagCategory parseTagsCategories(String tag) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"Sidney011100"},"content":"        if (!TagCategory.isValidTagName(trimmedTag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":145,"author":{"gitId":"Sidney011100"},"content":"            throw new ParseException(TagCategory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"Sidney011100"},"content":"        return new TagCategory(trimmedTag);","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":151,"author":{"gitId":"Sidney011100"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTagCategory\u003e}.","lastModifiedDate":"2021-03-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":153,"author":{"gitId":"Sidney011100"},"content":"    public static Set\u003cTagCategory\u003e parseTagsCategories(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":155,"author":{"gitId":"Sidney011100"},"content":"        final Set\u003cTagCategory\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":157,"author":{"gitId":"Sidney011100"},"content":"            tagSet.add(parseTagsCategories(tagName));","lastModifiedDate":"2021-03-27"},{"lineNumber":158,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":159,"author":{"gitId":"Sidney011100"},"content":"        return tagSet;","lastModifiedDate":"2021-03-27"},{"lineNumber":160,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":161,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":162,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":163,"author":{"gitId":"Sidney011100"},"content":"     * Parses a {@code String tag} into a {@code TagSchool}.","lastModifiedDate":"2021-03-27"},{"lineNumber":164,"author":{"gitId":"Sidney011100"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-27"},{"lineNumber":165,"author":{"gitId":"Sidney011100"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":166,"author":{"gitId":"Sidney011100"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2021-03-27"},{"lineNumber":167,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":168,"author":{"gitId":"Sidney011100"},"content":"    public static TagSchool parseTagSchool(String tag) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":169,"author":{"gitId":"Sidney011100"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":170,"author":{"gitId":"Sidney011100"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2021-03-27"},{"lineNumber":171,"author":{"gitId":"Sidney011100"},"content":"        if (!TagSchool.isValidTagName(trimmedTag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":172,"author":{"gitId":"Sidney011100"},"content":"            throw new ParseException(TagSchool.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":173,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":174,"author":{"gitId":"Sidney011100"},"content":"        return new TagSchool(trimmedTag);","lastModifiedDate":"2021-03-27"},{"lineNumber":175,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":176,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":177,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":178,"author":{"gitId":"Sidney011100"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTagSchool\u003e}.","lastModifiedDate":"2021-03-27"},{"lineNumber":179,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":180,"author":{"gitId":"Sidney011100"},"content":"    public static Set\u003cTagSchool\u003e parseTagSchool(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":181,"author":{"gitId":"Sidney011100"},"content":"        requireNonNull(tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":182,"author":{"gitId":"Sidney011100"},"content":"        final Set\u003cTagSchool\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":183,"author":{"gitId":"Sidney011100"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":184,"author":{"gitId":"Sidney011100"},"content":"            tagSet.add(parseTagSchool(tagName));","lastModifiedDate":"2021-03-27"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"marcusleeeugene":8,"Donavanty":15,"Sidney011100":38,"DineshMagesvaran":24,"-":81,"Prabhakaran-Gokul":22}},{"path":"src/main/java/fooddiary/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"Donavanty":1,"-":38}},{"path":"src/main/java/fooddiary/logic/parser/ReviseCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.ReviseCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" * Parses input arguments and creates a new ReviseCommand object","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"public class ReviseCommandParser implements Parser\u003cReviseCommand\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Parses the given {@code String} of arguments in the context of the ReviseCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     * and returns a ReviseCommand object for execution.","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public ReviseCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"            return new ReviseCommand(index);","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"                    ReviseCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"marcusleeeugene":23,"DineshMagesvaran":5}},{"path":"src/main/java/fooddiary/logic/parser/ViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ViewCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" * Parses input arguments and creates a new ViewCommand object","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     * and returns a ViewCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"            return new ViewCommand(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-04-05"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"marcusleeeugene":20,"Donavanty":4,"DineshMagesvaran":4}},{"path":"src/main/java/fooddiary/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"Donavanty":2,"-":15}},{"path":"src/main/java/fooddiary/model/FoodDiary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.UniqueEntryList;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":" * Wraps all data at the food diary-level","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":" * Duplicates are not allowed (by .isSameEntry comparison)","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"public class FoodDiary implements ReadOnlyFoodDiary {","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"    private final UniqueEntryList entries;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"    {","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"        entries \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"    public FoodDiary() {","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"     * Creates an FoodDiary using the Entries in the {@code toBeCopied}","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"    public FoodDiary(ReadOnlyFoodDiary toBeCopied) {","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"     * Replaces the contents of the entry list with {@code entries}.","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"     * {@code entries} must not contain duplicate entries.","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"    public void setEntries(List\u003cEntry\u003e entries) {","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        this.entries.setEntry(entries);","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"     * Resets the existing data of this {@code FoodDiary} with {@code newData}.","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"    public void resetData(ReadOnlyFoodDiary newData) {","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        setEntries(newData.getEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"    //// entry-level operations","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"     * Returns true if a entry with the same identity as {@code entry} exists in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"    public boolean hasEntry(Entry entry) {","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"        return entries.contains(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"     * Adds a entry to the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"     * The entry must not already exist in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"Donavanty"},"content":"    public void addEntry(Entry p) {","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"        entries.add(p);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"     * Replaces the given entry {@code target} in the list with {@code editedEntry}.","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"     * {@code target} must exist in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the food diary.","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"    public void setEntry(Entry target, Entry editedEntry) {","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"        entries.setEntry(target, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"Donavanty"},"content":"     * Removes {@code key} from this {@code FoodDiary}.","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"     * {@code key} must exist in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"    public void removeEntry(Entry key) {","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"        entries.remove(key);","lastModifiedDate":"2021-03-17"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"        return entries.asUnmodifiableObservableList().size() + \" entries\";","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"Donavanty"},"content":"    public ObservableList\u003cEntry\u003e getEntryList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"        return entries.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"Donavanty"},"content":"                || (other instanceof FoodDiary // instanceof handles nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 entries.equals(((FoodDiary) other).entries));","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"        return entries.hashCode();","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":51,"-":71}},{"path":"src/main/java/fooddiary/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"     * Returns the user prefs\u0027 food diary file path.","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"    Path getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"     * Sets the user prefs\u0027 food diary file path.","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"    void setFoodDiaryFilePath(Path foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"     * Replaces food diary data with the data in {@code addressBook}.","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"    void setFoodDiary(ReadOnlyFoodDiary foodDiary);","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"     * Returns the AddressBook","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"    ReadOnlyFoodDiary getFoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"     * Returns true if a entry with the same identity as {@code entry} exists in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"    boolean hasEntry(Entry entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"     * Deletes the given entry.","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"     * The entry must exist in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"    void deleteEntry(Entry target);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"     * Adds the given entry.","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"     * {@code entry} must not already exist in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"    void addEntry(Entry entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"     * Replaces the given entry {@code target} with {@code editedPerson}.","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"     * {@code target} must exist in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"     * The entry identity of {@code editedPerson} must not be the same as another existing entry in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"    void setEntry(Entry target, Entry editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"     * Returns an unmodifiable view of the filtered entry list","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"    ObservableList\u003cEntry\u003e getFilteredEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"Donavanty"},"content":"     * Updates the filter of the filtered entry list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"    void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate);","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Donavanty":41,"-":53}},{"path":"src/main/java/fooddiary/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":" * Represents the in-memory model of the food diary data.","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"    private final FoodDiary foodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    private final FilteredList\u003cEntry\u003e filteredEntries;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"     * Initializes a ModelManager with the given foodDiary and userPrefs.","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    public ModelManager(ReadOnlyFoodDiary foodDiary, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"        requireAllNonNull(foodDiary, userPrefs);","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"        logger.fine(\"Initializing with food diary: \" + foodDiary + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        this.foodDiary \u003d new FoodDiary(foodDiary);","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        filteredEntries \u003d new FilteredList\u003c\u003e(this.foodDiary.getEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        this(new FoodDiary(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"    public Path getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"        return userPrefs.getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"Donavanty"},"content":"    public void setFoodDiaryFilePath(Path foodDiaryFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"        userPrefs.setFoodDiaryFilePath(foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodDiary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"    public void setFoodDiary(ReadOnlyFoodDiary foodDiary) {","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"        this.foodDiary.resetData(foodDiary);","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"    public ReadOnlyFoodDiary getFoodDiary() {","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"Donavanty"},"content":"        return foodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"    public boolean hasEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"        return foodDiary.hasEntry(entry);","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"    public void deleteEntry(Entry target) {","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"        foodDiary.removeEntry(target);","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"Donavanty"},"content":"    public void addEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"Donavanty"},"content":"        foodDiary.addEntry(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"Donavanty"},"content":"        updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":110,"author":{"gitId":"Donavanty"},"content":"    public void setEntry(Entry target, Entry editedEntry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"Donavanty"},"content":"        requireAllNonNull(target, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":"        foodDiary.setEntry(target, editedEntry);","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"Donavanty"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":119,"author":{"gitId":"Donavanty"},"content":"     * Returns an unmodifiable view of the list of {@code Entry} backed by the internal list of","lastModifiedDate":"2021-03-20"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"     * {@code versionedFoodDiary}","lastModifiedDate":"2021-03-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":123,"author":{"gitId":"Donavanty"},"content":"    public ObservableList\u003cEntry\u003e getFilteredEntryList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"Donavanty"},"content":"        return filteredEntries;","lastModifiedDate":"2021-03-17"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":128,"author":{"gitId":"Donavanty"},"content":"    public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":"        filteredEntries.setPredicate(predicate);","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"Donavanty"},"content":"        return foodDiary.equals(other.foodDiary)","lastModifiedDate":"2021-03-17"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 filteredEntries.equals(other.filteredEntries);","lastModifiedDate":"2021-03-17"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":53,"-":99}},{"path":"src/main/java/fooddiary/model/ReadOnlyFoodDiary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"public interface ReadOnlyFoodDiary {","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"     * Returns an unmodifiable view of the food diary list.","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"     * This list will not contain any duplicate food diary entries.","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"    ObservableList\u003cEntry\u003e getEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":4,"Sidney011100":2,"-":11}},{"path":"src/main/java/fooddiary/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"    Path getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"Donavanty":3,"-":13}},{"path":"src/main/java/fooddiary/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"    private Path foodDiaryFilePath \u003d Paths.get(\"data\", \"foodDiary.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"    public UserPrefs() {","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"        setFoodDiaryFilePath(newUserPrefs.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"    public Path getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"        return foodDiaryFilePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"    public void setFoodDiaryFilePath(Path foodDiaryFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"        this.foodDiaryFilePath \u003d foodDiaryFilePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 foodDiaryFilePath.equals(o.foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"        return Objects.hash(guiSettings, foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"        sb.append(\"\\nLocal data file location : \" + foodDiaryFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":14,"-":74}},{"path":"src/main/java/fooddiary/model/entry/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":" * Represents a Entry\u0027s address in the address book.","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        AppUtil.checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns true if a given string is a valid address.","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":4,"-":53,"Prabhakaran-Gokul":1}},{"path":"src/main/java/fooddiary/model/entry/Entry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":" * Represents a Entry in the food diary.","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"public class Entry {","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final List\u003cReview\u003e reviews \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    private final Rating rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    private final Price price;","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"    private final Set\u003cTagCategory\u003e tagCategories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    private final Set\u003cTagSchool\u003e tagSchools \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"    public Entry(Name name, Rating rating, Price price, List\u003cReview\u003e reviews,","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"                 Address address, Set\u003cTagCategory\u003e tagCategories, Set\u003cTagSchool\u003e tagSchools) {","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"        requireAllNonNull(name, rating, price, reviews, address, tagCategories, tagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        this.rating \u003d rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        this.price \u003d price;","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.reviews.addAll(reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"        this.tagCategories.addAll(tagCategories);","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"        this.tagSchools.addAll(tagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    public Rating getRating() {","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"        return rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns an immutable review list, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * if modification is attempted.","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public List\u003cReview\u003e getReviews() {","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return Collections.unmodifiableList(reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"    public Price getPrice() {","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"        return price;","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"    public Set\u003cTagSchool\u003e getTagSchools() {","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"        return Collections.unmodifiableSet(tagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"    public Set\u003cTagCategory\u003e getTagCategories() {","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"Sidney011100"},"content":"        return Collections.unmodifiableSet(tagCategories);","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"     * Returns true if both entries have the same name.","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"     * This defines a weaker notion of equality between two entries.","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"    public boolean isSameEntry(Entry otherEntry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"Donavanty"},"content":"        if (otherEntry \u003d\u003d this) {","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"        return otherEntry !\u003d null","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 otherEntry.getName().equals(getName()) \u0026\u0026 otherEntry.getAddress().equals(getAddress());","lastModifiedDate":"2021-04-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"Donavanty"},"content":"     * Returns true if both entries have the same identity and data fields.","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"     * This defines a stronger notion of equality between two entries.","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"Donavanty"},"content":"        if (!(other instanceof Entry)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"Donavanty"},"content":"        Entry otherEntry \u003d (Entry) other;","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"Donavanty"},"content":"        return otherEntry.getName().equals(getName())","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 otherEntry.getRating().equals(getRating())","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"                \u0026\u0026 otherEntry.getPrice().equals(getPrice())","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                \u0026\u0026 otherEntry.getReviews().equals(getReviews())","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 otherEntry.getAddress().equals(getAddress())","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 otherEntry.getTagCategories().equals(getTagCategories())","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 otherEntry.getTagSchools().equals(getTagSchools());","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"Sidney011100"},"content":"        return Objects.hash(name, rating, reviews, address, tagCategories, tagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":"                .append(\"; Rating: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"marcusleeeugene"},"content":"                .append(getRating())","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"                .append(\"; Price: \")","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .append(getPrice());","lastModifiedDate":"2021-03-26"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cReview\u003e reviews \u003d getReviews();","lastModifiedDate":"2021-03-26"},{"lineNumber":137,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!reviews.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":138,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            builder.append(\"; Reviews: \");","lastModifiedDate":"2021-03-26"},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reviews.forEach(builder::append);","lastModifiedDate":"2021-03-26"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":142,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        builder.append(\"; Address: \")","lastModifiedDate":"2021-03-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":145,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e tagCategories \u003d getTagCategories();","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"Sidney011100"},"content":"        if (!tagCategories.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":147,"author":{"gitId":"Sidney011100"},"content":"            builder.append(\"; Categories: \");","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"Sidney011100"},"content":"            tagCategories.forEach(builder::append);","lastModifiedDate":"2021-03-27"},{"lineNumber":149,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":150,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":151,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagSchool\u003e tagSchools \u003d getTagSchools();","lastModifiedDate":"2021-03-27"},{"lineNumber":152,"author":{"gitId":"Sidney011100"},"content":"        if (!tagSchools.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":153,"author":{"gitId":"Sidney011100"},"content":"            builder.append(\"; Schools: \");","lastModifiedDate":"2021-03-27"},{"lineNumber":154,"author":{"gitId":"Sidney011100"},"content":"            tagSchools.forEach(builder::append);","lastModifiedDate":"2021-03-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marcusleeeugene":6,"Donavanty":15,"Sidney011100":29,"DineshMagesvaran":9,"-":79,"Prabhakaran-Gokul":21}},{"path":"src/main/java/fooddiary/model/entry/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":" * Represents a restaurant\u0027s name in The Food Diary","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"     * Constructs a {@code Restaurant Name}.","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"     * @param name A valid restaurant name.","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"     * Returns true if a given string is a valid restaurant name.","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":8,"-":52}},{"path":"src/main/java/fooddiary/model/entry/NameContainsAllKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_EMPTY;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_FOR_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_FOR_RATING;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_FOR_RATING_AND_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.model.entry.Price.PRICE_DOLLAR_SIGN;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.model.entry.Price.PRICE_RANGE_DASH;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.model.entry.Rating.RATING_OUT_OF_FIVE;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.StringUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.tag.Tag;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":" * Tests that an entry matches all of the keywords given.","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"public class NameContainsAllKeywordsPredicate implements Predicate\u003cEntry\u003e {","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    public NameContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"    public boolean test(Entry entry) {","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        assert(entry !\u003d null);","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        if (keywords.isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e priceKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e nonPriceKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        //sort keywords by price/non-price \u0026 convert price to price range if necessary","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        for (String s : keywords) {","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"            if (s.length() \u003c 2) {","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"                nonPriceKeywords.add(s);","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"            } else if (Price.isValidPrice(s.substring(1)) \u0026\u0026 s.contains(PRICE_DOLLAR_SIGN)","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"                    \u0026\u0026 s.contains(PRICE_RANGE_DASH)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"                priceKeywords.add(s.substring(1));","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"            } else if (Price.isValidPrice(s.substring(1)) \u0026\u0026 s.contains(PRICE_DOLLAR_SIGN)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"                priceKeywords.add(s.substring(1) + PRICE_RANGE_DASH + s.substring(1));","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"            } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"                nonPriceKeywords.add(s);","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        return testPrice(entry, priceKeywords) \u0026\u0026 testNonPrice(entry, nonPriceKeywords);","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"                || (other instanceof NameContainsAllKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"                \u0026\u0026 keywords.equals(((NameContainsAllKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"     * Helper function that tests that an entry matches all of the price keywords given","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param entry an entry to search for price keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param priceKeywords the price keywords to be used to search an entry","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"     * @return true if entry contains all of the price keywords, false otherwise","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"    private boolean testPrice(Entry entry, List\u003cString\u003e priceKeywords) {","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        //convert entry price to price range if necessary before comparison test against keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        StringBuilder sb \u003d new StringBuilder(entry.getPrice().value);","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!sb.toString().contains(PRICE_RANGE_DASH)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"            sb.append(PRICE_RANGE_DASH).append(entry.getPrice().value);","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"        return priceKeywords.stream().allMatch(keyword -\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"            Integer.parseInt(keyword.split(PRICE_RANGE_DASH)[0])","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"            \u003c\u003d Integer.parseInt(sb.toString().split(PRICE_RANGE_DASH)[1])","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"            \u0026\u0026 Integer.parseInt(sb.toString().split(PRICE_RANGE_DASH)[0])","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"            \u003c\u003d Integer.parseInt(keyword.split(PRICE_RANGE_DASH)[1]));","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"     * Helper function that tests that an entry matches all of the non-price keywords given","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param entry an entry to search for non-price keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param nonPriceKeywords the non-price keywords to be used to search an entry","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"     * @return true if entry contains all of the non-price keywords, false otherwise","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"    private boolean testNonPrice(Entry entry, List\u003cString\u003e nonPriceKeywords) {","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        //combine name, rating, address, categories \u0026 schools into a single string to test for keywords","lastModifiedDate":"2021-03-31"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        StringBuilder sb \u003d new StringBuilder(entry.getName().fullName);","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        sb.append(\" \").append(entry.getRating().value).append(RATING_OUT_OF_FIVE);","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        sb.append(\" \").append(entry.getAddress().value);","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Tag t : entry.getTagCategories()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"            sb.append(\" \").append(t.tag);","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Tag t : entry.getTagSchools()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"            sb.append(\" \").append(t.tag);","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"        return nonPriceKeywords.stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"            .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(sb.toString(), keyword));","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"     * Provides suggestion messages based on the keywords given","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"     * @return suggestion message","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"    public String getSuggestionMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        String ratingResemblingRegex \u003d \"^[0-9]?[/][0-9]?$\";","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        String priceResemblingRegex \u003d \"^[$][0-9]{0,3}?[-]?[0-9]{0,3}?\";","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"        String ratingRegex \u003d \"^[0-5]{1}[/][5]$\";","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"        boolean containsRatingResemblingKeywords \u003d false;","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"        boolean containsPriceResemblingKeywords \u003d false;","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":"        if (keywords.stream().anyMatch(keyword","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"            -\u003e keyword.matches(ratingResemblingRegex) \u0026\u0026 !keyword.matches(ratingRegex))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"            containsRatingResemblingKeywords \u003d true;","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"        if (keywords.stream().anyMatch(keyword","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"            -\u003e keyword.length() \u003e 1 \u0026\u0026 keyword.matches(priceResemblingRegex)","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"            \u0026\u0026 !Price.isValidPrice(keyword.substring(1)))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"            containsPriceResemblingKeywords \u003d true;","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        String suggestionMessage \u003d SUGGESTION_MESSAGE_EMPTY;","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"        if (containsRatingResemblingKeywords \u0026\u0026 containsPriceResemblingKeywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"            suggestionMessage \u003d SUGGESTION_MESSAGE_FOR_RATING_AND_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (containsRatingResemblingKeywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"            suggestionMessage \u003d SUGGESTION_MESSAGE_FOR_RATING;","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (containsPriceResemblingKeywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"            suggestionMessage \u003d SUGGESTION_MESSAGE_FOR_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"DineshMagesvaran"},"content":"        return suggestionMessage;","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Donavanty":6,"Sidney011100":2,"DineshMagesvaran":129}},{"path":"src/main/java/fooddiary/model/entry/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_EMPTY;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_FOR_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_FOR_RATING;","lastModifiedDate":"2021-03-31"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.SUGGESTION_MESSAGE_FOR_RATING_AND_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.model.entry.Price.PRICE_DOLLAR_SIGN;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.model.entry.Price.PRICE_RANGE_DASH;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.model.entry.Rating.RATING_OUT_OF_FIVE;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.StringUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.tag.Tag;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":" * Tests that an entry matches any of the keywords given.","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"    public boolean test(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        assert(entry !\u003d null);","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e priceKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e nonPriceKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        //sort keywords by price/non-price \u0026 convert price to price range if necessary","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        for (String s : keywords) {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"            if (s.length() \u003c 2) {","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"                nonPriceKeywords.add(s);","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"            } else if (Price.isValidPrice(s.substring(1)) \u0026\u0026 s.contains(PRICE_DOLLAR_SIGN)","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"                    \u0026\u0026 s.contains(PRICE_RANGE_DASH)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"                priceKeywords.add(s.substring(1));","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"            } else if (Price.isValidPrice(s.substring(1)) \u0026\u0026 s.contains(PRICE_DOLLAR_SIGN)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"                priceKeywords.add(s.substring(1) + PRICE_RANGE_DASH + s.substring(1));","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"            } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"                nonPriceKeywords.add(s);","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        return testPrice(entry, priceKeywords) || testNonPrice(entry, nonPriceKeywords);","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"     * Helper function that tests that an entry matches any of the price keywords given","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param entry an entry to search for price keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param priceKeywords the price keywords to be used to search an entry","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"     * @return true if entry contains any of the price keywords, false otherwise","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"    private boolean testPrice(Entry entry, List\u003cString\u003e priceKeywords) {","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        //convert entry price to price range if necessary before comparison test against keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        StringBuilder sb \u003d new StringBuilder(entry.getPrice().value);","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!sb.toString().contains(PRICE_RANGE_DASH)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"            sb.append(PRICE_RANGE_DASH).append(entry.getPrice().value);","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        return priceKeywords.stream().anyMatch(keyword -\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"            Integer.parseInt(keyword.split(PRICE_RANGE_DASH)[0])","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"            \u003c\u003d Integer.parseInt(sb.toString().split(PRICE_RANGE_DASH)[1])","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"            \u0026\u0026 Integer.parseInt(sb.toString().split(PRICE_RANGE_DASH)[0])","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"            \u003c\u003d Integer.parseInt(keyword.split(PRICE_RANGE_DASH)[1]));","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"     * Helper function that tests that an entry matches any of the non-price keywords given","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param entry an entry to search for non-price keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param nonPriceKeywords the non-price keywords to be used to search an entry","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"     * @return true if entry contains any of the non-price keywords, false otherwise","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"    private boolean testNonPrice(Entry entry, List\u003cString\u003e nonPriceKeywords) {","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        //combine name, rating, address, categories \u0026 schools into a single string to test for keywords","lastModifiedDate":"2021-03-31"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        StringBuilder sb \u003d new StringBuilder(entry.getName().fullName);","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        sb.append(\" \").append(entry.getRating().value).append(RATING_OUT_OF_FIVE);","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        sb.append(\" \").append(entry.getAddress().value);","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Tag t : entry.getTagCategories()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"            sb.append(\" \").append(t.tag);","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Tag t : entry.getTagSchools()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"            sb.append(\" \").append(t.tag);","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        return nonPriceKeywords.stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(sb.toString(), keyword));","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"     * Provides suggestion messages based on the keywords given","lastModifiedDate":"2021-03-31"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"     * @return suggestion message","lastModifiedDate":"2021-03-31"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"    public String getSuggestionMessage() {","lastModifiedDate":"2021-03-31"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"        String ratingResemblingRegex \u003d \"^[0-9]?[/][0-9]?$\";","lastModifiedDate":"2021-03-31"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"        String priceResemblingRegex \u003d \"^[$][0-9]{0,3}?[-]?[0-9]{0,3}?\";","lastModifiedDate":"2021-03-31"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        String ratingRegex \u003d \"^[0-5]{1}[/][5]$\";","lastModifiedDate":"2021-03-31"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        boolean containsRatingResemblingKeywords \u003d false;","lastModifiedDate":"2021-03-31"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"        boolean containsPriceResemblingKeywords \u003d false;","lastModifiedDate":"2021-03-31"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"        if (keywords.stream().anyMatch(keyword","lastModifiedDate":"2021-03-31"},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"            -\u003e keyword.matches(ratingResemblingRegex) \u0026\u0026 !keyword.matches(ratingRegex))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"            containsRatingResemblingKeywords \u003d true;","lastModifiedDate":"2021-03-31"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"        if (keywords.stream().anyMatch(keyword","lastModifiedDate":"2021-03-31"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"            -\u003e keyword.length() \u003e 1 \u0026\u0026 keyword.matches(priceResemblingRegex)","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"            \u0026\u0026 !Price.isValidPrice(keyword.substring(1)))) {","lastModifiedDate":"2021-03-31"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"            containsPriceResemblingKeywords \u003d true;","lastModifiedDate":"2021-03-31"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"        String suggestionMessage \u003d SUGGESTION_MESSAGE_EMPTY;","lastModifiedDate":"2021-03-31"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"        if (containsRatingResemblingKeywords \u0026\u0026 containsPriceResemblingKeywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"            suggestionMessage \u003d SUGGESTION_MESSAGE_FOR_RATING_AND_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (containsRatingResemblingKeywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"            suggestionMessage \u003d SUGGESTION_MESSAGE_FOR_RATING;","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"        } else if (containsPriceResemblingKeywords) {","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"            suggestionMessage \u003d SUGGESTION_MESSAGE_FOR_PRICE;","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":"        return suggestionMessage;","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Donavanty":6,"Sidney011100":1,"DineshMagesvaran":104,"-":23}},{"path":"src/main/java/fooddiary/model/entry/Price.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":" * Represents a Entry\u0027s price range in the food diary.","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"public class Price {","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Price should only contain an integer or a range of integers\"","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"            + \" separated by \u0027-\u0027 (e.g. 7, 3-11) between 0-999. Price cannot be blank.\";","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String PRICE_RANGE_DASH \u003d \"-\";","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String PRICE_DOLLAR_SIGN \u003d \"$\";","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-9]{1,3}([\" + PRICE_RANGE_DASH + \"][0-9]{1,3})?$\";","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"    public final String value;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"     * Constructs a {@code price}.","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"     * @param price A valid price.","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    public Price(String price) {","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        requireNonNull(price);","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        AppUtil.checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        value \u003d price;","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"     * Returns true if a given string is a valid price.","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    public static boolean isValidPrice(String test) {","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!test.matches(VALIDATION_REGEX)) {","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"            return false;","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!test.contains(PRICE_RANGE_DASH)) {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"            return true;","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        int lowerBoundPrice \u003d Integer.parseInt(test.split(PRICE_RANGE_DASH)[0]);","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        int upperBoundPrice \u003d Integer.parseInt(test.split(PRICE_RANGE_DASH)[1]);","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        return (lowerBoundPrice \u003c upperBoundPrice);","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"    public String toString() {","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        return value;","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"                || (other instanceof Price // instanceof handles nulls","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"                \u0026\u0026 value.equals(((Price) other).value)); // state check","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"marcusleeeugene":1,"DineshMagesvaran":62}},{"path":"src/main/java/fooddiary/model/entry/Rating.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":" * Represents a Entry\u0027s rating in the food diary.","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"public class Rating {","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"            \"Ratings should only contain a integer (e.g. 3) between 0-5, \"","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"                + \"and it should be a single digit. It should not be blank.\";","lastModifiedDate":"2021-04-04"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String RATING_OUT_OF_FIVE \u003d \"/5\";","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[0-5]{1}$\";","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    public final String value;","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructs a {@code Rating}.","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     * @param rating A valid rating.","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    public Rating(String rating) {","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        requireNonNull(rating);","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"        AppUtil.checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        value \u003d rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns true if a given string is a valid rating.","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    public static boolean isValidRating(String test) {","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        return value;","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"                || (other instanceof Rating // instanceof handles nulls","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 value.equals(((Rating) other).value)); // state check","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"marcusleeeugene":48,"Donavanty":5,"DineshMagesvaran":2}},{"path":"src/main/java/fooddiary/model/entry/Review.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Represents a Restaurant\u0027s review in the Food Diary.","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidReview(String)}","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Review {","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Reviews can take any values, and it should not be blank\";","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public final String value;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs an {@code Review}.","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param review A valid review.","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Review(String review) {","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        requireNonNull(review);","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"        AppUtil.checkArgument(isValidReview(review), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        value \u003d review;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns if a given string is a valid review.","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static boolean isValidReview(String test) {","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        return \u0027[\u0027 + value + \u0027]\u0027;","lastModifiedDate":"2021-04-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                || (other instanceof Review // instanceof handles nulls","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                \u0026\u0026 value.equals(((Review) other).value)); // state check","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":5,"-":31,"Prabhakaran-Gokul":17}},{"path":"src/main/java/fooddiary/model/entry/UniqueEntryList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.exceptions.DuplicateEntryException;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.exceptions.EntryNotFoundException;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":" * A list of entries that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":" * A entry is considered unique by comparing using {@code Entry#isSameEntry(Entry)}. As such, adding and updating of","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":" * entries uses Entry#isSameEntry(Entry) for equality so as to ensure that the entry being added or updated is","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":" * unique in terms of identity in the UniqueEntryList. However, the removal of a entry uses Entry#equals(Object) so","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":" * as to ensure that the entry with exactly the same fields will be removed.","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":" * \u003cp\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":" * @see Entry#isSameEntry(Entry)","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"public class UniqueEntryList implements Iterable\u003cEntry\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"    private final ObservableList\u003cEntry\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"    private final ObservableList\u003cEntry\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"     * Returns true if the list contains an equivalent entry as the given argument.","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"    public boolean contains(Entry toCheck) {","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"     * Adds a entry to the list.","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"     * The entry must not already exist in the list.","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"    public void add(Entry toAdd) {","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"            throw new DuplicateEntryException();","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"     * Replaces the entry {@code target} in the list with {@code editedEntry}.","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"     * The entry identity of {@code editedEntry} must not be the same as another existing entry in the list.","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"    public void setEntry(Entry target, Entry editedEntry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"        requireAllNonNull(target, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"            throw new EntryNotFoundException();","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        if (!target.isSameEntry(editedEntry) \u0026\u0026 contains(editedEntry)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"            throw new DuplicateEntryException();","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"        internalList.set(index, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"     * Replaces the contents of this list with {@code entries}.","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"     * {@code entries} must not contain duplicate entries.","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"Donavanty"},"content":"    public void setEntry(UniqueEntryList replacement) {","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"     * Replaces the contents of this list with {@code entries}.","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"     * {@code entries} must not contain duplicate entries.","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"    public void setEntry(List\u003cEntry\u003e entries) {","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"        requireAllNonNull(entries);","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"        if (!entriesAreUnique(entries)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"            throw new DuplicateEntryException();","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":91,"author":{"gitId":"Donavanty"},"content":"        internalList.setAll(entries);","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"     * Removes the equivalent entry from the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"Donavanty"},"content":"     * The entry must exist in the list.","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"Donavanty"},"content":"    public void remove(Entry toRemove) {","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"Donavanty"},"content":"            throw new EntryNotFoundException();","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"        }","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"    public ObservableList\u003cEntry\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":"    public Iterator\u003cEntry\u003e iterator() {","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"                || (other instanceof UniqueEntryList // instanceof handles nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 internalList.equals(((UniqueEntryList) other).internalList));","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":"     * Returns true if {@code entries} contains only unique entries.","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"    private boolean entriesAreUnique(List\u003cEntry\u003e entries) {","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"Donavanty"},"content":"        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {","lastModifiedDate":"2021-03-17"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"            for (int j \u003d i + 1; j \u003c entries.size(); j++) {","lastModifiedDate":"2021-03-17"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"                if (entries.get(i).isSameEntry(entries.get(j))) {","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":63,"-":79}},{"path":"src/main/java/fooddiary/model/entry/exceptions/DuplicateEntryException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":" * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have the same","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":" * identity).","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"public class DuplicateEntryException extends RuntimeException {","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"    public DuplicateEntryException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"        super(\"Operation would result in duplicate entries\");","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Donavanty":11}},{"path":"src/main/java/fooddiary/model/entry/exceptions/EntryNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":" * Signals that the operation is unable to find the specified entry.","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"public class EntryNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Donavanty":6}},{"path":"src/main/java/fooddiary/model/tag/Categories.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.tag;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"public enum Categories {","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"    CHINESE,","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"    DESSERT,","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"    FASTFOOD,","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    FRUITS,","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"    FUSION,","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"    HALAL,","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    INDIAN,","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    JAPANESE,","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    KOREAN,","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    MALAY,","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"    VEGAN,","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"    VEGETARIAN,","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"    WESTERN,","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"    OTHERS,","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"    INVALID;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"     * Checks if a String given fits any of the Categories in Categories.","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"     * @param test","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"     * @return boolean","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"    public static boolean matches(String test) {","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"        ArrayList\u003cString\u003e categories \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"        for (Categories category : Categories.values()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"            categories.add(category.name().toLowerCase());","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"        return categories.contains(test.toLowerCase());","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"     * Finds a Category for user to save as,","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"     * if category is not found, classified as others.","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"     * @param categoryInput","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"     * @return a Category based on what user has input","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"    public static Categories find(String categoryInput) {","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"        for (Categories category : Categories.values()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"            if (category.name().toLowerCase().contains(categoryInput.toLowerCase())) {","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"                return category;","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-07"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"        return Categories.INVALID;","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"     * Displays Categories in title case.","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"     * @return string of tag category in title case","lastModifiedDate":"2021-03-07"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"    public String titleCase() {","lastModifiedDate":"2021-03-07"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"        String categoryInUpperCase \u003d this.name();","lastModifiedDate":"2021-03-07"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"        String firstLetter \u003d categoryInUpperCase.substring(0, 1);","lastModifiedDate":"2021-03-07"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"        String remainingLetters \u003d categoryInUpperCase.substring(1);","lastModifiedDate":"2021-03-07"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"        remainingLetters \u003d remainingLetters.toLowerCase();","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"        String categoryInTitleCase \u003d firstLetter + remainingLetters;","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"        return categoryInTitleCase;","lastModifiedDate":"2021-03-07"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":65,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Sidney011100"},"content":"     * Lists all Categories","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"     * @return list of Categories","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"Sidney011100"},"content":"    public static String listAll() {","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"        StringBuilder list \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"        for (Categories category : Categories.values()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"            if (!category.name().equals(\"INVALID\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"                list.append(category.titleCase());","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"Sidney011100"},"content":"                list.append(\"\\n\");","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"Sidney011100"},"content":"        return list.toString();","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"Donavanty":4,"Sidney011100":76}},{"path":"src/main/java/fooddiary/model/tag/School.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Sidney011100"},"content":"package fooddiary.model.tag;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"public enum School {","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"    BIZ,","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"    CLB,","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"    DENT,","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    FASS,","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"    FOE,","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"    MED,","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    NUSS,","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    PGP,","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    SCIENCE,","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    SDE,","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"    SOC,","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"    USC,","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"    UTOWN,","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"    UHALL,","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"    VENTUS,","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"    YIH,","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"    INVALID;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"    private static ArrayList\u003cString\u003e schools \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"     * Checks if a String given fits any of the school name in School.","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"     * @param input","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"     * @return boolean","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"    public static boolean matches(String input) {","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"        if (schools.size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"            for (School school : School.values()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"                schools.add(school.name());","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"        return schools.contains(input.toUpperCase());","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"     * Finds a School for user to save as,","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"     * if category is not found, classified as others.","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"     * @param input","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"     * @return a School based on what user has input","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"    public static School find(String input) {","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"        for (School school : School.values()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"            if (school.name().toUpperCase().contains(input.toUpperCase())) {","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"                return school;","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"        return School.INVALID;","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"     * Lists all Schools","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"     * @return list of school","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"    public static String listAll() {","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"        StringBuilder list \u003d new StringBuilder(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"        for (School school : School.values()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"            if (!school.name().equals(\"INVALID\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"Sidney011100"},"content":"                list.append(school.name());","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"Sidney011100"},"content":"                list.append(\"\\n\");","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"Sidney011100"},"content":"        return list.toString();","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"Donavanty":1,"Sidney011100":71}},{"path":"src/main/java/fooddiary/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.tag;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":" * Represents a Tag in the food diary.","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags invalid.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    public final String tag;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"     * @param tag A valid tag name.","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"    public Tag(String tag) {","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"        AppUtil.checkArgument(isValidTagName(tag), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"        if (isValidSchoolName(tag)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"            this.tag \u003d School.find(tag).name();","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"        } else {","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"            this.tag \u003d Categories.find(tag).titleCase();","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"    public static boolean isValidTagName(String tagCategory) {","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"        return isValidCategoryName(tagCategory) || isValidSchoolName(tagCategory);","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"    private static boolean isValidCategoryName(String tagCategory) {","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"        return Categories.matches(tagCategory) \u0026\u0026 !(tagCategory.toLowerCase().equals(\"invalid\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"    private static boolean isValidSchoolName(String tagCategory) {","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"        return School.matches(tagCategory) \u0026\u0026 !(tagCategory.toUpperCase().equals(\"INVALID\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 this.tag.equals(((Tag) other).tag)); // state check","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"        return tag.hashCode();","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"        return \u0027[\u0027 + this.tag + \u0027]\u0027;","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Donavanty":5,"Sidney011100":26,"-":36}},{"path":"src/main/java/fooddiary/model/tag/TagCategory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Sidney011100"},"content":"package fooddiary.model.tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"public class TagCategory extends Tag {","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Categories should be of displayed categories.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"                                                        + Categories.listAll();","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    private String tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    private Categories category;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"     * @param tag A valid tag name.","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"    public TagCategory(String tag) {","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"        super(Categories.find(tag).name());","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"        AppUtil.checkArgument(isValidTagName(tag), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"        if (isValidTagName(tag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"            this.category \u003d Categories.find(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"            this.tag \u003d Categories.find(tag).titleCase();","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    public String getTag() {","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"        return this.tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"    public static boolean isValidTagName(String tagCategory) {","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"        return Categories.matches(tagCategory) \u0026\u0026 !(tagCategory.toUpperCase().equals(Categories.INVALID.name()));","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"                || (other instanceof TagCategory // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 this.tag.equals(((Tag) other).tag)); // state check","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"        return getTag().hashCode();","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"    public String toString() {","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"        return \u0027[\u0027 + this.tag + \u0027]\u0027;","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Sidney011100":58}},{"path":"src/main/java/fooddiary/model/tag/TagSchool.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Sidney011100"},"content":"package fooddiary.model.tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.commons.util.AppUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"public class TagSchool extends Tag {","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"School(s) should be of displayed schools.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"                                                        + School.listAll();","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"    private School school;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"    private String tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"     * @param tag A valid tag name.","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"    public TagSchool(String tag) {","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"        super(School.find(tag).name());","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"        requireNonNull(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"Sidney011100"},"content":"        AppUtil.checkArgument(isValidTagName(tag), tag + MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"        if (isValidTagName(tag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"            this.school \u003d School.find(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"            this.tag \u003d School.find(tag).name();","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    public String getTag() {","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"        return this.tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"    public static boolean isValidTagName(String tag) {","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"        return School.matches(tag) \u0026\u0026 !(tag.equals(School.INVALID.name()));","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"                || (other instanceof TagSchool // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"                \u0026\u0026 this.tag.equals(((Tag) other).tag)); // state check","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"        return tag.hashCode();","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"    public String toString() {","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"        return \u0027[\u0027 + this.tag + \u0027]\u0027;","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Sidney011100":56}},{"path":"src/main/java/fooddiary/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"    public static Entry[] getSampleEntries() {","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"        return new Entry[] {","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"The Deck\"), new Rating(\"5\"), new Price(\"8\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"The mala at the deck was so good. \"","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"                    + \"Gravy was super flavourful. Avoid the waffles.  \"","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"                    + \"Yakult fruit juice is a must try. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"                    + \"Really cheap coffee, that does the job. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"                    + \"Yong Tau Fu is highly recommended. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"                    + \"Western store does an okay job, the portion is a little small. \"),","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Faculty of Arts \u0026 Social Sciences\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"dessert\", \"chinese\", \"western\", \"malay\", \"indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"FASS\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Frontier AC\"), new Rating(\"4\"), new Price(\"4\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"Love the Pasta Express, Taiwan and Ayam Penyet! Get the coffee!\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Faculty of Science, S16\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"chinese\", \"western\", \"malay\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"Science\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Frontier NonAC\"), new Rating(\"4\"), new Price(\"7\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"Cheap and affordable food! Western store was amazing, and thai store was not bad.\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Faculty of Science, S16\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"dessert\", \"chinese\", \"western\", \"malay\", \"indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"Science\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"PGP AC\"), new Rating(\"4\"), new Price(\"8\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"Amazing mala and Ramen store\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Prince George\u0027s Park Residences\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"japanese\", \"chinese\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"PGP\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Ameens\"), new Rating(\"5\"), new Price(\"5\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    getReviewList(\"Cheese fries is lit!!!\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"12 Clementi Rd, Singapore 129742\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"Indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"SOC\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"            new Entry(new Name(\"Techno Edge\"), new Rating(\"5\"), new Price(\"5\"),","lastModifiedDate":"2021-04-04"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"Food is cheap and good! Especially the mixed rice stall.\"),","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"2 Engineering Drive 4, Singapore 117584\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"dessert\", \"chinese\", \"western\", \"malay\", \"indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"FOE\", \"SDE\", \"CLB\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"The Spread\"), new Rating(\"3\"), new Price(\"4\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"Highly-priced, the pastas are worth it but the other main courses are questionable.\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Business School Mochtar Riady Building\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"western\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"BIZ\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Shaw Foundation House\"), new Rating(\"3\"), new Price(\"1\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"It’s overpriced, only suited for occasions where I’m feeling more grandiose.\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Shaw Foundation Alumni House\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"chinese\", \"dessert\", \"indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"NUSS\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Fine Food\"), new Rating(\"2\"), new Price(\"6\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"The mala was trash. \"","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"                    + \"There was so much MSG in the food, it felt like I was eating salt.\"","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"                    + \"Chinese food gives high carbs. Would go for the fishball noodles.\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Town Plaza\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"chinese\", \"dessert\", \"indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"UTOWN\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Flavours\"), new Rating(\"3\"), new Price(\"12\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"The fishball noodles were average, it did not taste nice nor did it taste good. \"","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"                    + \"It was edible. Wide delicious variety of cai fan dishes\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Stephen Riady Centre\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"chinese\", \"dessert\", \"indian\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"UTOWN\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Hwangs Korean Restaurant\"), new Rating(\"4\"), new Price(\"1\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"The kimchi was LIT!!! It feels as though i’m eating in korea!\"","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"Sidney011100"},"content":"                        + \" Definitely will go back again\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Town Plaza\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"korean\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"UTOWN\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"Supersnacks\"), new Rating(\"3\"), new Price(\"6\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                getReviewList(\"Love the soya bean ice cream!\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Town Plaza\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"western\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"Sidney011100"},"content":"                getTagSchoolSet(\"UTOWN\")),","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            new Entry(new Name(\"2359 Li Ji Coffeehouse\"), new Rating(\"3\"), new Price(\"3\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"Sidney011100"},"content":"                getReviewList(\"Limited choices, but really good spicy noodles and toast.\"","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"                    + \" Good supper snack!\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"Sidney011100"},"content":"                new Address(\"Stephen Riady Centre\"),","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"Sidney011100"},"content":"                getTagCategorySet(\"chinese\"), getTagSchoolSet(\"UTOWN\"))","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"    public static ReadOnlyFoodDiary getSampleFoodDiary() {","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"        FoodDiary sampleAb \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"        for (Entry sampleEntry : getSampleEntries()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"Donavanty"},"content":"            sampleAb.addEntry(sampleEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":113,"author":{"gitId":"Sidney011100"},"content":"    public static Set\u003cTagCategory\u003e getTagCategorySet(String... strings) {","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":115,"author":{"gitId":"Sidney011100"},"content":"                .map(TagCategory::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"Sidney011100"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"Sidney011100"},"content":"    public static Set\u003cTagSchool\u003e getTagSchoolSet(String... strings) {","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"Sidney011100"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"Sidney011100"},"content":"                .map(TagSchool::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns a review list containing the list of strings given.","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static List\u003cReview\u003e getReviewList(String... strings) {","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .map(Review::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2021-03-26"},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"Donavanty":17,"Sidney011100":60,"DineshMagesvaran":3,"-":20,"Prabhakaran-Gokul":34}},{"path":"src/main/java/fooddiary/storage/FoodDiaryStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":" * Represents a storage for {@link FoodDiary}.","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"public interface FoodDiaryStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"    Path getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"     * Returns AddressBook data as a {@link ReadOnlyFoodDiary}.","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"    Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"     * @see #getFoodDiaryFilePath()","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"    Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"     * Saves the given {@link ReadOnlyFoodDiary} to the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"     * @param foodDiary cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"    void saveFoodDiary(ReadOnlyFoodDiary foodDiary) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"     * @see #saveFoodDiary(ReadOnlyFoodDiary)","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"    void saveFoodDiary(ReadOnlyFoodDiary foodDiary, Path filePath) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":23,"-":25}},{"path":"src/main/java/fooddiary/storage/JsonAdaptedEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":" * Jackson-friendly version of {@link Entry}.","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"class JsonAdaptedEntry {","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Entry\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final List\u003cJsonAdaptedReview\u003e reviews \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    private final String rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    private final String price;","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"    private final List\u003cJsonAdaptedTagCategory\u003e category \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"    private final List\u003cJsonAdaptedTagSchool\u003e school \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"     * Constructs a {@code JsonAdaptedEntry} with the given entry details.","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"    public JsonAdaptedEntry(@JsonProperty(\"name\") String name, @JsonProperty(\"rating\") String rating,","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                            @JsonProperty(\"price\") String price,","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                            @JsonProperty(\"review\") List\u003cJsonAdaptedReview\u003e reviews,","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"                            @JsonProperty(\"address\") String address,","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"                            @JsonProperty(\"category\") List\u003cJsonAdaptedTagCategory\u003e category,","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"                            @JsonProperty(\"school\") List\u003cJsonAdaptedTagSchool\u003e school) {","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        this.rating \u003d rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        this.price \u003d price;","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (reviews !\u003d null) {","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.reviews.addAll(reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"        if (category !\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"            this.category.addAll(category);","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"        if (school !\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"            this.school.addAll(school);","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"     * Converts a given {@code Entry} into this class for Jackson use.","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"    public JsonAdaptedEntry(Entry source) {","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"        rating \u003d source.getRating().value;","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        price \u003d source.getPrice().value;","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        reviews.addAll(source.getReviews().stream()","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .map(JsonAdaptedReview::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"Sidney011100"},"content":"        category.addAll(source.getTagCategories().stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"                .map(JsonAdaptedTagCategory::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Sidney011100"},"content":"        school.addAll(source.getTagSchools().stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"                .map(JsonAdaptedTagSchool::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"     * Converts this Jackson-friendly adapted entry object into the model\u0027s {@code Entry} object.","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted entry.","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"    public Entry toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"Sidney011100"},"content":"        final List\u003cTagCategory\u003e entryTagCategories \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"Sidney011100"},"content":"        final List\u003cTagSchool\u003e entryTagSchools \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        final List\u003cReview\u003e reviewList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"Sidney011100"},"content":"        for (JsonAdaptedTagCategory tag : category) {","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"Sidney011100"},"content":"            entryTagCategories.add(tag.toModelType());","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"        for (JsonAdaptedTagSchool tag : school) {","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"Sidney011100"},"content":"            entryTagSchools.add(tag.toModelType());","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        for (JsonAdaptedReview review : reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reviewList.add(review.toModelType());","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"        if (rating \u003d\u003d null) {","lastModifiedDate":"2021-03-08"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));","lastModifiedDate":"2021-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"        if (!Rating.isValidRating(rating)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"        final Rating modelRating \u003d new Rating(rating);","lastModifiedDate":"2021-03-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"        if (price \u003d\u003d null) {","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"        if (!Price.isValidPrice(price)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"        final Price modelPrice \u003d new Price(price);","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        final List\u003cReview\u003e modelReviews \u003d new ArrayList\u003c\u003e(reviewList);","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"Sidney011100"},"content":"        final Set\u003cTagCategory\u003e modelTagCategories \u003d new HashSet\u003c\u003e(entryTagCategories);","lastModifiedDate":"2021-03-27"},{"lineNumber":139,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":140,"author":{"gitId":"Sidney011100"},"content":"        final Set\u003cTagSchool\u003e modelTagSchools \u003d new HashSet\u003c\u003e(entryTagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":142,"author":{"gitId":"Sidney011100"},"content":"        return new Entry(modelName, modelRating, modelPrice, modelReviews, modelAddress,","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"Sidney011100"},"content":"                modelTagCategories, modelTagSchools);","lastModifiedDate":"2021-03-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":8,"Donavanty":21,"Sidney011100":32,"DineshMagesvaran":13,"-":57,"Prabhakaran-Gokul":15}},{"path":"src/main/java/fooddiary/storage/JsonAdaptedReview.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Jackson-friendly version of {@link Review}.","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"class JsonAdaptedReview {","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final String reviewValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs a {@code JsonAdaptedReview} with the given {@code reviewValue}.","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public JsonAdaptedReview(String reviewValue) {","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.reviewValue \u003d reviewValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts a given {@code Review} into this class for Jackson use.","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public JsonAdaptedReview(Review source) {","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        reviewValue \u003d source.value;","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @JsonValue","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getTagName() {","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return reviewValue;","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Review} object.","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted review.","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Review toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!Review.isValidReview(reviewValue)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new IllegalValueException(Review.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new Review(reviewValue);","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"Prabhakaran-Gokul":48}},{"path":"src/main/java/fooddiary/storage/JsonAdaptedTagCategory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":" * Jackson-friendly version of {@link TagCategory}.","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"class JsonAdaptedTagCategory {","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    private final String tag;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"     * Constructs a {@code JsonAdaptedTagCategory} with the given {@code tagName}.","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"    public JsonAdaptedTagCategory(String tagName) {","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"        this.tag \u003d tagName;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"    public JsonAdaptedTagCategory(TagCategory source) {","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"        this.tag \u003d source.getTag();","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"        return tag;","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"    public TagCategory toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"        if (!TagCategory.isValidTagName(tag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"            throw new IllegalValueException(TagCategory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"        return new TagCategory(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Donavanty":3,"Sidney011100":14,"-":31}},{"path":"src/main/java/fooddiary/storage/JsonAdaptedTagSchool.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"public class JsonAdaptedTagSchool {","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"    private final String tag;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"    public JsonAdaptedTagSchool(String tagName) {","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"        this.tag \u003d tagName;","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"    public JsonAdaptedTagSchool(TagSchool source) {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"        this.tag \u003d source.getTag();","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"        return tag;","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"    public TagSchool toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"        if (!TagSchool.isValidTagName(tag)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"            throw new IllegalValueException(TagSchool.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"        return new TagSchool(tag);","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Donavanty":3,"Sidney011100":12,"-":29}},{"path":"src/main/java/fooddiary/storage/JsonFoodDiaryStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.FileUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.JsonUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"public class JsonFoodDiaryStorage implements FoodDiaryStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodDiaryStorage.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    public JsonFoodDiaryStorage(Path filePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    public Path getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"    public Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary() throws DataConversionException {","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        return readFoodDiary(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"     * Similar to {@link #readFoodDiary()}.","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"    public Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"        Optional\u003cJsonSerializableFoodDiary\u003e jsonFoodDiary \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-04-01"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"                filePath, JsonSerializableFoodDiary.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"        if (!jsonFoodDiary.isPresent()) {","lastModifiedDate":"2021-04-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"            return Optional.of(jsonFoodDiary.get().toModelType());","lastModifiedDate":"2021-04-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"    public void saveFoodDiary(ReadOnlyFoodDiary foodDiary) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        saveFoodDiary(foodDiary, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"     * Similar to {@link #saveFoodDiary(ReadOnlyFoodDiary)}.","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"    public void saveFoodDiary(ReadOnlyFoodDiary foodDiary, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"        requireNonNull(foodDiary);","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableFoodDiary(foodDiary), filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Donavanty":23,"Sidney011100":3,"-":54}},{"path":"src/main/java/fooddiary/storage/JsonSerializableFoodDiary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":" * An Immutable FoodDiary that is serializable to JSON format.","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"@JsonRootName(value \u003d \"foodDiary\")","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"class JsonSerializableFoodDiary {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"    public static final String MESSAGE_DUPLICATE_FOOD_DIARY \u003d \"Entries list contains duplicate person(s).\";","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"    private final List\u003cJsonAdaptedEntry\u003e entries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"     * Constructs a {@code JsonSerializableFoodDiary} with the given entries.","lastModifiedDate":"2021-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    public JsonSerializableFoodDiary(@JsonProperty(\"entries\") List\u003cJsonAdaptedEntry\u003e entries) {","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        this.entries.addAll(entries);","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"     * Converts a given {@code ReadOnlyFoodDiary} into this class for Jackson use.","lastModifiedDate":"2021-04-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableFoodDiary}.","lastModifiedDate":"2021-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"    public JsonSerializableFoodDiary(ReadOnlyFoodDiary source) {","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"        entries.addAll(source.getEntryList().stream().map(JsonAdaptedEntry::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"     * Converts this food diary into the model\u0027s {@code FoodDiary} object.","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"    public FoodDiary toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        FoodDiary foodDiary \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"        for (JsonAdaptedEntry jsonAdaptedEntry : entries) {","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"            Entry entry \u003d jsonAdaptedEntry.toModelType();","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"            if (foodDiary.hasEntry(entry)) {","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD_DIARY);","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"            foodDiary.addEntry(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"        return foodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Donavanty":28,"Sidney011100":3,"-":29}},{"path":"src/main/java/fooddiary/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.JsonUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":6,"-":42}},{"path":"src/main/java/fooddiary/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"public interface Storage extends FoodDiaryStorage, UserPrefsStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"    Path getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"    Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    void saveFoodDiary(ReadOnlyFoodDiary foodDiary) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Donavanty":13,"-":19}},{"path":"src/main/java/fooddiary/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":" * Manages storage of FoodDiary data in local storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"    private FoodDiaryStorage foodDiaryStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"     * Creates a {@code StorageManager} with the given {@code FoodDiaryStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    public StorageManager(FoodDiaryStorage foodDiaryStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"        this.foodDiaryStorage \u003d foodDiaryStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodDiary methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"    public Path getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"        return foodDiaryStorage.getFoodDiaryFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"    public Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"        return readFoodDiary(foodDiaryStorage.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"    public Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"        return foodDiaryStorage.readFoodDiary(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"    public void saveFoodDiary(ReadOnlyFoodDiary foodDiary) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"        saveFoodDiary(foodDiary, foodDiaryStorage.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"    public void saveFoodDiary(ReadOnlyFoodDiary foodDiary, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"        foodDiaryStorage.saveFoodDiary(foodDiary, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":28,"-":51}},{"path":"src/main/java/fooddiary/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":8,"-":30}},{"path":"src/main/java/fooddiary/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandResult;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"         * @see fooddiary.logic.Logic#execute(String)","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"Donavanty":5,"-":80}},{"path":"src/main/java/fooddiary/ui/EntryCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":" * An UI component that displays information of a {@code Entry}.","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"public class EntryCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"    private static final String FXML \u003d \"EntryListCard.fxml\";","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    public final Entry entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    private Label rating;","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"    private Label price;","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"    @FXML","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"    private Label reviews;","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"    private FlowPane tagCategories;","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    private FlowPane tagSchools;","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"     * Creates a {@code EntryCode} with the given {@code Entry} and index to display.","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"    public EntryCard(Entry entry, int displayedIndex) {","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        this.entry \u003d entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        name.setText(entry.getName().fullName);","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"        rating.setText(String.format(\"Rating: %s / 5\", entry.getRating().value));","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"        price.setText(String.format(\"Price: %s\" + \"%s\", Price.PRICE_DOLLAR_SIGN, entry.getPrice().value));","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"        address.setText(String.format(\"Address: %s\", entry.getAddress().value));","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"        String reviewStr \u003d \"\";","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"        for (int i \u003d 0; i \u003c entry.getReviews().size(); i++) {","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"            reviewStr +\u003d entry.getReviews().get(i).value + \"\\n\";","lastModifiedDate":"2021-04-04"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        reviews.setText(String.format(\"Reviews:\\n%s\", reviewStr));","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"        entry.getTagCategories().stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"Sidney011100"},"content":"                .sorted(Comparator.comparing(TagCategory::getTag))","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"                .forEach(tag -\u003e tagCategories.getChildren().add(new Label(tag.getTag())));","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"        entry.getTagSchools().stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"                .sorted(Comparator.comparing(TagSchool::getTag))","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"                .forEach(tag -\u003e tagSchools.getChildren().add(new Label(tag.getTag())));","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"        if (!(other instanceof EntryCard)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":90,"author":{"gitId":"Donavanty"},"content":"        EntryCard card \u003d (EntryCard) other;","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"                \u0026\u0026 entry.equals(card.entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"marcusleeeugene":15,"Donavanty":17,"Sidney011100":8,"DineshMagesvaran":2,"-":52}},{"path":"src/main/java/fooddiary/ui/EntryListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":" * Panel containing the list of entries.","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"public class EntryListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"    private static final String FXML \u003d \"EntryListPanel.fxml\";","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EntryListPanel.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"    private ListView\u003cEntry\u003e entryListView;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"     * Creates a {@code EntryListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    public EntryListPanel(ObservableList\u003cEntry\u003e entryList) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"        entryListView.setItems(entryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"        entryListView.setCellFactory(listView -\u003e new EntryListViewCell());","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Entry} using a {@code EntryCard}.","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"    class EntryListViewCell extends ListCell\u003cEntry\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"        protected void updateItem(Entry entry, boolean empty) {","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"            super.updateItem(entry, empty);","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"            if (empty || entry \u003d\u003d null) {","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"                setGraphic(new EntryCard(entry, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Donavanty":21,"-":28}},{"path":"src/main/java/fooddiary/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCodeCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-t14-2.github.io/tp/UserGuide.html#quick-start\";","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"    public static final String EXTERNAL_DETAILS \u003d \"For more details, refer to our user guide: \\n\" + USERGUIDE_URL;","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"    public static final String CATEGORIES \u003d \"2. Food Categories:\\nFASTFOOD, WESTERN, INDIAN, CHINESE, FUSION, \"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"                    + \"JAPANESE, KOREAN, MALAY, HALAL, VEGETARIAN, VEGAN, FRUITS, DESSERT, OTHERS\\n\\n\\n\";","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    public static final String SCHOOL_LOC \u003d \"3. School Locations:\\nSOC, FASS, BIZ, SCIENCE, FOE, UTOWN, NUSS, YIH, \"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"                    + \"PGP, USC, CLB, UHALL, SDE, MED, DENT, VENTUS\\n\\n\\n\";","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"    public static final String HELP_MESSAGE \u003d \"1. List of Commands:\\n\\n\"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"                    + \"add: Adds an entry to the Food Diary.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"                    + \"     add n/Al Amaan ra/5 p/6 re/I like their food a lot! a/3155 Commonwealth Ave W, \"","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"                    + \"Singapore 129588 c/Indian c/Halal s/Ventus\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"                    + \"addon: Adds on details (i.e review, price, category) of the entry \"","lastModifiedDate":"2021-04-11"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"                    + \"identified by the index number used in the list of displayed entries.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"                    + \"     addon 1 p/7 re/I like this food a lot!\\n\"","lastModifiedDate":"2021-04-11"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"                    + \"     addon 2 p/18\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"                    + \"edit: Edits the details of the entry identified by the index number used in the \"","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"                    + \"displayed entry list. Existing values will be overwritten by the input values.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"                    + \"     edit 1 ra/5 re/I like this food a lot!\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"                    + \"delete: Deletes an entry from the Food Diary.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"                    + \"     delete 1\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"                    + \"list: Lists all the entries currently in The Food Diary.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"                    + \"     list\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"                    + \"find: Finds entries whose names, ratings, reviews, address and categories \"","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"                    + \"match any of the provided keywords.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"                    + \"     find Amaan\\n\"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"                    + \"     find fastfood indian $6\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"                    + \"findall: Finds entries whose names, ratings, address and categories match ALL \"","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"                    + \"of the provided keywords.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"                    + \"     findall Amaan 5/5 $5-15 indian\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"                    + \"view: Opens up a window, showing the details of a\"","lastModifiedDate":"2021-04-11"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"                    + \"specified entry in a full expanded view.\"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"                    + \" Allows the user to read through reviews that are too \"","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"                    + \"lengthy to be shown in the main UI window.\"","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"                    + \" Use ‘ESC’ key to quickly exit the view window.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"                    + \"     view 1\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"                    + \"revise: Opens up a window, showing the existing details of an entry and allowing for \"","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"                    + \"quick corrections and updates without requiring the use of prefixes and command syntax in the\"","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"                    + \" UI. Use ‘TAB’ key to iterate through fields, ‘Ctrl + S’ (Windows),\"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"                    + \" ‘Command + S’ (Mac) to save,\"","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"                    + \" ‘ESC’ key to quickly exit the revise window.\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"                    + \"     revise 1\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"                    + \"Clear: Deletes all entries from the food diary\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"                    + \"     clear\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"                    + \"Exit: Exits the food diary\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"                    + \"     exit\\n\\n\\n\\n\"","lastModifiedDate":"2021-04-05"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"                    + CATEGORIES + SCHOOL_LOC + EXTERNAL_DETAILS;","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":75,"author":{"gitId":"Donavanty"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"    private TextArea helpMessageField;","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"     * Creates a new HelpWindow with a TextArea for the help guide.","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"        final KeyCombination esc \u003d new KeyCodeCombination(KeyCode.ESCAPE);","lastModifiedDate":"2021-03-31"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"        setEscShortCut(esc);","lastModifiedDate":"2021-03-31"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"        helpMessageField.setText(HELP_MESSAGE);","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"     *                                       if this method is called on a thread other than the","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"     *                                       JavaFX Application Thread.","lastModifiedDate":"2021-03-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *                                       if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     *                                       if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *                                       if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":143,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up \u0027ESC\u0027 key to hide window","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"marcusleeeugene"},"content":"     * @param esc \u0027ESC\u0027 on keyboard","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"marcusleeeugene"},"content":"    private void setEscShortCut(KeyCombination esc) {","lastModifiedDate":"2021-03-31"},{"lineNumber":149,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":150,"author":{"gitId":"marcusleeeugene"},"content":"            if (esc.match(event)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"marcusleeeugene"},"content":"                hide();","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"marcusleeeugene"},"content":"                event.consume();","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"marcusleeeugene"},"content":"        });","lastModifiedDate":"2021-03-31"},{"lineNumber":155,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"marcusleeeugene":27,"Donavanty":56,"-":84}},{"path":"src/main/java/fooddiary/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.Logic;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandResult;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCodeCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"    private EntryListPanel entryListPanel;","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    private ViewWindow viewWindow;","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    private ReviseWindow reviseWindow;","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"    private StackPane entryListPanelPlaceholder;","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        final KeyCombination esc \u003d new KeyCodeCombination(KeyCode.ESCAPE);","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        setEscShortCut(esc);","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"        viewWindow \u003d new ViewWindow();","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"        reviseWindow \u003d new ReviseWindow();","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"Donavanty"},"content":"        entryListPanel \u003d new EntryListPanel(logic.getFilteredEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":127,"author":{"gitId":"Donavanty"},"content":"        entryListPanelPlaceholder.getChildren().add(entryListPanel.getRoot());","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":164,"author":{"gitId":"marcusleeeugene"},"content":"     * Opens the view window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2021-03-14"},{"lineNumber":165,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":166,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":167,"author":{"gitId":"marcusleeeugene"},"content":"    public void handleView(Entry entry) {","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"marcusleeeugene"},"content":"        assert entry !\u003d null : \"Entry is missing\";","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"marcusleeeugene"},"content":"        viewWindow.setEntryContent(entry);","lastModifiedDate":"2021-03-28"},{"lineNumber":170,"author":{"gitId":"marcusleeeugene"},"content":"        if (!viewWindow.isShowing()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":171,"author":{"gitId":"marcusleeeugene"},"content":"            viewWindow.show();","lastModifiedDate":"2021-03-14"},{"lineNumber":172,"author":{"gitId":"marcusleeeugene"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":173,"author":{"gitId":"marcusleeeugene"},"content":"            viewWindow.focus();","lastModifiedDate":"2021-03-14"},{"lineNumber":174,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":175,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":176,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":177,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"marcusleeeugene"},"content":"     * Opens the revise window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"marcusleeeugene"},"content":"    public void handleRevise(Entry entry, Index index) {","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"marcusleeeugene"},"content":"        assert entry !\u003d null : \"Entry is missing\";","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"marcusleeeugene"},"content":"        assert index !\u003d null : \"Index is missing\";","lastModifiedDate":"2021-03-29"},{"lineNumber":184,"author":{"gitId":"marcusleeeugene"},"content":"        reviseWindow.setEntryContent(entry, index, this);","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"marcusleeeugene"},"content":"        if (!reviseWindow.isShowing()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":186,"author":{"gitId":"marcusleeeugene"},"content":"            reviseWindow.show();","lastModifiedDate":"2021-03-29"},{"lineNumber":187,"author":{"gitId":"marcusleeeugene"},"content":"        } else {","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"marcusleeeugene"},"content":"            reviseWindow.focus();","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":191,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":197,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up \u0027ESC\u0027 key to exit main window","lastModifiedDate":"2021-03-31"},{"lineNumber":198,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":199,"author":{"gitId":"marcusleeeugene"},"content":"     * @param esc \u0027ESC\u0027 on keyboard","lastModifiedDate":"2021-03-31"},{"lineNumber":200,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":201,"author":{"gitId":"marcusleeeugene"},"content":"    private void setEscShortCut(KeyCombination esc) {","lastModifiedDate":"2021-03-31"},{"lineNumber":202,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":203,"author":{"gitId":"marcusleeeugene"},"content":"            if (esc.match(event)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":204,"author":{"gitId":"marcusleeeugene"},"content":"                handleExit();","lastModifiedDate":"2021-03-31"},{"lineNumber":205,"author":{"gitId":"marcusleeeugene"},"content":"                event.consume();","lastModifiedDate":"2021-03-31"},{"lineNumber":206,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":207,"author":{"gitId":"marcusleeeugene"},"content":"        });","lastModifiedDate":"2021-03-31"},{"lineNumber":208,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":209,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":219,"author":{"gitId":"marcusleeeugene"},"content":"        viewWindow.hide();","lastModifiedDate":"2021-03-14"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":223,"author":{"gitId":"Donavanty"},"content":"    public EntryListPanel getEntryListPanel() {","lastModifiedDate":"2021-03-17"},{"lineNumber":224,"author":{"gitId":"Donavanty"},"content":"        return entryListPanel;","lastModifiedDate":"2021-03-17"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"Donavanty"},"content":"     * @see Logic#execute(String)","lastModifiedDate":"2021-03-17"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":233,"author":{"gitId":"marcusleeeugene"},"content":"    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2021-03-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":243,"author":{"gitId":"marcusleeeugene"},"content":"            if (commandResult.isEnableView()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":244,"author":{"gitId":"marcusleeeugene"},"content":"                handleView(commandResult.getEntry());","lastModifiedDate":"2021-03-28"},{"lineNumber":245,"author":{"gitId":"marcusleeeugene"},"content":"            } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":246,"author":{"gitId":"marcusleeeugene"},"content":"                viewWindow.hide();","lastModifiedDate":"2021-03-27"},{"lineNumber":247,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":248,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":249,"author":{"gitId":"marcusleeeugene"},"content":"            if (commandResult.isReviseEntry()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":250,"author":{"gitId":"marcusleeeugene"},"content":"                handleRevise(commandResult.getEntry(), commandResult.getIndex());","lastModifiedDate":"2021-03-29"},{"lineNumber":251,"author":{"gitId":"marcusleeeugene"},"content":"            } else {","lastModifiedDate":"2021-03-29"},{"lineNumber":252,"author":{"gitId":"marcusleeeugene"},"content":"                reviseWindow.hide();","lastModifiedDate":"2021-03-29"},{"lineNumber":253,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":254,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"marcusleeeugene":70,"Donavanty":16,"-":180}},{"path":"src/main/java/fooddiary/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Donavanty":1,"-":27}},{"path":"src/main/java/fooddiary/ui/ReviseWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.awt.AWTException;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.awt.Robot;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.EditCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.parser.CliSyntax;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCodeCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":" * Controller for a Revise page","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"public class ReviseWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    private static Entry entry;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    private static Index index;","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    private static MainWindow mainWindow;","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ReviseWindow.class);","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String FXML \u003d \"ReviseWindow.fxml\";","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    private Label name;","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"    private Label price;","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"    private Label rating;","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"    private Label address;","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    private Label reviews;","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    private Label categoriesLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    private Label schoolsLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField nameText;","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField priceText;","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField ratingText;","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField addressText;","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"    private TextArea reviewsText;","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField categoriesText;","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField schoolsText;","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"    private Button reviseButton;","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a new ReviseWindow.","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"     * @param root Stage to use as the root of the ReviseWindow.","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"    public ReviseWindow(Stage root) {","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"        super(FXML, root);","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"        final KeyCombination activateRevise \u003d new KeyCodeCombination(KeyCode.S, KeyCombination.SHORTCUT_DOWN);","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"        setReviseShortCut(activateRevise, reviseButton);","lastModifiedDate":"2021-03-31"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"        final KeyCombination tabOverReviews \u003d new KeyCodeCombination(KeyCode.TAB);","lastModifiedDate":"2021-03-31"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"        setTabOverReviewsShortCut(tabOverReviews);","lastModifiedDate":"2021-03-31"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"        final KeyCombination esc \u003d new KeyCodeCombination(KeyCode.ESCAPE);","lastModifiedDate":"2021-03-31"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"        setEscShortCut(esc);","lastModifiedDate":"2021-03-31"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"        if (entry !\u003d null \u0026\u0026 index !\u003d null) {","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"            setEntryContent(entry, index, mainWindow);","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a new ReviseWindow.","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"    public ReviseWindow() {","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"        this(new Stage());","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"     * Shows the Revise window.","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if this method is called on a thread other","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       than the JavaFX Application Thread.","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if this method is called during animation or layout processing.","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if this method is called on the primary stage.","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if {@code dialogStage} is already showing.","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"    public void show() {","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"        logger.fine(\"Showing revise window of the specified entry.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().show();","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"marcusleeeugene"},"content":"        nameText.requestFocus();","lastModifiedDate":"2021-03-31"},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns true if the revise window is currently being shown.","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isShowing() {","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"marcusleeeugene"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"marcusleeeugene"},"content":"     * Hides the revise window.","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"marcusleeeugene"},"content":"    public void hide() {","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().hide();","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"marcusleeeugene"},"content":"     * Focuses on the revise window.","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"marcusleeeugene"},"content":"    public void focus() {","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":144,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up \u0027Ctrl + S\u0027 (Windows) or \u0027Command + S\u0027 (MAC) to complete revision","lastModifiedDate":"2021-03-31"},{"lineNumber":145,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":146,"author":{"gitId":"marcusleeeugene"},"content":"     * @param keyCombination \u0027Ctrl + S\u0027 (Windows) or \u0027Command + S\u0027 (MAC)","lastModifiedDate":"2021-03-31"},{"lineNumber":147,"author":{"gitId":"marcusleeeugene"},"content":"     * @param reviseButton Revise button to be activated","lastModifiedDate":"2021-03-31"},{"lineNumber":148,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":149,"author":{"gitId":"marcusleeeugene"},"content":"    private void setReviseShortCut(KeyCombination keyCombination, Button reviseButton) {","lastModifiedDate":"2021-03-31"},{"lineNumber":150,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"marcusleeeugene"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":152,"author":{"gitId":"marcusleeeugene"},"content":"                reviseButton.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2021-03-31"},{"lineNumber":153,"author":{"gitId":"marcusleeeugene"},"content":"                event.consume();","lastModifiedDate":"2021-03-31"},{"lineNumber":154,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":155,"author":{"gitId":"marcusleeeugene"},"content":"        });","lastModifiedDate":"2021-03-31"},{"lineNumber":156,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":157,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":158,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":159,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up \u0027TAB\u0027 key to tab over Reviews TextArea","lastModifiedDate":"2021-03-31"},{"lineNumber":160,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":161,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tabOverReviews \u0027TAB\u0027 on keyboard","lastModifiedDate":"2021-03-31"},{"lineNumber":162,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":163,"author":{"gitId":"marcusleeeugene"},"content":"    private void setTabOverReviewsShortCut(KeyCombination tabOverReviews) {","lastModifiedDate":"2021-03-31"},{"lineNumber":164,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":165,"author":{"gitId":"marcusleeeugene"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 tabOverReviews.match(event)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":166,"author":{"gitId":"marcusleeeugene"},"content":"                try {","lastModifiedDate":"2021-03-31"},{"lineNumber":167,"author":{"gitId":"marcusleeeugene"},"content":"                    Robot robot \u003d new Robot();","lastModifiedDate":"2021-03-31"},{"lineNumber":168,"author":{"gitId":"marcusleeeugene"},"content":"                    robot.keyPress(KeyCode.CONTROL.getCode());","lastModifiedDate":"2021-03-31"},{"lineNumber":169,"author":{"gitId":"marcusleeeugene"},"content":"                    robot.keyPress(KeyCode.TAB.getCode());","lastModifiedDate":"2021-03-31"},{"lineNumber":170,"author":{"gitId":"marcusleeeugene"},"content":"                    robot.keyRelease(KeyCode.TAB.getCode());","lastModifiedDate":"2021-03-31"},{"lineNumber":171,"author":{"gitId":"marcusleeeugene"},"content":"                    robot.keyRelease(KeyCode.CONTROL.getCode());","lastModifiedDate":"2021-03-31"},{"lineNumber":172,"author":{"gitId":"marcusleeeugene"},"content":"                } catch (AWTException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":173,"author":{"gitId":"marcusleeeugene"},"content":"                    return;","lastModifiedDate":"2021-03-31"},{"lineNumber":174,"author":{"gitId":"marcusleeeugene"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":175,"author":{"gitId":"marcusleeeugene"},"content":"                event.consume();","lastModifiedDate":"2021-03-31"},{"lineNumber":176,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":177,"author":{"gitId":"marcusleeeugene"},"content":"        });","lastModifiedDate":"2021-03-31"},{"lineNumber":178,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":179,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":180,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":181,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up \u0027ESC\u0027 key to hide window","lastModifiedDate":"2021-03-31"},{"lineNumber":182,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":183,"author":{"gitId":"marcusleeeugene"},"content":"     * @param esc \u0027ESC\u0027 on keyboard","lastModifiedDate":"2021-03-31"},{"lineNumber":184,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":185,"author":{"gitId":"marcusleeeugene"},"content":"    private void setEscShortCut(KeyCombination esc) {","lastModifiedDate":"2021-03-31"},{"lineNumber":186,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":187,"author":{"gitId":"marcusleeeugene"},"content":"            if (esc.match(event)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":188,"author":{"gitId":"marcusleeeugene"},"content":"                hide();","lastModifiedDate":"2021-03-31"},{"lineNumber":189,"author":{"gitId":"marcusleeeugene"},"content":"                event.consume();","lastModifiedDate":"2021-03-31"},{"lineNumber":190,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":191,"author":{"gitId":"marcusleeeugene"},"content":"        });","lastModifiedDate":"2021-03-31"},{"lineNumber":192,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":193,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":194,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":195,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets the content entry to be ready for revision.","lastModifiedDate":"2021-03-29"},{"lineNumber":196,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":197,"author":{"gitId":"marcusleeeugene"},"content":"     * @param entry entry","lastModifiedDate":"2021-03-29"},{"lineNumber":198,"author":{"gitId":"marcusleeeugene"},"content":"     * @param index index of entry","lastModifiedDate":"2021-03-29"},{"lineNumber":199,"author":{"gitId":"marcusleeeugene"},"content":"     * @param mainWindow main ui window","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":201,"author":{"gitId":"marcusleeeugene"},"content":"    public void setEntryContent(Entry entry, Index index, MainWindow mainWindow) {","lastModifiedDate":"2021-03-29"},{"lineNumber":202,"author":{"gitId":"marcusleeeugene"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-29"},{"lineNumber":203,"author":{"gitId":"marcusleeeugene"},"content":"        this.mainWindow \u003d mainWindow;","lastModifiedDate":"2021-03-29"},{"lineNumber":204,"author":{"gitId":"marcusleeeugene"},"content":"        nameText.setText(entry.getName().fullName);","lastModifiedDate":"2021-03-29"},{"lineNumber":205,"author":{"gitId":"marcusleeeugene"},"content":"        priceText.setText(String.format(\"%s\", entry.getPrice().value));","lastModifiedDate":"2021-03-29"},{"lineNumber":206,"author":{"gitId":"marcusleeeugene"},"content":"        ratingText.setText(String.format(\"%s\", entry.getRating().value));","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"marcusleeeugene"},"content":"        addressText.setText(entry.getAddress().value);","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"marcusleeeugene"},"content":"        String reviewsStr \u003d entry.getReviews().stream()","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"marcusleeeugene"},"content":"                .map(review -\u003e review.value + \"\\n\\n\")","lastModifiedDate":"2021-03-29"},{"lineNumber":211,"author":{"gitId":"marcusleeeugene"},"content":"                .collect(Collectors.joining());","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"marcusleeeugene"},"content":"        reviewsText.setText(reviewsStr);","lastModifiedDate":"2021-03-29"},{"lineNumber":213,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":214,"author":{"gitId":"marcusleeeugene"},"content":"        String categoriesStr \u003d entry.getTagCategories().stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":215,"author":{"gitId":"marcusleeeugene"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.getTag()))","lastModifiedDate":"2021-03-29"},{"lineNumber":216,"author":{"gitId":"marcusleeeugene"},"content":"                .map(tag -\u003e tag.getTag() + \" \")","lastModifiedDate":"2021-03-29"},{"lineNumber":217,"author":{"gitId":"marcusleeeugene"},"content":"                .collect(Collectors.joining());","lastModifiedDate":"2021-03-29"},{"lineNumber":218,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":219,"author":{"gitId":"marcusleeeugene"},"content":"        String schoolsStr \u003d entry.getTagSchools().stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"marcusleeeugene"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.getTag()))","lastModifiedDate":"2021-03-29"},{"lineNumber":221,"author":{"gitId":"marcusleeeugene"},"content":"                .map(tag -\u003e tag.getTag() + \" \")","lastModifiedDate":"2021-03-29"},{"lineNumber":222,"author":{"gitId":"marcusleeeugene"},"content":"                .collect(Collectors.joining());","lastModifiedDate":"2021-03-29"},{"lineNumber":223,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"marcusleeeugene"},"content":"        categoriesText.setText(categoriesStr);","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"marcusleeeugene"},"content":"        schoolsText.setText(schoolsStr);","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":227,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":228,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":229,"author":{"gitId":"marcusleeeugene"},"content":"     * Submits revision to edit command for update.","lastModifiedDate":"2021-03-29"},{"lineNumber":230,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":231,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws CommandException if invalid command given","lastModifiedDate":"2021-03-30"},{"lineNumber":232,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws ParseException if parsing formatting error occurs","lastModifiedDate":"2021-03-30"},{"lineNumber":233,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":234,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-29"},{"lineNumber":235,"author":{"gitId":"marcusleeeugene"},"content":"    private void revise() throws CommandException, ParseException {","lastModifiedDate":"2021-03-29"},{"lineNumber":236,"author":{"gitId":"marcusleeeugene"},"content":"        String name \u003d String.format(\"%s%s\", CliSyntax.PREFIX_NAME.toString(), nameText.getText());","lastModifiedDate":"2021-03-29"},{"lineNumber":237,"author":{"gitId":"marcusleeeugene"},"content":"        String rating \u003d String.format(\"%s%s\", CliSyntax.PREFIX_RATING.toString(), ratingText.getText());","lastModifiedDate":"2021-03-29"},{"lineNumber":238,"author":{"gitId":"marcusleeeugene"},"content":"        String price \u003d String.format(\"%s%s\", CliSyntax.PREFIX_PRICE.toString(), priceText.getText());","lastModifiedDate":"2021-03-29"},{"lineNumber":239,"author":{"gitId":"marcusleeeugene"},"content":"        String address \u003d String.format(\"%s%s\", CliSyntax.PREFIX_ADDRESS.toString(), addressText.getText());","lastModifiedDate":"2021-04-04"},{"lineNumber":240,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":241,"author":{"gitId":"marcusleeeugene"},"content":"        String[] reviewsArr \u003d reviewsText.getText().split(\"\\\\r?\\\\n|\\\\r\");","lastModifiedDate":"2021-03-31"},{"lineNumber":242,"author":{"gitId":"marcusleeeugene"},"content":"        String reviewsStr \u003d reviewsArr.length \u003d\u003d 1","lastModifiedDate":"2021-04-04"},{"lineNumber":243,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 reviewsArr[0].equals(\"\") ? String.format(\"%s\", CliSyntax.PREFIX_REVIEW) : \"\";","lastModifiedDate":"2021-04-04"},{"lineNumber":244,"author":{"gitId":"marcusleeeugene"},"content":"        for (String review : reviewsArr) {","lastModifiedDate":"2021-03-29"},{"lineNumber":245,"author":{"gitId":"marcusleeeugene"},"content":"            if (!review.isEmpty()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":246,"author":{"gitId":"marcusleeeugene"},"content":"                reviewsStr +\u003d String.format(\" %s%s\", CliSyntax.PREFIX_REVIEW, review);","lastModifiedDate":"2021-03-29"},{"lineNumber":247,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":248,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":249,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":250,"author":{"gitId":"marcusleeeugene"},"content":"        String[] categoriesArr \u003d categoriesText.getText().split(\" \");","lastModifiedDate":"2021-03-30"},{"lineNumber":251,"author":{"gitId":"marcusleeeugene"},"content":"        String categoriesStr \u003d categoriesArr.length \u003d\u003d 1","lastModifiedDate":"2021-04-04"},{"lineNumber":252,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 categoriesArr[0].equals(\"\") ? String.format(\"%s\", CliSyntax.PREFIX_TAG_CATEGORY) : \"\";","lastModifiedDate":"2021-04-04"},{"lineNumber":253,"author":{"gitId":"marcusleeeugene"},"content":"        for (String category : categoriesArr) {","lastModifiedDate":"2021-03-29"},{"lineNumber":254,"author":{"gitId":"marcusleeeugene"},"content":"            if (!category.isEmpty()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":255,"author":{"gitId":"marcusleeeugene"},"content":"                categoriesStr +\u003d String.format(\" %s%s\", CliSyntax.PREFIX_TAG_CATEGORY, category);","lastModifiedDate":"2021-03-29"},{"lineNumber":256,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":257,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":258,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":259,"author":{"gitId":"marcusleeeugene"},"content":"        String[] schoolsArr \u003d schoolsText.getText().split(\" \");","lastModifiedDate":"2021-03-30"},{"lineNumber":260,"author":{"gitId":"marcusleeeugene"},"content":"        String schoolsStr \u003d categoriesArr.length \u003d\u003d 1","lastModifiedDate":"2021-04-04"},{"lineNumber":261,"author":{"gitId":"marcusleeeugene"},"content":"                \u0026\u0026 schoolsArr[0].equals(\"\") ? String.format(\"%s\", CliSyntax.PREFIX_TAG_SCHOOL) : \"\";","lastModifiedDate":"2021-04-04"},{"lineNumber":262,"author":{"gitId":"marcusleeeugene"},"content":"        for (String school : schoolsArr) {","lastModifiedDate":"2021-03-29"},{"lineNumber":263,"author":{"gitId":"marcusleeeugene"},"content":"            if (!school.isEmpty()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":264,"author":{"gitId":"marcusleeeugene"},"content":"                schoolsStr +\u003d String.format(\" %s%s\", CliSyntax.PREFIX_TAG_SCHOOL, school);","lastModifiedDate":"2021-03-29"},{"lineNumber":265,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":266,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":267,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":268,"author":{"gitId":"marcusleeeugene"},"content":"        String commandToSend \u003d String.format(\"%s %d %s %s %s %s %s %s %s\", EditCommand.COMMAND_WORD,","lastModifiedDate":"2021-04-04"},{"lineNumber":269,"author":{"gitId":"marcusleeeugene"},"content":"                index.getOneBased(), name, rating, price, address, reviewsStr, categoriesStr, schoolsStr);","lastModifiedDate":"2021-04-04"},{"lineNumber":270,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-04-04"},{"lineNumber":271,"author":{"gitId":"marcusleeeugene"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":272,"author":{"gitId":"marcusleeeugene"},"content":"            mainWindow.executeCommand(commandToSend);","lastModifiedDate":"2021-03-29"},{"lineNumber":273,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":274,"author":{"gitId":"marcusleeeugene"},"content":"            hide();","lastModifiedDate":"2021-03-29"},{"lineNumber":275,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":276,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":277,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":278,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"marcusleeeugene":278}},{"path":"src/main/java/fooddiary/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":27}},{"path":"src/main/java/fooddiary/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"     * Starts the UI (and the App).","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Donavanty":4,"-":11}},{"path":"src/main/java/fooddiary/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.MainApp;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.StringUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.Logic;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/food_diary_logo.png\";","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Donavanty":6,"-":83}},{"path":"src/main/java/fooddiary/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.MainApp;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"     * Resource folder where FXML files are stored.","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param root     Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Donavanty":8,"-":85}},{"path":"src/main/java/fooddiary/ui/ViewWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.LogsCenter;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCodeCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":" * Controller for a View page","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"public class ViewWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private static Entry entry;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ViewWindow.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String FXML \u003d \"ViewWindow.fxml\";","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    private Label name;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    private Label price;","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    private Label rating;","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    private Label address;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    private Label reviews;","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    private Label categoriesLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    private Label schoolsLabel;","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField nameText;","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField priceText;","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField ratingText;","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField addressText;","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    private TextArea reviewsText;","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    private FlowPane tagCategories;","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    private FlowPane tagSchools;","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a new ViewWindow.","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"     * @param root Stage to use as the root of the ViewWindow.","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewWindow(Stage root) {","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        super(FXML, root);","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"        final KeyCombination esc \u003d new KeyCodeCombination(KeyCode.ESCAPE);","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"        setEscShortCut(esc);","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"        if (entry !\u003d null) {","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"            setEntryContent(entry);","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a new ViewWindow.","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"    public ViewWindow() {","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"        this(new Stage());","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"     * Shows the View window.","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"     *","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"     *                                       if this method is called on a thread other","lastModifiedDate":"2021-03-19"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"     *                                       than the JavaFX Application Thread.","lastModifiedDate":"2021-03-19"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if this method is called during animation or layout processing.","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if this method is called on the primary stage.","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003cli\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"     *                                       if {@code dialogStage} is already showing.","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"     *                                   \u003c/li\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"    public void show() {","lastModifiedDate":"2021-03-14"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"        logger.fine(\"Showing view window of the specified entry.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().show();","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns true if the view window is currently being shown.","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isShowing() {","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"marcusleeeugene"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"     * Hides the view window.","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"    public void hide() {","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().hide();","lastModifiedDate":"2021-03-14"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":119,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"marcusleeeugene"},"content":"     * Focuses on the view window.","lastModifiedDate":"2021-03-14"},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"marcusleeeugene"},"content":"    public void focus() {","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":128,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up \u0027ESC\u0027 key to hide window","lastModifiedDate":"2021-03-31"},{"lineNumber":129,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-31"},{"lineNumber":130,"author":{"gitId":"marcusleeeugene"},"content":"     * @param esc \u0027ESC\u0027 on keyboard","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"marcusleeeugene"},"content":"    private void setEscShortCut(KeyCombination esc) {","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"marcusleeeugene"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"marcusleeeugene"},"content":"            if (esc.match(event)) {","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"marcusleeeugene"},"content":"                hide();","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"marcusleeeugene"},"content":"                event.consume();","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"marcusleeeugene"},"content":"            }","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"marcusleeeugene"},"content":"        });","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":142,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets the content entry to be ready for view.","lastModifiedDate":"2021-03-16"},{"lineNumber":143,"author":{"gitId":"marcusleeeugene"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"marcusleeeugene"},"content":"     * @param entry Entry details","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":146,"author":{"gitId":"marcusleeeugene"},"content":"    public void setEntryContent(Entry entry) {","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"marcusleeeugene"},"content":"        tagCategories.getChildren().clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"marcusleeeugene"},"content":"        tagSchools.getChildren().clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"marcusleeeugene"},"content":"        nameText.setText(entry.getName().fullName);","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"marcusleeeugene"},"content":"        priceText.setText(String.format(\"%s%s\", Price.PRICE_DOLLAR_SIGN, entry.getPrice().value));","lastModifiedDate":"2021-03-31"},{"lineNumber":151,"author":{"gitId":"marcusleeeugene"},"content":"        ratingText.setText(String.format(\"%s / 5\", entry.getRating().value));","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"marcusleeeugene"},"content":"        addressText.setText(entry.getAddress().value);","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"marcusleeeugene"},"content":"        String reviewsStr \u003d entry.getReviews().stream()","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"marcusleeeugene"},"content":"                .map(review -\u003e review.value + \"\\n\\n\")","lastModifiedDate":"2021-03-28"},{"lineNumber":156,"author":{"gitId":"marcusleeeugene"},"content":"                .collect(Collectors.joining());","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"marcusleeeugene"},"content":"        reviewsText.setText(reviewsStr);","lastModifiedDate":"2021-03-28"},{"lineNumber":158,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"marcusleeeugene"},"content":"        entry.getTagCategories().stream()","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"marcusleeeugene"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.getTag()))","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"marcusleeeugene"},"content":"                .forEach(tag -\u003e tagCategories.getChildren().add(new Label(tag.getTag())));","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"marcusleeeugene"},"content":"        entry.getTagSchools().stream()","lastModifiedDate":"2021-03-28"},{"lineNumber":163,"author":{"gitId":"marcusleeeugene"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.getTag()))","lastModifiedDate":"2021-03-28"},{"lineNumber":164,"author":{"gitId":"marcusleeeugene"},"content":"                .forEach(tag -\u003e tagSchools.getChildren().add(new Label(tag.getTag())));","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":166,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"marcusleeeugene":157,"Donavanty":9}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"Donavanty":1,"-":7}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"    background-color: #62959C; /* Used in the default.html file */","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #62959C;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"    -fx-base: #62959C;","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"    -fx-control-inner-background: #62959C;","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #62959C;","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-color: transparent transparent transparent #62959C;","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #C19277;","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #E1BC91;","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #B7E8EF;","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-color: #B7E8EF;","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #3D4546;","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #3D4546;","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"Sidney011100"},"content":"    -fx-text: #3D4546;","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":".help_text_area {","lastModifiedDate":"2021-03-31"},{"lineNumber":131,"author":{"gitId":"Donavanty"},"content":"    -fx-control-inner-background: #E3D0B9;","lastModifiedDate":"2021-03-31"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2021-03-31"},{"lineNumber":133,"author":{"gitId":"Donavanty"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2021-03-31"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"    -fx-text-fill: #11698E;","lastModifiedDate":"2021-03-31"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2021-03-31"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2021-03-31"},{"lineNumber":137,"author":{"gitId":"Donavanty"},"content":"    -fx-text-box-border: transparent;","lastModifiedDate":"2021-03-31"},{"lineNumber":138,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2021-03-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2017-03-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":144,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #11698E;","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"marcusleeeugene"},"content":".view_label {","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"marcusleeeugene"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"marcusleeeugene"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"marcusleeeugene"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"marcusleeeugene"},"content":"    -fx-padding: 6px;","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":155,"author":{"gitId":"Sidney011100"},"content":"     -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":159,"author":{"gitId":"Sidney011100"},"content":"     -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"Sidney011100"},"content":"     -fx-border-color: derive(#62959C, 10%);","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 30%);","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":172,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #11698E;","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":176,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #11698E !important;","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#eac8af, 30%);","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-color: derive(#eac8af, 25%);","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#eac8af, 30%);","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-color: derive(#eac8af, 30%);","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":203,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 30%);","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 50%);","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"Donavanty"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-31"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: #E1BC91;","lastModifiedDate":"2021-03-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"Donavanty"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-31"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#E1BC91, 15%);","lastModifiedDate":"2021-03-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"Donavanty"},"content":"  -fx-background-color: derive(#E1BC91, 30%);","lastModifiedDate":"2021-03-31"},{"lineNumber":252,"author":{"gitId":"Donavanty"},"content":"  -fx-text-fill: #11698E;","lastModifiedDate":"2021-03-31"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-04-05"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-04-05"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-04-05"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":304,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-03-30"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":307,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#1d1d1d, 60%);","lastModifiedDate":"2021-03-31"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":317,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":321,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":325,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":327,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":329,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-30"},{"lineNumber":337,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":339,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-color: #62959C #62959C #ffffff #62959C;","lastModifiedDate":"2021-03-30"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"Sidney011100"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2021-03-30"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"Sidney011100"},"content":"    -fx-prompt-text-fill: white;","lastModifiedDate":"2021-03-30"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":351,"author":{"gitId":"Donavanty"},"content":"#filterField, #entryListPanel, #entryWebpage {","lastModifiedDate":"2021-03-17"},{"lineNumber":352,"author":{"gitId":"Donavanty"},"content":"    /*-fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);*/","lastModifiedDate":"2021-04-05"},{"lineNumber":353,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-04-05"},{"lineNumber":354,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":356,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":357,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: transparent, #E3D0B9, transparent, #E3D0B9;","lastModifiedDate":"2021-03-30"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":359,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":361,"author":{"gitId":"marcusleeeugene"},"content":"#tagCategories {","lastModifiedDate":"2021-03-30"},{"lineNumber":362,"author":{"gitId":"Sidney011100"},"content":"    -fx-hgap: 0;","lastModifiedDate":"2021-03-07"},{"lineNumber":363,"author":{"gitId":"Sidney011100"},"content":"    -fx-vgap: 4;","lastModifiedDate":"2021-03-07"},{"lineNumber":364,"author":{"gitId":"Sidney011100"},"content":"    -fx-padding: 2 5 2 3;","lastModifiedDate":"2021-03-27"},{"lineNumber":365,"author":{"gitId":"Sidney011100"},"content":"}","lastModifiedDate":"2021-03-27"},{"lineNumber":366,"author":{"gitId":"marcusleeeugene"},"content":"#tagSchools {","lastModifiedDate":"2021-03-30"},{"lineNumber":367,"author":{"gitId":"Sidney011100"},"content":"    -fx-hgap: 0;","lastModifiedDate":"2021-03-27"},{"lineNumber":368,"author":{"gitId":"Sidney011100"},"content":"    -fx-vgap: 4;","lastModifiedDate":"2021-03-27"},{"lineNumber":369,"author":{"gitId":"Sidney011100"},"content":"    -fx-padding: 0 5 1 3;","lastModifiedDate":"2021-03-27"},{"lineNumber":370,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":372,"author":{"gitId":"marcusleeeugene"},"content":"#tagCategories .label {","lastModifiedDate":"2021-03-30"},{"lineNumber":373,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: #FFF3E6;","lastModifiedDate":"2021-03-30"},{"lineNumber":374,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #11698E;","lastModifiedDate":"2021-03-30"},{"lineNumber":375,"author":{"gitId":"Sidney011100"},"content":"    -fx-padding: 2 14 2 14;","lastModifiedDate":"2021-03-07"},{"lineNumber":376,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-03-07"},{"lineNumber":377,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-03-07"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":379,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":380,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":381,"author":{"gitId":"marcusleeeugene"},"content":"#tagSchools .label {","lastModifiedDate":"2021-03-30"},{"lineNumber":382,"author":{"gitId":"Sidney011100"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-27"},{"lineNumber":383,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-color: #F88F01;","lastModifiedDate":"2021-03-30"},{"lineNumber":384,"author":{"gitId":"Sidney011100"},"content":"    -fx-padding: 2 14 2 14;","lastModifiedDate":"2021-03-27"},{"lineNumber":385,"author":{"gitId":"Sidney011100"},"content":"    -fx-border-radius: 10;","lastModifiedDate":"2021-03-27"},{"lineNumber":386,"author":{"gitId":"Sidney011100"},"content":"    -fx-background-radius: 10;","lastModifiedDate":"2021-03-27"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2021-03-27"},{"lineNumber":388,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"marcusleeeugene":9,"Donavanty":22,"Sidney011100":55,"-":302}},{"path":"src/main/resources/view/EntryListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"Sidney011100"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$rating\" /\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"      \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$price\" /\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cLabel fx:id\u003d\"reviews\" minHeight\u003d\"40.0\" maxHeight\u003d\"40.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reviews\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cFlowPane fx:id\u003d\"tagCategories\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"      \u003cFlowPane fx:id\u003d\"tagSchools\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"marcusleeeugene":10,"Sidney011100":1,"DineshMagesvaran":1,"-":29,"Prabhakaran-Gokul":1}},{"path":"src/main/resources/view/EntryListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"  \u003cListView fx:id\u003d\"entryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":7}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"    /* The error class should always override the default text-fill style */","lastModifiedDate":"2021-04-05"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"    -fx-text-fill: #ffbdbd !important;","lastModifiedDate":"2021-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"    -fx-background-color: derive(#62959C, 20%);","lastModifiedDate":"2021-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":3,"-":18}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"\u003c?import javafx.scene.Cursor?\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"\u003cfx:root minHeight\u003d\"400.0\" minWidth\u003d\"400.0\" resizable\u003d\"true\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"    \u003cScene fill\u003d\"BLACK\"\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"         \u003cVBox prefHeight\u003d\"380.0\" prefWidth\u003d\"548.0\" styleClass\u003d\"background\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"               \u003cTextArea fx:id\u003d\"helpMessageField\" editable\u003d\"false\" scaleShape\u003d\"false\" styleClass\u003d\"help_text_area\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"               \u003cVBox prefHeight\u003d\"42.0\" prefWidth\u003d\"538.0\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"                  \u003cchildren\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"                     \u003cHBox alignment\u003d\"BOTTOM_RIGHT\" prefHeight\u003d\"0.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"                           \u003cButton fx:id\u003d\"copyButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" onMousePressed\u003d\"#copyUrl\" pickOnBounds\u003d\"false\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"                              \u003ccursor\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"                                 \u003cCursor fx:constant\u003d\"HAND\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"                              \u003c/cursor\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"                              \u003copaqueInsets\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"                                 \u003cInsets /\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                              \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"                           \u003c/Button\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"                        \u003cpadding\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"                           \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"                        \u003c/padding\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                     \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"                  \u003c/children\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"               \u003c/VBox\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003c/children\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"               \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"         \u003c/VBox\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"         \u003cstylesheets\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"            \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"         \u003c/stylesheets\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"Donavanty":31,"-":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"         title\u003d\"The Food Diary\" minWidth\u003d\"600\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"    \u003cImage url\u003d\"@/images/food_diary_logo.png\" /\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\"  styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"150\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"                   prefHeight\u003d\"150\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"        \u003cVBox fx:id\u003d\"entryList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"          \u003cStackPane fx:id\u003d\"entryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":9,"Sidney011100":1,"-":50}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" minHeight\u003d\"130\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"Donavanty":2,"-":6}},{"path":"src/main/resources/view/ReviseWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import java.net.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.stage.*?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Revising Specified Entry\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cicons\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cImage url\u003d\"@/images/food_diary_logo.png\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cscene\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cScene\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cScrollPane hbarPolicy\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cVBox alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"background\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"                        \u003cInsets bottom\u003d\"15\" left\u003d\"10\" right\u003d\"10\" top\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"view_label\" text\u003d\"Name:\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"nameText\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"view_label\" text\u003d\"Rating:\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"ratingText\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"view_label\" text\u003d\"Price:\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"priceText\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"view_label\" text\u003d\"Address:\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"addressText\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"reviews\" styleClass\u003d\"view_label\"","lastModifiedDate":"2021-03-31"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"                           text\u003d\"Reviews:   * Leave a blank line between each review *\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextArea fx:id\u003d\"reviewsText\" minHeight\u003d\"250.0\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"                      \u003cfont\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"                         \u003cFont size\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"                      \u003c/font\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003c/TextArea\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"categoriesLabel\" styleClass\u003d\"view_label\"","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"                           text\u003d\"Categories:    * Leave a white-space between each category *\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"categoriesText\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"schoolsLabel\" styleClass\u003d\"view_label\"","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"                           text\u003d\"Schools:   * Leave a white-space between each school *\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"schoolsText\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cButton fx:id\u003d\"reviseButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#revise\" text\u003d\"Revise\" \u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"                        \u003cHBox.margin\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"                            \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"                        \u003c/HBox.margin\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003c/Button\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"            \u003c/ScrollPane\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"marcusleeeugene":57}},{"path":"src/main/resources/view/StatusBarFooter.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"   \u003crowConstraints\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"      \u003cRowConstraints /\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"   \u003c/rowConstraints\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c/GridPane\u003e","lastModifiedDate":"2016-08-26"}],"authorContributionMap":{"Donavanty":5,"-":11}},{"path":"src/main/resources/view/ViewWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import java.net.*?\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.stage.*?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Viewing Specified Entry\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cicons\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cImage url\u003d\"@/images/food_diary_logo.png\" /\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/icons\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cscene\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cScene\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cstylesheets\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"            \u003c/stylesheets\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            \u003cScrollPane hbarPolicy\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cVBox alignment\u003d\"CENTER_LEFT\" styleClass\u003d\"background\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"                        \u003cInsets bottom\u003d\"15\" left\u003d\"10\" right\u003d\"10\" top\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"view_label\" text\u003d\"Name:\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"nameText\" editable\u003d\"false\" opacity\u003d\"0.7\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"view_label\" text\u003d\"Rating:\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"ratingText\" editable\u003d\"false\" opacity\u003d\"0.7\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"view_label\" text\u003d\"Price:\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"priceText\" editable\u003d\"false\" opacity\u003d\"0.7\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"view_label\" text\u003d\"Address:\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextField fx:id\u003d\"addressText\" editable\u003d\"false\" opacity\u003d\"0.7\" /\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"reviews\" styleClass\u003d\"view_label\" text\u003d\"Reviews:\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cTextArea fx:id\u003d\"reviewsText\" editable\u003d\"false\" minHeight\u003d\"250.0\" opacity\u003d\"0.7\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"                      \u003cfont\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"                         \u003cFont size\u003d\"15.0\" /\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"                      \u003c/font\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003c/TextArea\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"categoriesLabel\" styleClass\u003d\"view_label\" text\u003d\"Categories:\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cFlowPane fx:id\u003d\"tagCategories\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cLabel fx:id\u003d\"schoolsLabel\" styleClass\u003d\"view_label\" text\u003d\"Schools:\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"                    \u003cFlowPane fx:id\u003d\"tagSchools\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"            \u003c/ScrollPane\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"marcusleeeugene":48,"Donavanty":1}},{"path":"src/test/data/JsonFoodDiaryStorageTest/invalidAndValidEntryFoodDiary.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"  \"entries\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"    \"name\": \"Valid Entry\",","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"4\",","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\": \"17\",","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\": [\"This is a valid entry\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"    \"name\": \"Entry With Invalid Rating Field\",","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"948asdf2424\",","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\": \"17\",","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\": [\"This is an invalid entry an error should be thrown\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":3,"DineshMagesvaran":2,"-":6,"Prabhakaran-Gokul":2}},{"path":"src/test/data/JsonFoodDiaryStorageTest/invalidEntryFoodDiary.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"  \"entries\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"    \"name\": \"Entry with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"3\",","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\": \"12\",","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\": [\"This is an invalid entry\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":2,"DineshMagesvaran":1,"-":4,"Prabhakaran-Gokul":1}},{"path":"src/test/data/JsonSerializableFoodDiaryTest/duplicateEntryFoodDiary.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"  \"entries\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\": \"Restaurant A\",","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\": [\"This is a review.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"2\",","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\": \"7\",","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"    \"tagged\": [ \"WESTERN\" ]","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\": \"Restaurant A\",","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\": [\"This is a review.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"2\",","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\": \"7\",","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\"","lastModifiedDate":"2021-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":1,"Sidney011100":2,"DineshMagesvaran":4,"-":5,"Prabhakaran-Gokul":2}},{"path":"src/test/data/JsonSerializableFoodDiaryTest/invalidEntryFoodDiary.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"  \"entries\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\": \"Restaurant H\",","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\": [\" \"],","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\": \"4\",","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\": \"6\",","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":1,"DineshMagesvaran":2,"-":4,"Prabhakaran-Gokul":1}},{"path":"src/test/data/JsonSerializableFoodDiaryTest/typicalEntriesFoodDiary.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"  \"entries\" : [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant A\",","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant A.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"3\",","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"11\",","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"    \"category\" : [ \"Western\" ],","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"    \"school\" : [ \"SCIENCE\" ]","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant B\",","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant B.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"2\",","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"12\",","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"    \"category\" : [ \"Vegan\", \"Dessert\" ],","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Sidney011100"},"content":"    \"school\": [ \"SOC\" ]","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant C\",","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant C.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"1\",","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"13\",","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"    \"address\" : \"wall street\"","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant D\",","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant D.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"5\",","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"14\",","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"Sidney011100"},"content":"    \"category\" : [ \"Fastfood\" ],","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"    \"school\" : [ \"BIZ\" ]","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant E\",","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant E.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"2\",","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"15\",","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"    \"address\" : \"michegan ave\"","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant F\",","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant F.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"1\",","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"16\",","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"    \"address\" : \"little tokyo\"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"    \"name\" : \"Restaurant G\",","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \"reviews\" : [\"This is a review for Restaurant G.\"],","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    \"rating\" : \"0\",","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"    \"price\" : \"17\",","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"Sidney011100"},"content":"    \"address\" : \"4th street\"","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  }]","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":7,"Donavanty":1,"Sidney011100":10,"DineshMagesvaran":14,"-":13,"Prabhakaran-Gokul":7}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"  \"foodDiaryFilePath\" : \"fooddiary.json\"","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"  \"foodDiaryFilePath\" : \"fooddiary.json\"","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":1,"-":10}},{"path":"src/test/java/fooddiary/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"Donavanty":1,"-":57}},{"path":"src/test/java/fooddiary/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"Donavanty":1,"-":26}},{"path":"src/test/java/fooddiary/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":2,"-":133}},{"path":"src/test/java/fooddiary/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.core.index;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        final Index fifthEntryIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2021-03-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"        assertTrue(fifthEntryIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        assertTrue(fifthEntryIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        assertTrue(fifthEntryIndex.equals(fifthEntryIndex));","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"        assertFalse(fifthEntryIndex.equals(null));","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"        assertFalse(fifthEntryIndex.equals(5.0f));","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        assertFalse(fifthEntryIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Donavanty":9,"-":51}},{"path":"src/test/java/fooddiary/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"        assertNotNull(AppUtil.getImage(\"/images/food_diary_logo.png\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"Donavanty":3,"-":33}},{"path":"src/test/java/fooddiary/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"Donavanty":3,"-":105}},{"path":"src/test/java/fooddiary/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Config;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":4,"-":112}},{"path":"src/test/java/fooddiary/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":2,"-":21}},{"path":"src/test/java/fooddiary/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.SerializableTestClass;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.TestUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":3,"-":38}},{"path":"src/test/java/fooddiary/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"Donavanty":3,"-":141}},{"path":"src/test/java/fooddiary/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.VALID_ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ListCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.JsonFoodDiaryStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"import fooddiary.storage.StorageManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"        JsonFoodDiaryStorage foodDiaryStorage \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"                new JsonFoodDiaryStorage(temporaryFolder.resolve(\"foodDiary.json\")); // CHECK THIS AGAIN","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        StorageManager storage \u003d new StorageManager(foodDiaryStorage, userPrefsStorage);","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandException(deleteCommand, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"                model.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"        JsonFoodDiaryStorage addressBookStorage \u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"                new JsonFoodDiaryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_A + CommandTestUtil.PRICE_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_A + CommandTestUtil.ADDRESS_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"Sidney011100"},"content":"        Entry expectedEntry \u003d new EntryBuilder(VALID_ENTRY_A).withTagCategories().build();","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"        expectedModel.addEntry(expectedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"    public void getFilteredEntryList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEntryList().remove(0));","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        Model expectedModel \u003d new ModelManager(model.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"Donavanty"},"content":"    private static class JsonFoodDiaryIoExceptionThrowingStub extends JsonFoodDiaryStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":153,"author":{"gitId":"Donavanty"},"content":"        private JsonFoodDiaryIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"Donavanty"},"content":"        public void saveFoodDiary(ReadOnlyFoodDiary foodDiary, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Donavanty":30,"Sidney011100":1,"DineshMagesvaran":8,"-":123}},{"path":"src/test/java/fooddiary/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"        model \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"    public void execute_newEntry_success() {","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"        Entry validEntry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        Model expectedModel \u003d new ModelManager(model.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"        expectedModel.addEntry(validEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"        assertCommandSuccess(new AddCommand(validEntry), model,","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validEntry), expectedModel);","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"    public void execute_duplicateEntry_throwsCommandException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"        Entry entryInList \u003d model.getFoodDiary().getEntryList().get(0);","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"        CommandTestUtil.assertCommandFailure(new AddCommand(entryInList), model, AddCommand.MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Donavanty":20,"DineshMagesvaran":2,"-":22}},{"path":"src/test/java/fooddiary/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"    public void constructor_nullEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"    public void execute_entryAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        ModelStubAcceptingEntryAdded modelStub \u003d new ModelStubAcceptingEntryAdded();","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        Entry validEntry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        CommandResult commandResult \u003d new AddCommand(validEntry).execute(modelStub);","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEntry), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"        assertEquals(Arrays.asList(validEntry), modelStub.entriesAdded);","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"    public void execute_duplicateEntry_throwsCommandException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        Entry validEntry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"        AddCommand addCommand \u003d new AddCommand(validEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"        ModelStub modelStub \u003d new ModelStubWithEntry(validEntry);","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ENTRY, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryA \u003d new EntryBuilder().withName(\"Restaurant A\").build();","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryB \u003d new EntryBuilder().withName(\"Restaurant B\").build();","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        AddCommand addEntryACommand \u003d new AddCommand(entryA);","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"        AddCommand addEntryBCommand \u003d new AddCommand(entryB);","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(addEntryACommand.equals(addEntryACommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"        AddCommand addEntryACommandCopy \u003d new AddCommand(entryA);","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(addEntryACommand.equals(addEntryACommandCopy));","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(addEntryACommand.equals(1));","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(addEntryACommand.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(addEntryACommand.equals(addEntryBCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"        public Path getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"Donavanty"},"content":"        public void setFoodDiaryFilePath(Path foodDiaryFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":112,"author":{"gitId":"Donavanty"},"content":"        public void addEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"Donavanty"},"content":"        public void setFoodDiary(ReadOnlyFoodDiary newData) {","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"        public ReadOnlyFoodDiary getFoodDiary() {","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"Donavanty"},"content":"        public boolean hasEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        public void deleteEntry(Entry target) {","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"Donavanty"},"content":"        public void setEntry(Entry target, Entry editedEntry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"Donavanty"},"content":"        public ObservableList\u003cEntry\u003e getFilteredEntryList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"Donavanty"},"content":"        public void updateFilteredEntryList(Predicate\u003cEntry\u003e predicate) {","lastModifiedDate":"2021-03-17"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"Donavanty"},"content":"     * A Model stub that contains a single entry.","lastModifiedDate":"2021-03-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"Donavanty"},"content":"    private class ModelStubWithEntry extends ModelStub {","lastModifiedDate":"2021-03-19"},{"lineNumber":156,"author":{"gitId":"Donavanty"},"content":"        private final Entry entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":158,"author":{"gitId":"Donavanty"},"content":"        ModelStubWithEntry(Entry entry) {","lastModifiedDate":"2021-03-19"},{"lineNumber":159,"author":{"gitId":"Donavanty"},"content":"            requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":160,"author":{"gitId":"Donavanty"},"content":"            this.entry \u003d entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"Donavanty"},"content":"        public boolean hasEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":165,"author":{"gitId":"Donavanty"},"content":"            requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"Donavanty"},"content":"            return this.entry.isSameEntry(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"Donavanty"},"content":"     * A Model stub that always accept the entry being added.","lastModifiedDate":"2021-03-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"Donavanty"},"content":"    private class ModelStubAcceptingEntryAdded extends ModelStub {","lastModifiedDate":"2021-03-19"},{"lineNumber":174,"author":{"gitId":"Donavanty"},"content":"        final ArrayList\u003cEntry\u003e entriesAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":177,"author":{"gitId":"Donavanty"},"content":"        public boolean hasEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":178,"author":{"gitId":"Donavanty"},"content":"            requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":179,"author":{"gitId":"Donavanty"},"content":"            return entriesAdded.stream().anyMatch(entry::isSameEntry);","lastModifiedDate":"2021-03-19"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"Donavanty"},"content":"        public void addEntry(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":184,"author":{"gitId":"Donavanty"},"content":"            requireNonNull(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":185,"author":{"gitId":"Donavanty"},"content":"            entriesAdded.add(entry);","lastModifiedDate":"2021-03-19"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"Donavanty"},"content":"        public ReadOnlyFoodDiary getFoodDiary() {","lastModifiedDate":"2021-03-17"},{"lineNumber":190,"author":{"gitId":"Donavanty"},"content":"            return new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"Donavanty":66,"DineshMagesvaran":10,"-":118}},{"path":"src/test/java/fooddiary/logic/commands/AddOnCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-31"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithSingleEntry;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-31"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-03-31"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-31"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-31"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-31"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-31"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.AddOnCommand.AddOnToEntryDescriptor;","lastModifiedDate":"2021-03-31"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-31"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-31"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-31"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-31"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.testutil.AddOnEntryDescriptorBuilder;","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**","lastModifiedDate":"2021-03-31"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Contains integration tests (interaction with the Model) and unit tests for AddOnCommand.","lastModifiedDate":"2021-03-31"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */","lastModifiedDate":"2021-03-31"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class AddOnCommandTest {","lastModifiedDate":"2021-03-31"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelMultipleEntries \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelSingleEntry \u003d new ModelManager(getTypicalFoodDiaryWithSingleEntry(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        AddOnCommand addOnCommand \u003d new AddOnCommand(INDEX_FIRST_ENTRY, new AddOnToEntryDescriptor());","lastModifiedDate":"2021-03-31"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry updatedEntry \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(AddOnCommand.MESSAGE_NOT_ADDED_ON, updatedEntry);","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(addOnCommand, modelMultipleEntries, expectedMessage);","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void execute_invalidEntryIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-31"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(modelMultipleEntries.getFilteredEntryList().size() + 1);","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        AddOnToEntryDescriptor descriptor \u003d new AddOnEntryDescriptorBuilder()","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReviews(CommandTestUtil.VALID_REVIEW_B).build();","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        AddOnCommand addOnCommand \u003d new AddOnCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        CommandTestUtil.assertCommandFailure(addOnCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void equals() {","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        final AddOnCommand standardCommand \u003d new AddOnCommand(INDEX_FIRST_ENTRY, CommandTestUtil.DESC_C);","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(standardCommand.equals(new AddOnCommand(INDEX_SECOND_ENTRY, CommandTestUtil.DESC_C)));","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(standardCommand.equals(new AddOnCommand(INDEX_FIRST_ENTRY, CommandTestUtil.DESC_D)));","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-31"}],"authorContributionMap":{"DineshMagesvaran":13,"Prabhakaran-Gokul":59}},{"path":"src/test/java/fooddiary/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"    public void execute_emptyFoodDiary_success() {","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    public void execute_nonEmptyFoodDiary_success() {","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        Model model \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"        expectedModel.setFoodDiary(new FoodDiary());","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Donavanty":12,"DineshMagesvaran":3,"-":18}},{"path":"src/test/java/fooddiary/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":" * {@code CommandResult}.","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(commandResult.equals(new CommandResult(null, null, \"feedback\", false, false, false, false)));","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        // different enableView value -\u003e returns false","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(commandResult.equals(new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"                false, true, false, false)));","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        // different enableRevise value -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(commandResult.equals(new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"                false, false, true, false)));","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(commandResult.equals(new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"                true, false, false, false)));","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(commandResult.equals(new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"                false, false, false, true)));","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"        // different enableView value -\u003e returns different hashcode","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"                false, true, false, false).hashCode());","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        // different enableRevise value -\u003e returns different hashcode","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"                false, false, true, false).hashCode());","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"                true, false, false, false).hashCode());","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(null, null, \"feedback\",","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"                false, false, false, true).hashCode());","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"marcusleeeugene":29,"Donavanty":1,"-":48}},{"path":"src/test/java/fooddiary/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_PRICE;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_RATING;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_REVIEW;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_TAG_CATEGORY;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.testutil.AddOnEntryDescriptorBuilder;","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EditEntryDescriptorBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_NAME_A \u003d \"Amy Bee\";","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_NAME_B \u003d \"Bob Choo\";","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_RATING_A \u003d \"1\";","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_RATING_B \u003d \"2\";","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_PRICE_A \u003d \"11\";","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_PRICE_B \u003d \"17\";","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_REVIEW_A \u003d \"amy@example.com\";","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_REVIEW_B \u003d \"bob@example.com\";","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_ADDRESS_A \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String VALID_ADDRESS_B \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"    public static final String VALID_TAG_CATEGORY_WESTERN \u003d \"WESTERN\";","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"    public static final String VALID_TAG_CATEGORY_FASTFOOD \u003d \"fastfood\";","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"Sidney011100"},"content":"    public static final String VALID_TAG_SCHOOL_SOC \u003d \"SOC\";","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String NAME_DESC_A \u003d \" \" + PREFIX_NAME + VALID_NAME_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String NAME_DESC_B \u003d \" \" + PREFIX_NAME + VALID_NAME_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String RATING_DESC_A \u003d \" \" + PREFIX_RATING + VALID_RATING_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String RATING_DESC_B \u003d \" \" + PREFIX_RATING + VALID_RATING_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String PRICE_DESC_A \u003d \" \" + PREFIX_PRICE + VALID_PRICE_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String PRICE_DESC_B \u003d \" \" + PREFIX_PRICE + VALID_PRICE_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String REVIEW_DESC_A \u003d \" \" + PREFIX_REVIEW + VALID_REVIEW_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String REVIEW_DESC_B \u003d \" \" + PREFIX_REVIEW + VALID_REVIEW_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String ADDRESS_DESC_A \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String ADDRESS_DESC_B \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"    public static final String TAG_DESC_FASTFOOD \u003d \" \" + PREFIX_TAG_CATEGORY + VALID_TAG_CATEGORY_FASTFOOD;","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"    public static final String TAG_DESC_WESTERN \u003d \" \" + PREFIX_TAG_CATEGORY + VALID_TAG_CATEGORY_WESTERN;","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"911a\"; // \u0027a\u0027 not allowed in ratings","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"18a\"; // \u0027a\u0027 not allowed in ratings","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String INVALID_REVIEW_DESC \u003d \" \" + PREFIX_REVIEW; // empty string not allowed for review","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"Sidney011100"},"content":"    // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"Sidney011100"},"content":"    public static final String INVALID_TAG_CATEGORY_DESC \u003d \" \" + PREFIX_TAG_CATEGORY + \"western*\";","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final EditCommand.EditEntryDescriptor DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final EditCommand.EditEntryDescriptor DESC_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final AddOnCommand.AddOnToEntryDescriptor DESC_C;","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final AddOnCommand.AddOnToEntryDescriptor DESC_D;","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        DESC_A \u003d new EditEntryDescriptorBuilder().withName(VALID_NAME_A).withRating(VALID_RATING_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withPrice(VALID_PRICE_A).withReviews(VALID_REVIEW_A).withAddress(VALID_ADDRESS_A)","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"        DESC_B \u003d new EditEntryDescriptorBuilder().withName(VALID_NAME_B).withRating(VALID_RATING_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withPrice(VALID_PRICE_B).withReviews(VALID_REVIEW_B).withAddress(VALID_ADDRESS_B)","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(VALID_TAG_CATEGORY_WESTERN, VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    static {","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        DESC_C \u003d new AddOnEntryDescriptorBuilder()","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withPrice(VALID_PRICE_A).withReviews(VALID_REVIEW_A).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        DESC_D \u003d new AddOnEntryDescriptorBuilder()","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withPrice(VALID_PRICE_B).withReviews(VALID_REVIEW_B).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(expectedCommandResult.getFeedbackToUser(), result.getFeedbackToUser());","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"     * - the food diary, filtered entry list and selected entry in {@code actualModel} remain unchanged","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"Donavanty"},"content":"        FoodDiary expectedFoodDiary \u003d new FoodDiary(actualModel.getFoodDiary());","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"Donavanty"},"content":"        List\u003cEntry\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":131,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedFoodDiary, actualModel.getFoodDiary());","lastModifiedDate":"2021-03-17"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":"     * Updates {@code model}\u0027s filtered list to show only the entry at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-19"},{"lineNumber":137,"author":{"gitId":"Donavanty"},"content":"     * {@code model}\u0027s food diary.","lastModifiedDate":"2021-03-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"    public static void showEntryAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"Donavanty"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEntryList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":142,"author":{"gitId":"Donavanty"},"content":"        Entry entry \u003d model.getFilteredEntryList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"Donavanty"},"content":"        final String[] splitName \u003d entry.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-03-17"},{"lineNumber":144,"author":{"gitId":"DineshMagesvaran"},"content":"        model.updateFilteredEntryList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[1])));","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":146,"author":{"gitId":"Donavanty"},"content":"        assertEquals(1, model.getFilteredEntryList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"     * Updates {@code model}\u0027s filtered list to show only the entries at the given {@code targetIndexFirst} and","lastModifiedDate":"2021-04-06"},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":"     * {@code targetIndexSecond} in the {@code model}\u0027s food diary.","lastModifiedDate":"2021-04-06"},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"    public static void showEntriesAtIndexes(Model model, Index targetIndexFirst, Index targetIndexSecond) {","lastModifiedDate":"2021-04-06"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(targetIndexFirst.getZeroBased() \u003c model.getFilteredEntryList().size());","lastModifiedDate":"2021-04-06"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(targetIndexSecond.getZeroBased() \u003c model.getFilteredEntryList().size());","lastModifiedDate":"2021-04-06"},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":157,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryFirst \u003d model.getFilteredEntryList().get(targetIndexFirst.getZeroBased());","lastModifiedDate":"2021-04-06"},{"lineNumber":158,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entrySecond \u003d model.getFilteredEntryList().get(targetIndexSecond.getZeroBased());","lastModifiedDate":"2021-04-06"},{"lineNumber":159,"author":{"gitId":"DineshMagesvaran"},"content":"        final String[] splitNameFirst \u003d entryFirst.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-04-06"},{"lineNumber":160,"author":{"gitId":"DineshMagesvaran"},"content":"        final String[] splitNameSecond \u003d entrySecond.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-04-06"},{"lineNumber":161,"author":{"gitId":"DineshMagesvaran"},"content":"        model.updateFilteredEntryList(","lastModifiedDate":"2021-04-06"},{"lineNumber":162,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsKeywordsPredicate(Arrays.asList(splitNameFirst[1], splitNameSecond[1])));","lastModifiedDate":"2021-04-06"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":164,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(2, model.getFilteredEntryList().size());","lastModifiedDate":"2021-04-06"},{"lineNumber":165,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":166,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":32,"Sidney011100":11,"DineshMagesvaran":46,"-":64,"Prabhakaran-Gokul":12}},{"path":"src/test/java/fooddiary/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.showEntriesAtIndexes;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.showEntryAtIndex;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithSingleEntry;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelMultipleEntries \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelSingleEntry \u003d new ModelManager(getTypicalFoodDiaryWithSingleEntry(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryToDelete \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        ModelManager expectedModel \u003d new ModelManager(modelMultipleEntries.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"        expectedModel.deleteEntry(entryToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(deleteCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(modelMultipleEntries.getFilteredEntryList().size() + 1);","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-06"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(deleteCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-06"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-06"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has single entry (to check for singular message)","lastModifiedDate":"2021-04-06"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(deleteCommand, modelSingleEntry,","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"        CommandTestUtil.showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryToDelete \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(modelMultipleEntries.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"        expectedModel.deleteEntry(entryToDelete);","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        showNoEntry(expectedModel);","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(deleteCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntriesAtIndexes(modelMultipleEntries, INDEX_FIRST_ENTRY, INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-06"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-04-01"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-06"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(deleteCommand, modelMultipleEntries,","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-06"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-06"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"        outOfBoundIndex \u003d INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-04-06"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-04-06"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-06"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"        deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2021-04-06"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has single entry (to check for singular message)","lastModifiedDate":"2021-04-06"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(deleteCommand, modelMultipleEntries,","lastModifiedDate":"2021-04-07"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Donavanty"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"Donavanty"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"Donavanty"},"content":"    private void showNoEntry(Model model) {","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        model.updateFilteredEntryList(p -\u003e false);","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"        assertTrue(model.getFilteredEntryList().isEmpty());","lastModifiedDate":"2021-03-17"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Donavanty":25,"Sidney011100":1,"DineshMagesvaran":46,"-":64}},{"path":"src/test/java/fooddiary/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithSingleEntry;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand.EditEntryDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EditEntryDescriptorBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelMultipleEntries \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelSingleEntry \u003d new ModelManager(getTypicalFoodDiaryWithSingleEntry(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        Entry editedEntry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedEntry).build();","lastModifiedDate":"2021-03-19"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, descriptor);","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry);","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(new FoodDiary(modelMultipleEntries.getFoodDiary()), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedModel.setEntry(modelMultipleEntries.getFilteredEntryList().get(0), editedEntry);","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(editCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"        Index indexLastEntry \u003d Index.fromOneBased(modelMultipleEntries.getFilteredEntryList().size());","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry lastEntry \u003d modelMultipleEntries.getFilteredEntryList().get(indexLastEntry.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"        EntryBuilder entryInList \u003d new EntryBuilder(lastEntry);","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedEntry \u003d entryInList.withName(CommandTestUtil.VALID_NAME_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(CommandTestUtil.VALID_RATING_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_WESTERN).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"                .withRating(CommandTestUtil.VALID_RATING_B)","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_WESTERN).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastEntry, descriptor);","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry);","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(new FoodDiary(modelMultipleEntries.getFoodDiary()), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"        expectedModel.setEntry(lastEntry, editedEntry);","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(editCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        CommandTestUtil.showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryInFilteredList \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedEntry \u003d new EntryBuilder(entryInFilteredList).withName(CommandTestUtil.VALID_NAME_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY,","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_B).build());","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry);","lastModifiedDate":"2021-03-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(new FoodDiary(modelMultipleEntries.getFoodDiary()), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedModel.setEntry(modelMultipleEntries.getFilteredEntryList().get(0), editedEntry);","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(editCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, new EditEntryDescriptor());","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedEntry \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"        //assertCommandSuccess(editCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelMultipleEntries, EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-04-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"    public void execute_duplicateEntryUnfilteredList_failure() {","lastModifiedDate":"2021-03-19"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry firstEntry \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":101,"author":{"gitId":"Donavanty"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(firstEntry).build();","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ENTRY, descriptor);","lastModifiedDate":"2021-03-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelMultipleEntries, EditCommand.MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"    public void execute_duplicateEntryFilteredList_failure() {","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        CommandTestUtil.showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":111,"author":{"gitId":"Donavanty"},"content":"        // edit entry in filtered list into a duplicate in food diary","lastModifiedDate":"2021-03-19"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryInList \u003d modelMultipleEntries.getFoodDiary().getEntryList().get(INDEX_SECOND_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ENTRY,","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"Donavanty"},"content":"                new EditEntryDescriptorBuilder(entryInList).build());","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelMultipleEntries, EditCommand.MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"    public void execute_invalidEntryIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(modelMultipleEntries.getFilteredEntryList().size() + 1);","lastModifiedDate":"2021-04-07"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()","lastModifiedDate":"2021-03-19"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"                .withName(CommandTestUtil.VALID_NAME_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-07"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has single entry (to check for single message)","lastModifiedDate":"2021-04-07"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelSingleEntry,","lastModifiedDate":"2021-04-07"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"Donavanty"},"content":"     * but smaller than size of food diary","lastModifiedDate":"2021-03-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"    public void execute_invalidEntryIndexFilteredList_failure() {","lastModifiedDate":"2021-03-19"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"        CommandTestUtil.showEntriesAtIndexes(modelMultipleEntries, INDEX_FIRST_ENTRY, INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":144,"author":{"gitId":"Donavanty"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-03-19"},{"lineNumber":145,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_B).build());","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(editCommand, modelSingleEntry,","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"DineshMagesvaran"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ENTRY, CommandTestUtil.DESC_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"        EditEntryDescriptor copyDescriptor \u003d new EditEntryDescriptor(CommandTestUtil.DESC_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"Donavanty"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ENTRY, copyDescriptor);","lastModifiedDate":"2021-03-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ENTRY, CommandTestUtil.DESC_A)));","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":180,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ENTRY, CommandTestUtil.DESC_B)));","lastModifiedDate":"2021-03-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":40,"Sidney011100":3,"DineshMagesvaran":63,"-":76}},{"path":"src/test/java/fooddiary/logic/commands/EditEntryDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand.EditEntryDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EditEntryDescriptorBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"public class EditEntryDescriptorTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"    public void equals() {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"        EditCommand.EditEntryDescriptor descriptorWithSameValues \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditCommand.EditEntryDescriptor(CommandTestUtil.DESC_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(CommandTestUtil.DESC_A.equals(descriptorWithSameValues));","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(CommandTestUtil.DESC_A.equals(CommandTestUtil.DESC_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(5));","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(CommandTestUtil.DESC_B));","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        EditEntryDescriptor editedEntryA \u003d new EditEntryDescriptorBuilder(CommandTestUtil.DESC_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"                .withName(CommandTestUtil.VALID_NAME_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(editedEntryA));","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        // different rating -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        editedEntryA \u003d new EditEntryDescriptorBuilder(CommandTestUtil.DESC_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(CommandTestUtil.VALID_RATING_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(editedEntryA));","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        // different price -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        editedEntryA \u003d new EditEntryDescriptorBuilder(CommandTestUtil.DESC_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"                .withPrice(CommandTestUtil.VALID_PRICE_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(editedEntryA));","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"        // different review -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        editedEntryA \u003d new EditEntryDescriptorBuilder(CommandTestUtil.DESC_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReviews(CommandTestUtil.VALID_REVIEW_B).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(editedEntryA));","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"        editedEntryA \u003d new EditEntryDescriptorBuilder(CommandTestUtil.DESC_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(CommandTestUtil.VALID_ADDRESS_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(editedEntryA));","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"        editedEntryA \u003d new EditEntryDescriptorBuilder(CommandTestUtil.DESC_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_WESTERN).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(CommandTestUtil.DESC_A.equals(editedEntryA));","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Donavanty":37,"Sidney011100":1,"DineshMagesvaran":24,"Prabhakaran-Gokul":1}},{"path":"src/test/java/fooddiary/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(null, null, MESSAGE_EXIT_ACKNOWLEDGEMENT,","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"                false, false, false, true);","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":5,"-":14}},{"path":"src/test/java/fooddiary/logic/commands/FindAllCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_C;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsAllKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":" * Contains integration tests (interaction with the Model) for {@code FindAllCommand}.","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model model \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand findFirstCommand \u003d new FindAllCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand findSecondCommand \u003d new FindAllCommand(secondPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand findFirstCommandCopy \u003d new FindAllCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"    public void execute_zeroKeywords_noEntryFound() {","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION, 0, \"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand command \u003d new FindAllCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"        expectedModel.updateFilteredEntryList(predicate);","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredEntryList());","lastModifiedDate":"2021-03-19"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"    public void execute_multipleKeywords_singleEntryFound() {","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION, 1, \"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d preparePredicate(\"Restaurant C\");","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand command \u003d new FindAllCommand(predicate);","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"        expectedModel.updateFilteredEntryList(predicate);","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(Arrays.asList(ENTRY_C), model.getFilteredEntryList());","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"    private NameContainsAllKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"        return new NameContainsAllKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Donavanty":22,"DineshMagesvaran":60}},{"path":"src/test/java/fooddiary/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION;","lastModifiedDate":"2021-03-31"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_C;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_E;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_F;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model model \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"    public void execute_zeroKeywords_noEntryFound() {","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION, 0, \"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        expectedModel.updateFilteredEntryList(predicate);","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"    public void execute_multipleKeywords_multipleEntriesFound() {","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ENTRIES_LISTED_OVERVIEW_WITH_SUGGESTION, 3, \"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"C E F\");","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"        expectedModel.updateFilteredEntryList(predicate);","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(Arrays.asList(ENTRY_C, ENTRY_E, ENTRY_F), model.getFilteredEntryList());","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Donavanty":12,"DineshMagesvaran":11,"-":62}},{"path":"src/test/java/fooddiary/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(null, null, SHOWING_HELP_MESSAGE,","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"                true, false, false, false);","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":5,"-":14}},{"path":"src/test/java/fooddiary/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"        model \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"        expectedModel \u003d new ModelManager(model.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        CommandTestUtil.showEntryAtIndex(model, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Donavanty":8,"DineshMagesvaran":2,"-":28}},{"path":"src/test/java/fooddiary/logic/commands/ReviseCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.showEntriesAtIndexes;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.commands.CommandTestUtil.showEntryAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithSingleEntry;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":" * {@code ReviseCommand}.","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"class ReviseCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelMultipleEntries \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelSingleEntry \u003d new ModelManager(getTypicalFoodDiaryWithSingleEntry(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if given valid index number for unfiltered entry list, correct entry is returned","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryToRevise \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseCommand \u003d new ReviseCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d String.format(ReviseCommand.MESSAGE_REVISE_ENTRY_SUCCESS, entryToRevise);","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        ModelManager expectedModel \u003d new ModelManager(modelMultipleEntries.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(reviseCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if given invalid index number for unfiltered entry list throws CommandException","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(modelMultipleEntries.getFilteredEntryList().size() + 1);","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseCommand \u003d new ReviseCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(reviseCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has single entry (to check for singular message)","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(reviseCommand, modelSingleEntry, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if given valid index number for filtered entry list, correct entry is returned","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryToRevise \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseCommand \u003d new ReviseCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d String.format(ReviseCommand.MESSAGE_REVISE_ENTRY_SUCCESS, entryToRevise);","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(modelMultipleEntries.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"        reviseEntry(expectedModel, entryToRevise);","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(reviseCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if commandException thrown if given invalid index number for filtered entry list","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntriesAtIndexes(modelMultipleEntries, INDEX_FIRST_ENTRY, INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseCommand \u003d new ReviseCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-07"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(reviseCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"        outOfBoundIndex \u003d INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-04-07"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-07"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"        reviseCommand \u003d new ReviseCommand(outOfBoundIndex);","lastModifiedDate":"2021-04-07"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has single entry (to check for singular message)","lastModifiedDate":"2021-04-07"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(reviseCommand, modelMultipleEntries,","lastModifiedDate":"2021-04-07"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"    void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseFirstCommand \u003d new ReviseCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseSecondCommand \u003d new ReviseCommand(INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(reviseFirstCommand.equals(reviseFirstCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"marcusleeeugene"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"marcusleeeugene"},"content":"        ReviseCommand reviseFirstCommandCopy \u003d new ReviseCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(reviseFirstCommand.equals(reviseFirstCommandCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"marcusleeeugene"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(reviseFirstCommand.equals(1));","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"marcusleeeugene"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(reviseFirstCommand.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"marcusleeeugene"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(reviseFirstCommand.equals(reviseSecondCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"marcusleeeugene"},"content":"     * Updates {@code model}\u0027s filtered list to specified entry.","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"marcusleeeugene"},"content":"    private void reviseEntry(Model model, Entry entry) {","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"marcusleeeugene"},"content":"        model.updateFilteredEntryList(p -\u003e p.isSameEntry(entry));","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(!model.getFilteredEntryList().isEmpty());","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"marcusleeeugene":104,"DineshMagesvaran":41}},{"path":"src/test/java/fooddiary/logic/commands/ViewCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.commands;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.showEntriesAtIndexes;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.commands.CommandTestUtil.showEntryAtIndex;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithSingleEntry;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ModelManager;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":" * {@code ViewCommand}.","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"class ViewCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelMultipleEntries \u003d new ModelManager(getTypicalFoodDiaryWithMultipleEntries(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    private Model modelSingleEntry \u003d new ModelManager(getTypicalFoodDiaryWithSingleEntry(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if given valid index number for unfiltered entry list, correct entry is returned","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryToView \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_ENTRY_SUCCESS, entryToView);","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        ModelManager expectedModel \u003d new ModelManager(modelMultipleEntries.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(viewCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if given invalid index number for unfiltered entry list throws CommandException","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(modelMultipleEntries.getFilteredEntryList().size() + 1);","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(viewCommand, modelMultipleEntries, String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for singular message)","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(viewCommand, modelSingleEntry,","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if given valid index number for filtered entry list, correct entry is returned","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry entryToView \u003d modelMultipleEntries.getFilteredEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_VIEW_ENTRY_SUCCESS, entryToView);","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"        Model expectedModel \u003d new ModelManager(modelMultipleEntries.getFoodDiary(), new UserPrefs());","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"        showEntry(expectedModel, entryToView);","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandSuccess(viewCommand, modelMultipleEntries, expectedMessage, expectedModel);","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"     * Checks if commandException thrown if given invalid index number for filtered entry list","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntriesAtIndexes(modelMultipleEntries, INDEX_FIRST_ENTRY, INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has multiple entries (to check for plural message)","lastModifiedDate":"2021-04-07"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(viewCommand, modelMultipleEntries,","lastModifiedDate":"2021-04-07"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_PLURAL,","lastModifiedDate":"2021-04-07"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"                modelMultipleEntries.getFilteredEntryList().size()));","lastModifiedDate":"2021-04-07"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"        showEntryAtIndex(modelMultipleEntries, INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"        outOfBoundIndex \u003d INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"        // ensures that outOfBoundIndex is still in bounds of food diary list","lastModifiedDate":"2021-04-07"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMultipleEntries.getFoodDiary().getEntryList().size());","lastModifiedDate":"2021-04-07"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        viewCommand \u003d new ViewCommand(outOfBoundIndex);","lastModifiedDate":"2021-04-07"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        //Check when model has single entry (to check for singular message)","lastModifiedDate":"2021-04-07"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"        assertCommandFailure(viewCommand, modelMultipleEntries,","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"                Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX_SINGULAR);","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"    void equals() {","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"Donavanty"},"content":"        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":119,"author":{"gitId":"Donavanty"},"content":"        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"marcusleeeugene"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommand));","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":124,"author":{"gitId":"marcusleeeugene"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"Donavanty"},"content":"        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_ENTRY);","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"marcusleeeugene"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":129,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(viewFirstCommand.equals(1));","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(viewFirstCommand.equals(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":135,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(viewFirstCommand.equals(viewSecondCommand));","lastModifiedDate":"2021-03-16"},{"lineNumber":136,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":137,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":138,"author":{"gitId":"marcusleeeugene"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"     * Updates {@code model}\u0027s filtered list to specified entry.","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"marcusleeeugene"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"    private void showEntry(Model model, Entry entry) {","lastModifiedDate":"2021-03-19"},{"lineNumber":142,"author":{"gitId":"Donavanty"},"content":"        model.updateFilteredEntryList(p -\u003e p.isSameEntry(entry));","lastModifiedDate":"2021-03-19"},{"lineNumber":143,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"Donavanty"},"content":"        assertTrue(!model.getFilteredEntryList().isEmpty());","lastModifiedDate":"2021-03-19"},{"lineNumber":145,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":146,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"marcusleeeugene":73,"Donavanty":31,"DineshMagesvaran":42}},{"path":"src/test/java/fooddiary/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.VALID_ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.VALID_ENTRY_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.AddCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"    private final AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"        Entry expectedEntry \u003d new EntryBuilder(VALID_ENTRY_B)","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.PREAMBLE_WHITESPACE + CommandTestUtil.NAME_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_FASTFOOD, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_A + CommandTestUtil.NAME_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_FASTFOOD, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"        // multiple rating - last rating accepted","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_FASTFOOD, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        // multiple price - last price accepted","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_A + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_FASTFOOD, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // multiple reviews - last email accepted","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_A + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_FASTFOOD, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_FASTFOOD, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"        Entry expectedEntryMultipleTags \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"                new EntryBuilder(VALID_ENTRY_B).withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD,","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"                CommandTestUtil.VALID_TAG_CATEGORY_WESTERN).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + CommandTestUtil.TAG_DESC_FASTFOOD,","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"                new AddCommand(expectedEntryMultipleTags));","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        // zero tags","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"        Entry expectedEntry \u003d new EntryBuilder(VALID_ENTRY_A).withTagCategories().build();","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, CommandTestUtil.NAME_DESC_A + CommandTestUtil.RATING_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_A + CommandTestUtil.REVIEW_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_A, new AddCommand(expectedEntry));","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"        // missing name prefix","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.VALID_NAME_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B,","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"        // missing rating prefix","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.VALID_RATING_B","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B,","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        // missing price prefix","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.VALID_PRICE_B + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B,","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"Donavanty"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-17"},{"lineNumber":97,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"        // missing review prefix","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.VALID_REVIEW_B + CommandTestUtil.ADDRESS_DESC_B,","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"Donavanty"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"        // missing address prefix","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.VALID_ADDRESS_B,","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"Donavanty"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"        // all prefixes missing","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.VALID_NAME_B + CommandTestUtil.VALID_RATING_B","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.VALID_PRICE_B + CommandTestUtil.VALID_REVIEW_B","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.VALID_ADDRESS_B,","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"Donavanty"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"Donavanty"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"Donavanty"},"content":"        // invalid name","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + CommandTestUtil.TAG_DESC_FASTFOOD, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"Donavanty"},"content":"        // invalid rating","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.INVALID_RATING_DESC","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + CommandTestUtil.TAG_DESC_FASTFOOD, Rating.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"        // invalid price","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_PRICE_DESC","lastModifiedDate":"2021-03-24"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + CommandTestUtil.TAG_DESC_FASTFOOD, Price.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"        // invalid REVIEW","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_REVIEW_DESC + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + CommandTestUtil.TAG_DESC_FASTFOOD, Review.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":140,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"        // invalid address","lastModifiedDate":"2021-03-17"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.INVALID_ADDRESS_DESC","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + CommandTestUtil.TAG_DESC_FASTFOOD, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":146,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":147,"author":{"gitId":"Sidney011100"},"content":"        // invalid tagCategory","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.NAME_DESC_B + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"Sidney011100"},"content":"                + CommandTestUtil.INVALID_TAG_CATEGORY_DESC + CommandTestUtil.TAG_DESC_FASTFOOD,","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"Sidney011100"},"content":"                        TagCategory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":154,"author":{"gitId":"Donavanty"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2021-03-17"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.PRICE_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.INVALID_ADDRESS_DESC,","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"Donavanty"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":159,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":160,"author":{"gitId":"Donavanty"},"content":"        // non-empty preamble","lastModifiedDate":"2021-03-17"},{"lineNumber":161,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.PREAMBLE_NON_EMPTY + CommandTestUtil.NAME_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_B + CommandTestUtil.TAG_DESC_WESTERN","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.TAG_DESC_FASTFOOD,","lastModifiedDate":"2021-03-19"},{"lineNumber":165,"author":{"gitId":"Donavanty"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":167,"author":{"gitId":"Donavanty"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Donavanty":85,"Sidney011100":9,"DineshMagesvaran":72,"Prabhakaran-Gokul":1}},{"path":"src/test/java/fooddiary/logic/parser/AddOnCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.AddOnCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class AddOnCommandParserTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOnCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final AddOnCommandParser parser \u003d new AddOnCommandParser();","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // no index specified","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, CommandTestUtil.VALID_NAME_A, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // no index and no field specified","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // negative index","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"-5\" + CommandTestUtil.REVIEW_DESC_A,","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // zero index","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"0\" + CommandTestUtil.REVIEW_DESC_A,","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        // too high index (above maximum limit for number of entries)","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1000001\" + CommandTestUtil.REVIEW_DESC_A,","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // invalid arguments being parsed before prefix","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1 some random string\"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + CommandTestUtil.REVIEW_DESC_A, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + CommandTestUtil.INVALID_REVIEW_DESC, Review.MESSAGE_CONSTRAINTS); // invalid review","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"DineshMagesvaran":9,"Prabhakaran-Gokul":56}},{"path":"src/test/java/fooddiary/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"Donavanty":1,"-":149}},{"path":"src/test/java/fooddiary/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"Donavanty":3,"-":35}},{"path":"src/test/java/fooddiary/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ENTRY));","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \"1000000\", new DeleteCommand(INDEX_MILLIONTH_ENTRY));","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-04-06"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-06"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-06"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-06"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1000001\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"Donavanty":10,"DineshMagesvaran":8,"-":21}},{"path":"src/test/java/fooddiary/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.parser.CliSyntax.PREFIX_TAG_CATEGORY;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand.EditEntryDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EditEntryDescriptorBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG_CATEGORY;","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"    private final EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"        // no index specified","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, CommandTestUtil.VALID_NAME_A, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        // no index and no field specified","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"        // negative index","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"-5\" + CommandTestUtil.NAME_DESC_A,","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"        // zero index","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"0\" + CommandTestUtil.NAME_DESC_A,","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        // too high index (above maximum limit for number of entries)","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1000001\" + CommandTestUtil.NAME_DESC_A,","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"Donavanty"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS); // invalid price","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-19"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + CommandTestUtil.INVALID_REVIEW_DESC, Review.MESSAGE_CONSTRAINTS); // invalid review","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-19"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\"","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"                + CommandTestUtil.INVALID_TAG_CATEGORY_DESC, TagCategory.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"        // invalid rating followed by valid email","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_RATING_DESC","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_A, Rating.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"        // valid rating followed by invalid rating. The test case for invalid rating followed by valid rating","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"Donavanty"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1\" + CommandTestUtil.RATING_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"Donavanty"},"content":"                + CommandTestUtil.INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-19"},{"lineNumber":90,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"Donavanty"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Entry} being edited,","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\" + CommandTestUtil.TAG_DESC_FASTFOOD","lastModifiedDate":"2021-03-19"},{"lineNumber":94,"author":{"gitId":"Sidney011100"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN + TAG_EMPTY, TagCategory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\" + CommandTestUtil.TAG_DESC_FASTFOOD","lastModifiedDate":"2021-03-19"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"                + TAG_EMPTY + CommandTestUtil.TAG_DESC_WESTERN, TagCategory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + CommandTestUtil.TAG_DESC_FASTFOOD","lastModifiedDate":"2021-03-19"},{"lineNumber":98,"author":{"gitId":"Sidney011100"},"content":"                + CommandTestUtil.TAG_DESC_WESTERN, TagCategory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"Donavanty"},"content":"        assertParseFailure(parser, \"1\" + CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.INVALID_REVIEW_DESC","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"                        + CommandTestUtil.VALID_ADDRESS_A + CommandTestUtil.VALID_RATING_A,","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"Donavanty"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"        Index targetIndex \u003d INDEX_SECOND_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Donavanty"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.TAG_DESC_WESTERN","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_A + CommandTestUtil.ADDRESS_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.NAME_DESC_A + CommandTestUtil.TAG_DESC_FASTFOOD;","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":114,"author":{"gitId":"Donavanty"},"content":"        EditCommand.EditEntryDescriptor descriptor \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withRating(CommandTestUtil.VALID_RATING_B).withReviews(CommandTestUtil.VALID_REVIEW_A)","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(CommandTestUtil.VALID_ADDRESS_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_WESTERN,","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"Sidney011100"},"content":"                                    CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-04-07"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.TAG_DESC_WESTERN","lastModifiedDate":"2021-04-07"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_A + CommandTestUtil.ADDRESS_DESC_A","lastModifiedDate":"2021-04-07"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.NAME_DESC_A + CommandTestUtil.TAG_DESC_FASTFOOD;","lastModifiedDate":"2021-04-07"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":132,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":137,"author":{"gitId":"Donavanty"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"Donavanty"},"content":"        Index targetIndex \u003d INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.REVIEW_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":142,"author":{"gitId":"Donavanty"},"content":"        EditCommand.EditEntryDescriptor descriptor \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReviews(CommandTestUtil.VALID_REVIEW_A).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":145,"author":{"gitId":"Donavanty"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":146,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":147,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.REVIEW_DESC_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":157,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":158,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":159,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":160,"author":{"gitId":"Donavanty"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":161,"author":{"gitId":"Donavanty"},"content":"        // name","lastModifiedDate":"2021-03-17"},{"lineNumber":162,"author":{"gitId":"Donavanty"},"content":"        Index targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"Donavanty"},"content":"        EditEntryDescriptor descriptor \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":165,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_A).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"Donavanty"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":167,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":168,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":169,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":170,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":171,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":172,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":173,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":174,"author":{"gitId":"Donavanty"},"content":"        // rating","lastModifiedDate":"2021-03-17"},{"lineNumber":175,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":176,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.RATING_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":177,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_A).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-24"},{"lineNumber":179,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-24"},{"lineNumber":180,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":181,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":182,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.RATING_DESC_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":183,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":184,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":185,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":186,"author":{"gitId":"DineshMagesvaran"},"content":"        // price","lastModifiedDate":"2021-03-24"},{"lineNumber":187,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":188,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PRICE_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":189,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withPrice(CommandTestUtil.VALID_PRICE_A).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":190,"author":{"gitId":"Donavanty"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":191,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":192,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":193,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":194,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PRICE_DESC_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":195,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":196,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":197,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":198,"author":{"gitId":"Donavanty"},"content":"        // review","lastModifiedDate":"2021-03-17"},{"lineNumber":199,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":200,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.REVIEW_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":201,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withReviews(CommandTestUtil.VALID_REVIEW_A).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":202,"author":{"gitId":"Donavanty"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":205,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":206,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.REVIEW_DESC_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":207,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":208,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":209,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":210,"author":{"gitId":"Donavanty"},"content":"        // address","lastModifiedDate":"2021-03-17"},{"lineNumber":211,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":212,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.ADDRESS_DESC_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":213,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withAddress(CommandTestUtil.VALID_ADDRESS_A).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":214,"author":{"gitId":"Donavanty"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":215,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":216,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":217,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":218,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.ADDRESS_DESC_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":219,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":220,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":221,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":222,"author":{"gitId":"Donavanty"},"content":"        // tags","lastModifiedDate":"2021-03-17"},{"lineNumber":223,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":224,"author":{"gitId":"Donavanty"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_FASTFOOD;","lastModifiedDate":"2021-03-17"},{"lineNumber":225,"author":{"gitId":"Sidney011100"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder()","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"Sidney011100"},"content":"                        .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":227,"author":{"gitId":"Donavanty"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":228,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":229,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":230,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":231,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_FASTFOOD;","lastModifiedDate":"2021-04-07"},{"lineNumber":232,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":233,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":234,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":235,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":236,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":237,"author":{"gitId":"Donavanty"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-03-17"},{"lineNumber":238,"author":{"gitId":"Donavanty"},"content":"        Index targetIndex \u003d INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":239,"author":{"gitId":"DineshMagesvaran"},"content":"        String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.RATING_DESC_A + CommandTestUtil.PRICE_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":240,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_A + CommandTestUtil.REVIEW_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":241,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.TAG_DESC_FASTFOOD + CommandTestUtil.RATING_DESC_A + CommandTestUtil.PRICE_DESC_A","lastModifiedDate":"2021-03-24"},{"lineNumber":242,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_A + CommandTestUtil.REVIEW_DESC_A + CommandTestUtil.TAG_DESC_FASTFOOD","lastModifiedDate":"2021-03-24"},{"lineNumber":243,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":244,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.TAG_DESC_WESTERN;","lastModifiedDate":"2021-03-24"},{"lineNumber":245,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":246,"author":{"gitId":"Donavanty"},"content":"        EditCommand.EditEntryDescriptor descriptor \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":247,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":248,"author":{"gitId":"DineshMagesvaran"},"content":"                .withPrice(CommandTestUtil.VALID_PRICE_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":249,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReviews(CommandTestUtil.VALID_REVIEW_A,","lastModifiedDate":"2021-03-26"},{"lineNumber":250,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        CommandTestUtil.VALID_REVIEW_A, CommandTestUtil.VALID_REVIEW_B)","lastModifiedDate":"2021-03-26"},{"lineNumber":251,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        .withAddress(CommandTestUtil.VALID_ADDRESS_B)","lastModifiedDate":"2021-03-26"},{"lineNumber":252,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD,","lastModifiedDate":"2021-03-30"},{"lineNumber":253,"author":{"gitId":"Sidney011100"},"content":"                        CommandTestUtil.VALID_TAG_CATEGORY_WESTERN).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":254,"author":{"gitId":"Donavanty"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":255,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":256,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":257,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":258,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":259,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":260,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.RATING_DESC_A + CommandTestUtil.PRICE_DESC_A","lastModifiedDate":"2021-04-07"},{"lineNumber":261,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_A + CommandTestUtil.REVIEW_DESC_A","lastModifiedDate":"2021-04-07"},{"lineNumber":262,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.TAG_DESC_FASTFOOD + CommandTestUtil.RATING_DESC_A + CommandTestUtil.PRICE_DESC_A","lastModifiedDate":"2021-04-07"},{"lineNumber":263,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.ADDRESS_DESC_A + CommandTestUtil.REVIEW_DESC_A + CommandTestUtil.TAG_DESC_FASTFOOD","lastModifiedDate":"2021-04-07"},{"lineNumber":264,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B + CommandTestUtil.PRICE_DESC_B + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-04-07"},{"lineNumber":265,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.REVIEW_DESC_B + CommandTestUtil.TAG_DESC_WESTERN;","lastModifiedDate":"2021-04-07"},{"lineNumber":266,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":267,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":268,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":269,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":270,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":271,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":272,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":273,"author":{"gitId":"Donavanty"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":274,"author":{"gitId":"Donavanty"},"content":"        // no other valid values specified","lastModifiedDate":"2021-03-17"},{"lineNumber":275,"author":{"gitId":"Donavanty"},"content":"        Index targetIndex \u003d INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":276,"author":{"gitId":"Donavanty"},"content":"        String userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-03-19"},{"lineNumber":277,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_RATING_DESC + CommandTestUtil.RATING_DESC_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":278,"author":{"gitId":"Donavanty"},"content":"        EditCommand.EditEntryDescriptor descriptor \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":279,"author":{"gitId":"DineshMagesvaran"},"content":"                new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":280,"author":{"gitId":"Donavanty"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":281,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":282,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":283,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":284,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased()","lastModifiedDate":"2021-04-07"},{"lineNumber":285,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_RATING_DESC + CommandTestUtil.RATING_DESC_B;","lastModifiedDate":"2021-04-07"},{"lineNumber":286,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_B).build();","lastModifiedDate":"2021-04-07"},{"lineNumber":287,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":288,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":289,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":290,"author":{"gitId":"Donavanty"},"content":"        // other valid values specified","lastModifiedDate":"2021-03-17"},{"lineNumber":291,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":292,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-04-07"},{"lineNumber":293,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_RATING_DESC + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-04-07"},{"lineNumber":294,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B;","lastModifiedDate":"2021-04-07"},{"lineNumber":295,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_B)","lastModifiedDate":"2021-04-07"},{"lineNumber":296,"author":{"gitId":"DineshMagesvaran"},"content":"                .withReviews(CommandTestUtil.VALID_REVIEW_B)","lastModifiedDate":"2021-04-07"},{"lineNumber":297,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(CommandTestUtil.VALID_ADDRESS_B).build();","lastModifiedDate":"2021-04-07"},{"lineNumber":298,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":299,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":300,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":301,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":302,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + CommandTestUtil.REVIEW_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":303,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.INVALID_RATING_DESC + CommandTestUtil.ADDRESS_DESC_B","lastModifiedDate":"2021-03-24"},{"lineNumber":304,"author":{"gitId":"DineshMagesvaran"},"content":"                + CommandTestUtil.RATING_DESC_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":305,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withRating(CommandTestUtil.VALID_RATING_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":306,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withReviews(CommandTestUtil.VALID_REVIEW_B)","lastModifiedDate":"2021-03-26"},{"lineNumber":307,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(CommandTestUtil.VALID_ADDRESS_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":308,"author":{"gitId":"Donavanty"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":309,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":310,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":311,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":312,"author":{"gitId":"Donavanty"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":313,"author":{"gitId":"Donavanty"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":314,"author":{"gitId":"Donavanty"},"content":"        Index targetIndex \u003d INDEX_THIRD_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":315,"author":{"gitId":"Donavanty"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2021-03-17"},{"lineNumber":316,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":317,"author":{"gitId":"Sidney011100"},"content":"        EditCommand.EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder().withTagCategories().build();","lastModifiedDate":"2021-03-27"},{"lineNumber":318,"author":{"gitId":"Donavanty"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":319,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":320,"author":{"gitId":"Donavanty"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":321,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":322,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":323,"author":{"gitId":"DineshMagesvaran"},"content":"        targetIndex \u003d INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":324,"author":{"gitId":"DineshMagesvaran"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2021-04-07"},{"lineNumber":325,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":326,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder().withTagCategories().build();","lastModifiedDate":"2021-04-07"},{"lineNumber":327,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2021-04-07"},{"lineNumber":328,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":329,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-04-07"},{"lineNumber":330,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":331,"author":{"gitId":"Donavanty"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Donavanty":159,"Sidney011100":14,"DineshMagesvaran":150,"Prabhakaran-Gokul":8}},{"path":"src/test/java/fooddiary/logic/parser/FindAllCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindAllCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsAllKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"public class FindAllCommandParserTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    private FindAllCommandParser parser \u003d new FindAllCommandParser();","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAllCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        FindAllCommand expectedFindCommand \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"                new FindAllCommand(new NameContainsAllKeywordsPredicate(Arrays.asList(\"A\", \"B\")));","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \"A B\", expectedFindCommand);","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \" \\n A \\n \\t B  \\t\", expectedFindCommand);","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Donavanty":11,"DineshMagesvaran":24}},{"path":"src/test/java/fooddiary/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"A\", \"B\")));","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \"A B\", expectedFindCommand);","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \" \\n A \\n \\t B  \\t\", expectedFindCommand);","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"Donavanty":7,"DineshMagesvaran":3,"-":25}},{"path":"src/test/java/fooddiary/logic/parser/FoodDiaryParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.AddCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.FindCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.ListCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"public class FoodDiaryParserTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"    private final FoodDiaryParser parser \u003d new FoodDiaryParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        Entry entry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(EntryUtil.getAddCommand(entry));","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"        assertEquals(new AddCommand(entry), command);","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTRY.getOneBased());","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_ENTRY), command);","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"    //    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"Sidney011100"},"content":"    //    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"    //        Entry entry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"    //        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(entry).build();","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"    //        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"Sidney011100"},"content":"    //                + INDEX_FIRST_ENTRY.getOneBased() + \" \" + EntryUtil.getEditEntryDescriptorDetails(descriptor));","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"Sidney011100"},"content":"    //        assertEquals(new EditCommand(INDEX_FIRST_ENTRY, descriptor), command);","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"Sidney011100"},"content":"    //    }","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Donavanty":24,"Sidney011100":8,"-":66}},{"path":"src/test/java/fooddiary/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.commons.core.Messages;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String INVALID_NAME \u003d \"Rest@ur@nt A\";","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String INVALID_RATING \u003d \"+6\";","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String INVALID_PRICE \u003d \"+99\";","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String INVALID_REVIEW \u003d \" \";","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"Sidney011100"},"content":"    private static final String INVALID_TAG \u003d \"#fastfood\";","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_NAME \u003d \"Restaurant A\";","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String VALID_RATING \u003d \"5\";","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_PRICE \u003d \"7\";","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_REVIEW \u003d \"Decent food...\";","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"    private static final String VALID_TAG_1 \u003d \"fastfood\";","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"    private static final String VALID_TAG_2 \u003d \"western\";","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parseIndex_outOfRangeInput_throwsIndexOutOfBoundsException() {","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(IndexOutOfBoundsException.class, Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS, ()","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        assertEquals(INDEX_FIRST_ENTRY, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"        assertEquals(INDEX_FIRST_ENTRY, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-03-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_invalidValue_throwsParseException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"        Rating expectedRating \u003d new Rating(VALID_RATING);","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"        Rating expectedRating \u003d new Rating(VALID_RATING);","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parsePrice_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrice((String) null));","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parsePrice_invalidValue_throwsParseException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrice(INVALID_RATING));","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parsePrice_validValueWithoutWhitespace_returnsRating() throws Exception {","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"        Price expectedPrice \u003d new Price(VALID_PRICE);","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(expectedPrice, ParserUtil.parsePrice(VALID_PRICE));","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"DineshMagesvaran"},"content":"    public void parsePrice_validValueWithWhitespace_returnsTrimmedRating() throws Exception {","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"        String priceWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        Price expectedPrice \u003d new Price(VALID_PRICE);","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"        assertEquals(expectedPrice, ParserUtil.parsePrice(priceWithWhitespace));","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-12"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseReview((String) null));","lastModifiedDate":"2021-03-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_invalidValue_throwsParseException() {","lastModifiedDate":"2021-03-12"},{"lineNumber":161,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReview(INVALID_REVIEW));","lastModifiedDate":"2021-03-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":165,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_validValueWithoutWhitespace_returnsReview() throws Exception {","lastModifiedDate":"2021-03-12"},{"lineNumber":166,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Review expectedReview \u003d new Review(VALID_REVIEW);","lastModifiedDate":"2021-03-12"},{"lineNumber":167,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(expectedReview, ParserUtil.parseReview(VALID_REVIEW));","lastModifiedDate":"2021-03-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void parseReview_validValueWithWhitespace_returnsTrimmedReview() throws Exception {","lastModifiedDate":"2021-03-12"},{"lineNumber":172,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String reviewWithWhitespace \u003d WHITESPACE + VALID_REVIEW + WHITESPACE;","lastModifiedDate":"2021-03-12"},{"lineNumber":173,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Review expectedReview \u003d new Review(VALID_REVIEW);","lastModifiedDate":"2021-03-12"},{"lineNumber":174,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(expectedReview, ParserUtil.parseReview(reviewWithWhitespace));","lastModifiedDate":"2021-03-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":179,"author":{"gitId":"Sidney011100"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTagsCategories((String) null));","lastModifiedDate":"2021-03-27"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"Sidney011100"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagsCategories(INVALID_TAG));","lastModifiedDate":"2021-03-27"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"Sidney011100"},"content":"        TagCategory expectedTag \u003d new TagCategory(VALID_TAG_1);","lastModifiedDate":"2021-03-27"},{"lineNumber":190,"author":{"gitId":"Sidney011100"},"content":"        assertEquals(expectedTag, ParserUtil.parseTagsCategories(VALID_TAG_1));","lastModifiedDate":"2021-03-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"Sidney011100"},"content":"        TagCategory expectedTag \u003d new TagCategory(VALID_TAG_1);","lastModifiedDate":"2021-03-27"},{"lineNumber":197,"author":{"gitId":"Sidney011100"},"content":"        assertEquals(expectedTag, ParserUtil.parseTagsCategories(tagWithWhitespace));","lastModifiedDate":"2021-03-27"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":202,"author":{"gitId":"Sidney011100"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTagsCategories((String) null));","lastModifiedDate":"2021-03-27"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":207,"author":{"gitId":"Sidney011100"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagsCategories(Arrays.asList(VALID_TAG_1,","lastModifiedDate":"2021-03-27"},{"lineNumber":208,"author":{"gitId":"Sidney011100"},"content":"                                                                                                    INVALID_TAG)));","lastModifiedDate":"2021-03-27"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(ParserUtil.parseTagsCategories(Collections.emptyList()).isEmpty());","lastModifiedDate":"2021-03-27"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":218,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e actualTagSet \u003d ParserUtil.parseTagsCategories(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2021-03-27"},{"lineNumber":219,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e expectedTagSet \u003d new HashSet\u003cTagCategory\u003e(Arrays.asList(new TagCategory(VALID_TAG_1),","lastModifiedDate":"2021-03-27"},{"lineNumber":220,"author":{"gitId":"Sidney011100"},"content":"                                                                                    new TagCategory(VALID_TAG_2)));","lastModifiedDate":"2021-03-27"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"marcusleeeugene":13,"Donavanty":14,"Sidney011100":17,"DineshMagesvaran":32,"-":136,"Prabhakaran-Gokul":12}},{"path":"src/test/java/fooddiary/logic/parser/ReviseCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.ReviseCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"class ReviseCommandParserTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    private ReviseCommandParser parser \u003d new ReviseCommandParser();","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    public void parse_validArgs_returnsReviewCommand() {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        assertParseSuccess(parser, \"1\", new ReviseCommand(INDEX_FIRST_ENTRY));","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \"1000000\", new ReviseCommand(INDEX_MILLIONTH_ENTRY));","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"a\", String.format(","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"                MESSAGE_INVALID_COMMAND_FORMAT, ReviseCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1000001\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"marcusleeeugene":32,"DineshMagesvaran":8}},{"path":"src/test/java/fooddiary/logic/parser/ViewCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package fooddiary.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.commons.core.Messages.MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS;","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalIndexes.INDEX_MILLIONTH_ENTRY;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import fooddiary.logic.commands.ViewCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"class ViewCommandParserTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    public void parse_validArgs_returnsViewCommand() {","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_ENTRY));","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseSuccess(parser, \"1000000\", new ViewCommand(INDEX_MILLIONTH_ENTRY));","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertParseFailure(parser, \"1000001\", MESSAGE_INVALID_ENTRY_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2021-04-07"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"marcusleeeugene":32,"DineshMagesvaran":8}},{"path":"src/test/java/fooddiary/model/FoodDiaryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_ADDRESS_A;","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_TAG_CATEGORY_WESTERN;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.exceptions.DuplicateEntryException;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-19"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"public class FoodDiaryTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"    private final FoodDiary foodDiary \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"        assertEquals(Collections.emptyList(), foodDiary.getEntryList());","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e foodDiary.resetData(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"    public void resetData_withValidReadOnlyFoodDiary_replacesData() {","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"        FoodDiary newData \u003d getTypicalFoodDiaryWithMultipleEntries();","lastModifiedDate":"2021-04-06"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"        foodDiary.resetData(newData);","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"        assertEquals(newData, foodDiary);","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"    public void resetData_withDuplicateEntries_throwsDuplicateEntryException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        // Two entries with the same identity fields","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedA \u003d new EntryBuilder(ENTRY_A).withAddress(VALID_ADDRESS_A)","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(VALID_TAG_CATEGORY_WESTERN)","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cEntry\u003e newEntries \u003d Arrays.asList(ENTRY_A, editedA);","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"        FoodDiaryStub newData \u003d new FoodDiaryStub(newEntries);","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        assertThrows(DuplicateEntryException.class, () -\u003e foodDiary.resetData(newData));","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_nullEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e foodDiary.hasEntry(null));","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_entryNotInFoodDiary_returnsFalse() {","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(foodDiary.hasEntry(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_entryInFoodDiary_returnsTrue() {","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        foodDiary.addEntry(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(foodDiary.hasEntry(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_entryWithSameIdentityFieldsInFoodDiary_returnsTrue() {","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        foodDiary.addEntry(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedA \u003d new EntryBuilder(ENTRY_A).withAddress(VALID_ADDRESS_A)","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(VALID_TAG_CATEGORY_WESTERN)","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(foodDiary.hasEntry(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"    public void getEntryList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e foodDiary.getEntryList().remove(0));","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"Donavanty"},"content":"     * A stub ReadOnlyFoodDiary whose entries list can violate interface constraints.","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"    private static class FoodDiaryStub implements ReadOnlyFoodDiary {","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"        private final ObservableList\u003cEntry\u003e entries \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"Donavanty"},"content":"        FoodDiaryStub(Collection\u003cEntry\u003e entries) {","lastModifiedDate":"2021-03-17"},{"lineNumber":96,"author":{"gitId":"Donavanty"},"content":"            this.entries.setAll(entries);","lastModifiedDate":"2021-03-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"        public ObservableList\u003cEntry\u003e getEntryList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"Donavanty"},"content":"            return entries;","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"Donavanty":38,"Sidney011100":3,"DineshMagesvaran":12,"-":52}},{"path":"src/test/java/fooddiary/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.model.Model.PREDICATE_SHOW_ALL_ENTRIES;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.FoodDiaryBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"        assertEquals(new FoodDiary(), new FoodDiary(modelManager.getFoodDiary()));","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        userPrefs.setFoodDiaryFilePath(Paths.get(\"food/diary/file/path\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        userPrefs.setFoodDiaryFilePath(Paths.get(\"new/food/diary/file/path\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"    public void setFoodDiaryFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodDiaryFilePath(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"    public void setFoodDiaryFilePath_validPath_setsFoodDiaryFilePath() {","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        Path path \u003d Paths.get(\"food/diary/file/path\");","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"        modelManager.setFoodDiaryFilePath(path);","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        assertEquals(path, modelManager.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_nullEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEntry(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_entryNotInFoodDiary_returnsFalse() {","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(modelManager.hasEntry(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"    public void hasEntry_entryInFoodDiary_returnsTrue() {","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        modelManager.addEntry(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(modelManager.hasEntry(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"    public void getFilteredEntryList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"Donavanty"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEntryList().remove(0));","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"        FoodDiary foodDiary \u003d new FoodDiaryBuilder().withEntry(ENTRY_A).withEntry(ENTRY_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"Donavanty"},"content":"        FoodDiary differentFoodDiary \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"        modelManager \u003d new ModelManager(foodDiary, userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"Donavanty"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(foodDiary, userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"Donavanty"},"content":"        // different foodDiary -\u003e returns false","lastModifiedDate":"2021-03-20"},{"lineNumber":117,"author":{"gitId":"Donavanty"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentFoodDiary, userPrefs)));","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"        String[] keywords \u003d ENTRY_A.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"        modelManager.updateFilteredEntryList(new NameContainsKeywordsPredicate(Arrays.asList(keywords[1])));","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"Donavanty"},"content":"        assertFalse(modelManager.equals(new ModelManager(foodDiary, userPrefs)));","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"Donavanty"},"content":"        modelManager.updateFilteredEntryList(PREDICATE_SHOW_ALL_ENTRIES);","lastModifiedDate":"2021-03-17"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"Donavanty"},"content":"        differentUserPrefs.setFoodDiaryFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":"        assertFalse(modelManager.equals(new ModelManager(foodDiary, differentUserPrefs)));","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"Donavanty":27,"DineshMagesvaran":11,"-":94}},{"path":"src/test/java/fooddiary/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"    public void setFoodDiaryFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFoodDiaryFilePath(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"Donavanty":4,"-":17}},{"path":"src/test/java/fooddiary/model/entry/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Donavanty":2,"-":34}},{"path":"src/test/java/fooddiary/model/entry/EntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_ADDRESS_A;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_ADDRESS_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_NAME_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_PRICE_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_RATING_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_REVIEW_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_TAG_CATEGORY_WESTERN;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.VALID_ENTRY_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"public class EntryTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"        Entry entry \u003d new EntryBuilder().build();","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e entry.getTagCategories().remove(0));","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    public void isSameEntry() {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(ENTRY_A.isSameEntry(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.isSameEntry(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedA \u003d new EntryBuilder(ENTRY_A).withRating(VALID_RATING_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .withPrice(VALID_PRICE_B).withReviews(VALID_REVIEW_B)","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(VALID_ADDRESS_A).withTagCategories(VALID_TAG_CATEGORY_WESTERN).build();","lastModifiedDate":"2021-04-04"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(ENTRY_A.isSameEntry(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        editedA \u003d new EntryBuilder(ENTRY_A).withName(VALID_NAME_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.isSameEntry(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedB \u003d new EntryBuilder(VALID_ENTRY_B).withName(VALID_NAME_B.toLowerCase()).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(VALID_ENTRY_B.isSameEntry(editedB));","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_B + \" \";","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        editedB \u003d new EntryBuilder(VALID_ENTRY_B).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(VALID_ENTRY_B.isSameEntry(editedB));","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry aCopy \u003d new EntryBuilder(ENTRY_A).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(ENTRY_A.equals(aCopy));","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(ENTRY_A.equals(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(5));","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(VALID_ENTRY_B));","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"        Entry editedA \u003d new EntryBuilder(ENTRY_A).withName(VALID_NAME_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"        // different rating -\u003e returns false","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"        editedA \u003d new EntryBuilder(ENTRY_A).withRating(VALID_RATING_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        // different price -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        editedA \u003d new EntryBuilder(ENTRY_A).withPrice(VALID_PRICE_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // different review -\u003e returns false","lastModifiedDate":"2021-03-12"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        editedA \u003d new EntryBuilder(ENTRY_A).withReviews(VALID_REVIEW_B).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        editedA \u003d new EntryBuilder(ENTRY_A).withAddress(VALID_ADDRESS_B).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"        editedA \u003d new EntryBuilder(ENTRY_A).withTagCategories(VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(ENTRY_A.equals(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"marcusleeeugene":1,"Donavanty":12,"Sidney011100":6,"DineshMagesvaran":36,"-":41,"Prabhakaran-Gokul":3}},{"path":"src/test/java/fooddiary/model/entry/NameContainsAllKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"public class NameContainsAllKeywordsPredicateTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"KFC\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC Clementi\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"KFC\", \"Clementi\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC Clementi\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"teCHnO\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Macdonalds\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"KFC\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match name","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Great!\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withReviews(\"Food is Great!\").build()));","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"FastFood\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withTagCategories(\"FastFood\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Western\", \"Indian\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\", \"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"wEStErN\", \"INdIan\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\", \"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"Sidney011100"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Western\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"Sidney011100"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"FastFood\", \"Western\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"Sidney011100"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\", \"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match tag","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"FastFood\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"4/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withRating(\"4\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withRating(\"2\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"1/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"3\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"4/5\", \"5/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withRating(\"5\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":141,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match rating","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-26"},{"lineNumber":145,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$7\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"7\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"6\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$3\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"4\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":165,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$5\", \"$6\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"6\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match price","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-26"},{"lineNumber":173,"author":{"gitId":"DineshMagesvaran"},"content":"                .withPrice(\"7\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":174,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":175,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":176,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceRangeContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-30"},{"lineNumber":178,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword - keyword single price, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$7\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":181,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"7-12\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword - keyword price range, entry single price","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$7-12\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"11\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword - keyword price range, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$6-15\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"7-12\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":194,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceRangeDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"5-9\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match price","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"DineshMagesvaran"},"content":"                .withPrice(\"7-11\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword single price, entry price range (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$3\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"4-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword single price, entry price range (lower)","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$10\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"4-9\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":212,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":213,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword - keyword single price, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":214,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$8\", \"$6\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":215,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"3-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":216,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":217,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry single price (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":218,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$2-3\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":219,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"4\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry single price (lower)","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$10-15\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"9\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword - keyword price range, entry single price","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$8-10\", \"$4-6\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":227,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"3-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":228,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":229,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry price range (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":230,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$2-3\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":231,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"4-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":232,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":233,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry price range (lower)","lastModifiedDate":"2021-03-30"},{"lineNumber":234,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$10-15\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":235,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"4-9\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":236,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword - keyword price range, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":238,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"$8-10\", \"$4-6\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":239,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"3-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":240,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":241,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":242,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":243,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":244,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":245,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":246,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"Science\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":247,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-19"},{"lineNumber":248,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":249,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":250,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":252,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-19"},{"lineNumber":253,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":254,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":255,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":256,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"eNGinEerInG\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":257,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":258,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":259,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":260,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":263,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":264,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":265,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-19"},{"lineNumber":266,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"27 Prince George\u0027s Park, Singapore 118425\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":267,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":268,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":269,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Science\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":270,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":271,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":272,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":273,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":274,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":275,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":276,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":277,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":278,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match address","lastModifiedDate":"2021-03-15"},{"lineNumber":279,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Great!\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":280,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withReviews(\"Food is Great!\")","lastModifiedDate":"2021-03-26"},{"lineNumber":281,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":282,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":283,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":284,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":285,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_foodEntryContainsAllKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":286,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 rating keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":287,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":288,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Frontier\", \"4/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":289,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\").withRating(\"4\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":290,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":291,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 address keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":292,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Frontier\", \"Science\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":293,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-19"},{"lineNumber":294,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":295,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":296,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 tag keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":297,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Frontier\", \"Western\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":298,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-27"},{"lineNumber":299,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\")","lastModifiedDate":"2021-03-27"},{"lineNumber":300,"author":{"gitId":"Sidney011100"},"content":"                .withTagSchools(\"SCIENCE\")","lastModifiedDate":"2021-03-27"},{"lineNumber":301,"author":{"gitId":"Sidney011100"},"content":"                .build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":302,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":303,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name \u0026 price keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":304,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Frontier\", \"$5-9\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":305,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"4-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":306,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":307,"author":{"gitId":"DineshMagesvaran"},"content":"        // Rating \u0026 address keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":308,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"2/5\", \"Drive\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":309,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":310,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":311,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":312,"author":{"gitId":"DineshMagesvaran"},"content":"        // Rating \u0026 tag keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":313,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"2/5\", \"Indian\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":314,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":315,"author":{"gitId":"Sidney011100"},"content":"                .withRating(\"2\").withTagCategories(\"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":316,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":317,"author":{"gitId":"DineshMagesvaran"},"content":"        // Rating \u0026 price keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":318,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"2/5\", \"$4-9\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":319,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"2\").withPrice(\"6\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":320,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":321,"author":{"gitId":"DineshMagesvaran"},"content":"        // Address \u0026 tag keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":322,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Engineering\", \"Indian\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":323,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":324,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":325,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":326,"author":{"gitId":"DineshMagesvaran"},"content":"        // Address \u0026 price keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":327,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Engineering\", \"$4-6\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":328,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-24"},{"lineNumber":329,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withPrice(\"6-8\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":330,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":331,"author":{"gitId":"DineshMagesvaran"},"content":"        // Tag \u0026 price keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":332,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Indian\", \"$3-5\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":333,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-24"},{"lineNumber":334,"author":{"gitId":"DineshMagesvaran"},"content":"                .withTagCategories(\"Indian\").withPrice(\"3-5\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":335,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":336,"author":{"gitId":"DineshMagesvaran"},"content":"        // Name, rating, address, tag \u0026 price keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":337,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"4/5\", \"$5-9\", \"Drive\", \"Western\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":338,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno\").withRating(\"4\").withPrice(\"5\")","lastModifiedDate":"2021-03-24"},{"lineNumber":339,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":340,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":341,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":342,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"eNGinEerInG\", \"1/5\", \"edGE\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":343,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"1\")","lastModifiedDate":"2021-03-19"},{"lineNumber":344,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":345,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":346,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":347,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":348,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_foodEntryDoesNotContainAllKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":349,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":350,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":351,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-19"},{"lineNumber":352,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"27 Prince George\u0027s Park, Singapore 118425\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":353,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":354,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching name keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":355,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Frontier\", \"5/5\", \"$4\", \"Drive\", \"Western\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":356,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"5\").withPrice(\"4\")","lastModifiedDate":"2021-03-24"},{"lineNumber":357,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":358,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":359,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching rating keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":360,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"2/5\", \"$4\", \"Drive\", \"Western\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":361,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"5\").withPrice(\"4\")","lastModifiedDate":"2021-03-24"},{"lineNumber":362,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":363,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":364,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching price keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":365,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"2/5\", \"$4-6\", \"Drive\", \"Western\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":366,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"2\").withPrice(\"7\")","lastModifiedDate":"2021-03-24"},{"lineNumber":367,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":368,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":369,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching address keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":370,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"5/5\", \"$4\", \"Science\", \"Western\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":371,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"5\").withPrice(\"4\")","lastModifiedDate":"2021-03-24"},{"lineNumber":372,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":373,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":374,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching tag keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":375,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Techno\", \"5/5\", \"$4\", \"Drive\", \"Indian\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":376,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"5\").withPrice(\"4\")","lastModifiedDate":"2021-03-24"},{"lineNumber":377,"author":{"gitId":"Sidney011100"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":378,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":379,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, and also name, rating, price, address \u0026 tag","lastModifiedDate":"2021-03-30"},{"lineNumber":380,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsAllKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":381,"author":{"gitId":"DineshMagesvaran"},"content":"                Arrays.asList(\"Techno\", \"5/5\", \"$4-5\", \"Drive\", \"Cheap\", \"Western\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":382,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"5\").withPrice(\"3-6\")","lastModifiedDate":"2021-03-30"},{"lineNumber":383,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\")","lastModifiedDate":"2021-03-15"},{"lineNumber":384,"author":{"gitId":"Sidney011100"},"content":"                .withReviews(\"Cheap food!\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":385,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":386,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"Donavanty":30,"Sidney011100":25,"DineshMagesvaran":326,"Prabhakaran-Gokul":5}},{"path":"src/test/java/fooddiary/model/entry/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        // different entry -\u003e returns false","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"KFC\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC Clementi\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"KFC\", \"Clementi\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC Clementi\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Techno\", \"KFC\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"teCHnO\", \"KfC\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Macdonalds\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match name","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Great!\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withReviews(\"Food is Great!\").build()));","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"FastFood\"));","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withTagCategories(\"FastFood\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Western\", \"Indian\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\", \"Indian\")","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"Sidney011100"},"content":"                .withTagSchools(\"PGP\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"FastFood\", \"Western\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\", \"Indian\").withTagSchools(\"PGP\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"wEStErN\", \"INdIan\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"Western\", \"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"Sidney011100"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withTagCategories(\"Western\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Western\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"Sidney011100"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withTagCategories(\"Indian\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match tag","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(\"FastFood\").build()));","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"4/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withRating(\"4\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"4/5\", \"5/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withRating(\"5\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":126,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_ratingDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withRating(\"2\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":133,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1/5\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withRating(\"3\").build()));","lastModifiedDate":"2021-03-19"},{"lineNumber":137,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match rating","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-26"},{"lineNumber":141,"author":{"gitId":"DineshMagesvaran"},"content":"                .withRating(\"2\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$8\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"8\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$5\", \"$9\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"5\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"2\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$2\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"3\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":165,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match price","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-26"},{"lineNumber":169,"author":{"gitId":"DineshMagesvaran"},"content":"                .withPrice(\"4\").build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceRangeContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword - keyword single price, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-30"},{"lineNumber":176,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$8\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"8-10\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":178,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword - keyword single price, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$5\", \"$9\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":181,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"4-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword - keyword price range, entry single price","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$4-9\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"6\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword - keyword price range, entry single price","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$3-5\", \"$9-11\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"10\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword - keyword price range, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-30"},{"lineNumber":194,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"$4-9\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"6-11\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword - keyword price range, entry price range","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$3-5\", \"$9-11\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"PGP Canteen\").withPrice(\"7-10\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_priceRangeDoesNotContainKeywords_returnsTrue() {","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"2-9\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match price range","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Spicy\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Macdonalds\").withReviews(\"Mcspicy not very spicy\")","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"DineshMagesvaran"},"content":"                .withPrice(\"4-12\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":212,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":213,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword single price, entry price range (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":214,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$2\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":215,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"3-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":216,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":217,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword single price, entry price range (lower)","lastModifiedDate":"2021-03-30"},{"lineNumber":218,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$8\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":219,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"3-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword single price, entry price range (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$2\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\").withPrice(\"3-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry single price (lower)","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$13-18\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":227,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"12\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":228,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":229,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry single price (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":230,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$6-11\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":231,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"KFC\").withPrice(\"12\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":232,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":233,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry price range (lower)","lastModifiedDate":"2021-03-30"},{"lineNumber":234,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$8-12\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":235,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"4-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":236,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword - keyword price range, entry price range (higher)","lastModifiedDate":"2021-03-30"},{"lineNumber":238,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"$2-3\"));","lastModifiedDate":"2021-03-30"},{"lineNumber":239,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withPrice(\"4-7\").build()));","lastModifiedDate":"2021-03-30"},{"lineNumber":240,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":241,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":242,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":243,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":244,"author":{"gitId":"DineshMagesvaran"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":245,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2021-03-15"},{"lineNumber":246,"author":{"gitId":"DineshMagesvaran"},"content":"                Collections.singletonList(\"Science\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":247,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-19"},{"lineNumber":248,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":249,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":250,"author":{"gitId":"DineshMagesvaran"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":252,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Frontier\")","lastModifiedDate":"2021-03-19"},{"lineNumber":253,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":254,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":255,"author":{"gitId":"DineshMagesvaran"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":256,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Science\", \"Drive\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":257,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":258,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":259,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":260,"author":{"gitId":"DineshMagesvaran"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"eNGinEerInG\", \"pArK\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"Donavanty"},"content":"        assertTrue(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":263,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":264,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":265,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":266,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":267,"author":{"gitId":"DineshMagesvaran"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":268,"author":{"gitId":"DineshMagesvaran"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":269,"author":{"gitId":"DineshMagesvaran"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-15"},{"lineNumber":270,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"PGP Canteen\")","lastModifiedDate":"2021-03-19"},{"lineNumber":271,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"27 Prince George\u0027s Park, Singapore 118425\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":272,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":273,"author":{"gitId":"DineshMagesvaran"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":274,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Science\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":275,"author":{"gitId":"Donavanty"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Techno Edge\")","lastModifiedDate":"2021-03-19"},{"lineNumber":276,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"2 Engineering Drive 4, Singapore 117584\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":277,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":278,"author":{"gitId":"DineshMagesvaran"},"content":"        // Keywords match review, but does not match address","lastModifiedDate":"2021-03-15"},{"lineNumber":279,"author":{"gitId":"DineshMagesvaran"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Great!\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":280,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(predicate.test(new EntryBuilder().withName(\"Frontier\").withReviews(\"Food is Great!\")","lastModifiedDate":"2021-03-26"},{"lineNumber":281,"author":{"gitId":"DineshMagesvaran"},"content":"                .withAddress(\"12 Science Drive 2, Singapore 117549\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Donavanty":24,"Sidney011100":11,"DineshMagesvaran":190,"-":53,"Prabhakaran-Gokul":5}},{"path":"src/test/java/fooddiary/model/entry/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Name.isValidName(\"restaurantP*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Name.isValidName(\"restaurant p\")); // alphabets only","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Name.isValidName(\"restaurant 3c\")); // alphanumeric characters","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Name.isValidName(\"Restaurant C\")); // with capital letters","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Name.isValidName(\"Long Long Long Long Restaurant F\")); // long names","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"Donavanty":2,"DineshMagesvaran":5,"-":33}},{"path":"src/test/java/fooddiary/model/entry/PriceTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"DineshMagesvaran"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"DineshMagesvaran"},"content":"public class PriceTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Price(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"DineshMagesvaran"},"content":"    public void constructor_invalidPrice_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"        String invalidPrice \u003d \"\";","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"DineshMagesvaran"},"content":"    public void isValidPrice() {","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"        // null price","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"DineshMagesvaran"},"content":"        // invalid price","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"\")); // empty string","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\" \")); // spaces only","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"1234\")); // more than 3 numbers","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"price\")); // non-numeric","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"5 \")); // spaces within digits","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"1000\")); // price higher than 999","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"-1\")); // price lower than 0","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"12-\")); //dash without upper bound","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"-12\")); //dash without lower bound","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"-1-12\")); //lower bound less than 0","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"12-1000\")); //upper bound more than 999","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"36-12\")); //lower bound more than upper bound","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(Price.isValidPrice(\"12-12\")); //lower bound same as upper bound","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"DineshMagesvaran"},"content":"        // valid price","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Price.isValidPrice(\"4\")); // exactly 1 number","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Price.isValidPrice(\"555\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Price.isValidPrice(\"0\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Price.isValidPrice(\"4-7\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Price.isValidPrice(\"15-16\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Price.isValidPrice(\"100-999\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"DineshMagesvaran":52}},{"path":"src/test/java/fooddiary/model/entry/RatingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class RatingTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Rating(null));","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public void constructor_invalidRating_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        String invalidRating \u003d \"\";","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    public void isValidRating() {","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"        // null rating","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        // invalid ratings","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"\")); // empty string","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\" \")); // spaces only","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"91\")); // more than 1 number","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"rating\")); // non-numeric","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"5 \")); // spaces within digits","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"6\")); // ratings higher than 5","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        assertFalse(Rating.isValidRating(\"-1\")); // ratings lower than 0","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"        // valid ratings","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(Rating.isValidRating(\"4\")); // exactly 1 number","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(Rating.isValidRating(\"5\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        assertTrue(Rating.isValidRating(\"0\"));","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"marcusleeeugene":38,"Donavanty":4}},{"path":"src/test/java/fooddiary/model/entry/ReviewTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class ReviewTest {","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Review(null));","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void constructor_invalidReview_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String invalidReview \u003d \"\";","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Review(invalidReview));","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void isValidReview() {","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // null Review","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertThrows(NullPointerException.class, () -\u003e Review.isValidReview(null));","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // blank Review","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(Review.isValidReview(\"\")); // empty string","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertFalse(Review.isValidReview(\" \")); // spaces only","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // valid Review","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Review.isValidReview(\"This is a good review.\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"good\")); // minimal","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(Review.isValidReview(\"testlocalhost\")); // alphabets only","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@.\")); // special characters","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"123145\")); // numeric","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertTrue(Review.isValidReview(\"a1+be!@\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"Donavanty":4,"DineshMagesvaran":2,"Prabhakaran-Gokul":33}},{"path":"src/test/java/fooddiary/model/entry/UniqueEntryListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_ADDRESS_A;","lastModifiedDate":"2021-04-04"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_ADDRESS_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"Sidney011100"},"content":"import static fooddiary.logic.commands.CommandTestUtil.VALID_TAG_CATEGORY_WESTERN;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.VALID_ENTRY_B;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.exceptions.DuplicateEntryException;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.exceptions.EntryNotFoundException;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.EntryBuilder;","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"public class UniqueEntryListTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    private final UniqueEntryList uniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"    public void contains_nullEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.contains(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"Donavanty"},"content":"    public void contains_entryNotInList_returnsFalse() {","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"DineshMagesvaran"},"content":"        assertFalse(uniqueEntryList.contains(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"    public void contains_entryInList_returnsTrue() {","lastModifiedDate":"2021-03-19"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(uniqueEntryList.contains(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"    public void contains_entryWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"Sidney011100"},"content":"        Entry editedA \u003d new EntryBuilder(ENTRY_A).withAddress(VALID_ADDRESS_A)","lastModifiedDate":"2021-04-04"},{"lineNumber":47,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(VALID_TAG_CATEGORY_WESTERN)","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        assertTrue(uniqueEntryList.contains(editedA));","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"    public void add_nullEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.add(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"    public void add_duplicateEntry_throwsDuplicateEntryException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.add(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_nullTargetEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry(null, ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_nullEditedEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry(ENTRY_A, null));","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_targetEntryNotInList_throwsEntryNotFoundException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(EntryNotFoundException.class, () -\u003e uniqueEntryList.setEntry(ENTRY_A, ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_editedEntryIsSameEntry_success() {","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.setEntry(ENTRY_A, ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedUniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedUniqueEntryList, uniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_editedEntryHasSameIdentity_success() {","lastModifiedDate":"2021-03-19"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"Sidney011100"},"content":"        Entry editedA \u003d new EntryBuilder(ENTRY_A).withAddress(VALID_ADDRESS_B)","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"Sidney011100"},"content":"                .withTagCategories(VALID_TAG_CATEGORY_WESTERN)","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.setEntry(ENTRY_A, editedA);","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"Donavanty"},"content":"        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedUniqueEntryList.add(editedA);","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedUniqueEntryList, uniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_editedEntryHasDifferentIdentity_success() {","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.setEntry(ENTRY_A, VALID_ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"Donavanty"},"content":"        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedUniqueEntryList.add(VALID_ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedUniqueEntryList, uniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"Donavanty"},"content":"    public void setEntry_editedEntryHasNonUniqueIdentity_throwsDuplicateEntryException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(VALID_ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.setEntry(ENTRY_A, VALID_ENTRY_B));","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"Donavanty"},"content":"    public void remove_nullEntry_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":117,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.remove(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"    public void remove_entryDoesNotExist_throwsEntryNotFoundException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":122,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(EntryNotFoundException.class, () -\u003e uniqueEntryList.remove(ENTRY_A));","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"Donavanty"},"content":"    public void remove_existingEntry_removesEntry() {","lastModifiedDate":"2021-03-19"},{"lineNumber":127,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.remove(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"Donavanty"},"content":"        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedUniqueEntryList, uniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"Donavanty"},"content":"    public void setEntries_nullUniqueEntryList_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":135,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry((UniqueEntryList) null));","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"Donavanty"},"content":"    public void setEntries_uniqueEntryList_replacesOwnListWithProvidedUniqueEntryList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":140,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"Donavanty"},"content":"        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":142,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedUniqueEntryList.add(VALID_ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"Donavanty"},"content":"        uniqueEntryList.setEntry(expectedUniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":144,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedUniqueEntryList, uniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"Donavanty"},"content":"    public void setEntries_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":149,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEntryList.setEntry((List\u003cEntry\u003e) null));","lastModifiedDate":"2021-03-17"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"Donavanty"},"content":"    public void setEntries_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-19"},{"lineNumber":154,"author":{"gitId":"DineshMagesvaran"},"content":"        uniqueEntryList.add(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cEntry\u003e entryList \u003d Collections.singletonList(VALID_ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"Donavanty"},"content":"        uniqueEntryList.setEntry(entryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"Donavanty"},"content":"        UniqueEntryList expectedUniqueEntryList \u003d new UniqueEntryList();","lastModifiedDate":"2021-03-17"},{"lineNumber":158,"author":{"gitId":"DineshMagesvaran"},"content":"        expectedUniqueEntryList.add(VALID_ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"Donavanty"},"content":"        assertEquals(expectedUniqueEntryList, uniqueEntryList);","lastModifiedDate":"2021-03-17"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"Donavanty"},"content":"    public void setEntries_listWithDuplicateEntries_throwsDuplicateEntryException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":164,"author":{"gitId":"DineshMagesvaran"},"content":"        List\u003cEntry\u003e listWithDuplicateEntries \u003d Arrays.asList(ENTRY_A, ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":165,"author":{"gitId":"Donavanty"},"content":"        assertThrows(DuplicateEntryException.class, () -\u003e uniqueEntryList.setEntry(listWithDuplicateEntries));","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":171,"author":{"gitId":"Donavanty"},"content":"            -\u003e uniqueEntryList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-03-17"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Donavanty":59,"Sidney011100":6,"DineshMagesvaran":34,"-":74}},{"path":"src/test/java/fooddiary/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.model.tag;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"Donavanty":2,"-":24}},{"path":"src/test/java/fooddiary/storage/JsonAdaptedEntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.Assert;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.TypicalEntries;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"public class JsonAdaptedEntryTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String INVALID_NAME \u003d \"Rest@ur@nt B\";","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    private static final String INVALID_RATING \u003d \"234\";","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String INVALID_PRICE \u003d \"1234\";","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String INVALID_REVIEW \u003d \" \";","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"    private static final String INVALID_TAG_CATEGORY \u003d \"#Western\";","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"    private static final String INVALID_TAG_SCHOOL \u003d \"the hive\";","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_NAME \u003d TypicalEntries.ENTRY_B.getName().toString();","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_RATING \u003d TypicalEntries.ENTRY_B.getRating().toString();","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_PRICE \u003d TypicalEntries.ENTRY_B.getPrice().toString();","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final String VALID_ADDRESS \u003d TypicalEntries.ENTRY_B.getAddress().toString();","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final List\u003cJsonAdaptedReview\u003e VALID_REVIEWS \u003d TypicalEntries.ENTRY_B.getReviews().stream()","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .map(JsonAdaptedReview::new)","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"    private static final List\u003cJsonAdaptedTagCategory\u003e VALID_TAG_CATEGORY \u003d TypicalEntries.ENTRY_B.getTagCategories()","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"            .stream()","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"            .map(JsonAdaptedTagCategory::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"Sidney011100"},"content":"    private static final List\u003cJsonAdaptedTagSchool\u003e VALID_TAG_SCHOOL \u003d TypicalEntries.ENTRY_B.getTagSchools()","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"Sidney011100"},"content":"            .stream()","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"            .map(JsonAdaptedTagSchool::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"    public void toModelType_validEntryDetails_returnsEntry() throws Exception {","lastModifiedDate":"2021-03-19"},{"lineNumber":48,"author":{"gitId":"DineshMagesvaran"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(TypicalEntries.ENTRY_B);","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"        Assertions.assertEquals(TypicalEntries.ENTRY_B, entry.toModelType());","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"        JsonAdaptedEntry entry \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"Sidney011100"},"content":"                new JsonAdaptedEntry(INVALID_NAME, VALID_RATING, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"Sidney011100"},"content":"                        VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(null, VALID_RATING, VALID_PRICE,","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"                VALID_REVIEWS, VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedEntry","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"                .MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"    public void toModelType_invalidRating_throwsIllegalValueException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        JsonAdaptedEntry entry \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"                new JsonAdaptedEntry(VALID_NAME, INVALID_RATING, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"                        VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"    public void toModelType_nullRating_throwsIllegalValueException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_NAME, null, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"                VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedEntry","lastModifiedDate":"2021-03-19"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"                .MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"DineshMagesvaran"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"        JsonAdaptedEntry entry \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"Sidney011100"},"content":"                new JsonAdaptedEntry(VALID_NAME, VALID_RATING, INVALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"Sidney011100"},"content":"                        VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"DineshMagesvaran"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"DineshMagesvaran"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_NAME, VALID_RATING, null, VALID_REVIEWS,","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"Sidney011100"},"content":"                VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"DineshMagesvaran"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedEntry","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"DineshMagesvaran"},"content":"                .MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"DineshMagesvaran"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void toModelType_invalidReview_throwsIllegalValueException() {","lastModifiedDate":"2021-03-12"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cJsonAdaptedReview\u003e invalidReviews \u003d new ArrayList\u003c\u003e(VALID_REVIEWS);","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        invalidReviews.add(new JsonAdaptedReview(INVALID_REVIEW));","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"Donavanty"},"content":"        JsonAdaptedEntry entry \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":111,"author":{"gitId":"Sidney011100"},"content":"                new JsonAdaptedEntry(VALID_NAME, VALID_RATING, VALID_PRICE, invalidReviews,","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"Sidney011100"},"content":"                        VALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String expectedMessage \u003d Review.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-12"},{"lineNumber":114,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"Donavanty"},"content":"        JsonAdaptedEntry entry \u003d","lastModifiedDate":"2021-03-19"},{"lineNumber":121,"author":{"gitId":"Sidney011100"},"content":"                new JsonAdaptedEntry(VALID_NAME, VALID_RATING, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"Sidney011100"},"content":"                        INVALID_ADDRESS, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_NAME, VALID_RATING, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"Sidney011100"},"content":"                null, VALID_TAG_CATEGORY, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"Donavanty"},"content":"        String expectedMessage \u003d String.format(JsonAdaptedEntry","lastModifiedDate":"2021-03-19"},{"lineNumber":132,"author":{"gitId":"Donavanty"},"content":"                .MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-03-19"},{"lineNumber":133,"author":{"gitId":"Donavanty"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"Sidney011100"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"Sidney011100"},"content":"    public void toModelTyp_invalidTagCategory_throwsIllegalValueException() {","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"Sidney011100"},"content":"        List\u003cJsonAdaptedTagCategory\u003e invalidTagCategoryList \u003d new ArrayList\u003c\u003e(VALID_TAG_CATEGORY);","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"Sidney011100"},"content":"        invalidTagCategoryList.add(new JsonAdaptedTagCategory(INVALID_TAG_CATEGORY));","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"Sidney011100"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_NAME, VALID_RATING, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"Sidney011100"},"content":"                VALID_ADDRESS, invalidTagCategoryList, VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"Sidney011100"},"content":"        String expectedMessage \u003d TagCategory.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"Sidney011100"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"Sidney011100"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"Sidney011100"},"content":"    public void toModelTyp_invalidTagSchool_throwsIllegalValueException() {","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"Sidney011100"},"content":"        List\u003cJsonAdaptedTagSchool\u003e invalidTagSchoolList \u003d new ArrayList\u003c\u003e(VALID_TAG_SCHOOL);","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"Sidney011100"},"content":"        invalidTagSchoolList.add(new JsonAdaptedTagSchool(INVALID_TAG_SCHOOL));","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"Sidney011100"},"content":"        JsonAdaptedEntry entry \u003d new JsonAdaptedEntry(VALID_NAME, VALID_RATING, VALID_PRICE, VALID_REVIEWS,","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"Sidney011100"},"content":"                VALID_ADDRESS, VALID_TAG_CATEGORY, invalidTagSchoolList);","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"Sidney011100"},"content":"        String expectedMessage \u003d TagSchool.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"Sidney011100"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, entry::toModelType);","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marcusleeeugene":4,"Donavanty":35,"Sidney011100":45,"DineshMagesvaran":25,"-":36,"Prabhakaran-Gokul":11}},{"path":"src/test/java/fooddiary/storage/JsonFoodDiaryStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_A;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_H;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.ENTRY_I;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"public class JsonFoodDiaryStorageTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFoodDiaryStorageTest\");","lastModifiedDate":"2021-03-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"    public void readFoodDiary_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e readFoodDiary(null));","lastModifiedDate":"2021-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"    private java.util.Optional\u003cReadOnlyFoodDiary\u003e readFoodDiary(String filePath) throws Exception {","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        return new JsonFoodDiaryStorage(Paths.get(filePath)).readFoodDiary(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        assertFalse(readFoodDiary(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-03-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"        assertThrows(DataConversionException.class, () -\u003e readFoodDiary(\"notJsonFormatFoodDiary.json\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"    public void readFoodDiary_invalidEntryFoodDiary_throwDataConversionException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        assertThrows(DataConversionException.class, () -\u003e readFoodDiary(\"invalidEntryFoodDiary.json\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"    public void readFoodDiary_invalidAndValidEntryFoodDiary_throwDataConversionException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"        assertThrows(DataConversionException.class, () -\u003e readFoodDiary(\"invalidAndValidEntryFoodDiary.json\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"    public void readAndSaveFoodDiary_allInOrder_success() throws Exception {","lastModifiedDate":"2021-03-19"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"        Path filePath \u003d testFolder.resolve(\"TempFoodDiary.json\");","lastModifiedDate":"2021-03-19"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        FoodDiary original \u003d getTypicalFoodDiaryWithMultipleEntries();","lastModifiedDate":"2021-04-06"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"        JsonFoodDiaryStorage jsonFoodDiaryStorage \u003d new JsonFoodDiaryStorage(filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"Donavanty"},"content":"        jsonFoodDiaryStorage.saveFoodDiary(original, filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"Donavanty"},"content":"        ReadOnlyFoodDiary readBack \u003d jsonFoodDiaryStorage.readFoodDiary(filePath).get();","lastModifiedDate":"2021-03-19"},{"lineNumber":73,"author":{"gitId":"Donavanty"},"content":"        assertEquals(original, new FoodDiary(readBack));","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"        original.addEntry(ENTRY_H);","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        original.removeEntry(ENTRY_A);","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"        jsonFoodDiaryStorage.saveFoodDiary(original, filePath);","lastModifiedDate":"2021-03-19"},{"lineNumber":79,"author":{"gitId":"Donavanty"},"content":"        readBack \u003d jsonFoodDiaryStorage.readFoodDiary(filePath).get();","lastModifiedDate":"2021-03-19"},{"lineNumber":80,"author":{"gitId":"Donavanty"},"content":"        assertEquals(original, new FoodDiary(readBack));","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        original.addEntry(ENTRY_I);","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"        jsonFoodDiaryStorage.saveFoodDiary(original); // file path not specified","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"Donavanty"},"content":"        readBack \u003d jsonFoodDiaryStorage.readFoodDiary().get(); // file path not specified","lastModifiedDate":"2021-03-19"},{"lineNumber":86,"author":{"gitId":"Donavanty"},"content":"        assertEquals(original, new FoodDiary(readBack));","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"Donavanty"},"content":"    public void saveFoodDiary_nullFoodDiary_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveFoodDiary(null, \"SomeFile.json\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"Donavanty"},"content":"     * Saves {@code foodDiary} at the specified {@code filePath}.","lastModifiedDate":"2021-03-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"Donavanty"},"content":"    private void saveFoodDiary(ReadOnlyFoodDiary foodDiary, String filePath) {","lastModifiedDate":"2021-03-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"            new JsonFoodDiaryStorage(Paths.get(filePath))","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"Donavanty"},"content":"                    .saveFoodDiary(foodDiary, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"Donavanty"},"content":"    public void saveFoodDiary_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-19"},{"lineNumber":109,"author":{"gitId":"Donavanty"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveFoodDiary(new FoodDiary(), null));","lastModifiedDate":"2021-03-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Donavanty":43,"DineshMagesvaran":8,"-":60}},{"path":"src/test/java/fooddiary/storage/JsonSerializableFoodDiaryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.util.JsonUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.testutil.TypicalEntries;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"public class JsonSerializableFoodDiaryTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final Path TEST_DATA_FOLDER \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"DineshMagesvaran"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFoodDiaryTest\");","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"    private static final Path TYPICAL_ENTRIES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEntriesFoodDiary.json\");","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"    private static final Path INVALID_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEntryFoodDiary.json\");","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"    private static final Path DUPLICATE_ENTRY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEntryFoodDiary.json\");","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    public void toModelType_typicalEntriesFile_success() throws Exception {","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"        JsonSerializableFoodDiary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ENTRIES_FILE,","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"                JsonSerializableFoodDiary.class).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"        FoodDiary foodDiaryFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"DineshMagesvaran"},"content":"        FoodDiary typicalEntriesFoodDiary \u003d TypicalEntries.getTypicalFoodDiaryWithMultipleEntries();","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        assertEquals(foodDiaryFromFile, typicalEntriesFoodDiary);","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"    public void toModelType_invalidEntryFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        JsonSerializableFoodDiary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ENTRY_FILE,","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"                JsonSerializableFoodDiary.class).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"    public void toModelType_duplicateEntries_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        JsonSerializableFoodDiary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ENTRY_FILE,","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"                JsonSerializableFoodDiary.class).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableFoodDiary.MESSAGE_DUPLICATE_FOOD_DIARY,","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Donavanty":25,"DineshMagesvaran":3,"-":20}},{"path":"src/test/java/fooddiary/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"DineshMagesvaran"},"content":"    private static final Path TEST_DATA_FOLDER \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"DineshMagesvaran"},"content":"                \"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"Donavanty"},"content":"        userPrefs.setFoodDiaryFilePath(Paths.get(\"fooddiary.json\"));","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Donavanty":6,"DineshMagesvaran":4,"-":115}},{"path":"src/test/java/fooddiary/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"DineshMagesvaran"},"content":"import static fooddiary.testutil.TypicalEntries.getTypicalFoodDiaryWithMultipleEntries;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.GuiSettings;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.ReadOnlyFoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.UserPrefs;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"        JsonFoodDiaryStorage foodDiaryStorage \u003d new JsonFoodDiaryStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"        storageManager \u003d new StorageManager(foodDiaryStorage, userPrefsStorage);","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"    public void foodDiaryReadSave() throws Exception {","lastModifiedDate":"2021-03-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"Donavanty"},"content":"         * {@link JsonFoodDiaryStorage} class.","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonFoodDiaryStorageTest} class.","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"DineshMagesvaran"},"content":"        FoodDiary original \u003d getTypicalFoodDiaryWithMultipleEntries();","lastModifiedDate":"2021-04-06"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"        storageManager.saveFoodDiary(original);","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"Donavanty"},"content":"        ReadOnlyFoodDiary retrieved \u003d storageManager.readFoodDiary().get();","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"        assertEquals(original, new FoodDiary(retrieved));","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"Donavanty"},"content":"    public void getFoodDiaryFilePath() {","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"        assertNotNull(storageManager.getFoodDiaryFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":15,"DineshMagesvaran":2,"-":51}},{"path":"src/test/java/fooddiary/testutil/AddOnEntryDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.logic.commands.AddOnCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * A utility class to help with building AddOnPersonDescriptor objects.","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class AddOnEntryDescriptorBuilder {","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private AddOnCommand.AddOnToEntryDescriptor descriptor;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnEntryDescriptorBuilder() {","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor \u003d new AddOnCommand.AddOnToEntryDescriptor();","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnEntryDescriptorBuilder(AddOnCommand.AddOnToEntryDescriptor descriptor) {","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.descriptor \u003d new AddOnCommand.AddOnToEntryDescriptor(descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Returns an {@code AddOnPersonDescriptor} with fields containing {@code entry}\u0027s details","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnEntryDescriptorBuilder(Entry entry) {","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor \u003d new AddOnCommand.AddOnToEntryDescriptor();","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setReviews(entry.getReviews());","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setPrice(entry.getPrice());","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses the {@code reviews} into a {@code List\u003cReview\u003e} and set it to the {@code AddOnPersonDescriptor}","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * that we are building.","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnEntryDescriptorBuilder withReviews(String... reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cReview\u003e reviewList \u003d Stream.of(reviews).map(Review::new).collect(Collectors.toList());","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setReviews(reviewList);","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return this;","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Sets the {@code Price} of the {@code AddOnPersonDescriptor} that we are building.","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnEntryDescriptorBuilder withPrice(String price) {","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setPrice(new Price(price));","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public AddOnCommand.AddOnToEntryDescriptor build() {","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return descriptor;","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"Prabhakaran-Gokul":58}},{"path":"src/test/java/fooddiary/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"Donavanty":1,"-":33}},{"path":"src/test/java/fooddiary/testutil/EditEntryDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"public class EditEntryDescriptorBuilder {","lastModifiedDate":"2021-03-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"    private EditCommand.EditEntryDescriptor descriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"    public EditEntryDescriptorBuilder() {","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"        descriptor \u003d new EditCommand.EditEntryDescriptor();","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"    public EditEntryDescriptorBuilder(EditCommand.EditEntryDescriptor descriptor) {","lastModifiedDate":"2021-03-19"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        this.descriptor \u003d new EditCommand.EditEntryDescriptor(descriptor);","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"Donavanty"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code entry}\u0027s details","lastModifiedDate":"2021-03-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"    public EditEntryDescriptorBuilder(Entry entry) {","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"Donavanty"},"content":"        descriptor \u003d new EditCommand.EditEntryDescriptor();","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"Donavanty"},"content":"        descriptor.setName(entry.getName());","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"        descriptor.setRating(entry.getRating());","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor.setPrice(entry.getPrice());","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setReviews(entry.getReviews());","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        descriptor.setAddress(entry.getAddress());","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Sidney011100"},"content":"        descriptor.setTagCategories(entry.getTagCategories());","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"Sidney011100"},"content":"        descriptor.setTagSchools(entry.getTagSchools());","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"    public EditEntryDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets the {@code Rating} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"Donavanty"},"content":"    public EditEntryDescriptorBuilder withRating(String rating) {","lastModifiedDate":"2021-03-19"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"        descriptor.setRating(new Rating(rating));","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"DineshMagesvaran"},"content":"     * Sets the {@code Price} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"    public EditEntryDescriptorBuilder withPrice(String price) {","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor.setPrice(new Price(price));","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"DineshMagesvaran"},"content":"        return this;","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses the {@code reviews} into a {@code List\u003cReview\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * that we are building.","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public EditEntryDescriptorBuilder withReviews(String... reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        List\u003cReview\u003e reviewList \u003d Stream.of(reviews).map(Review::new).collect(Collectors.toList());","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        descriptor.setReviews(reviewList);","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"Donavanty"},"content":"    public EditEntryDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"Sidney011100"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTagCategory\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"Sidney011100"},"content":"    public EditEntryDescriptorBuilder withTagCategories(String... tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagCategory\u003e tagSet \u003d Stream.of(tags).map(TagCategory::new).collect(Collectors.toSet());","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"Sidney011100"},"content":"        descriptor.setTagCategories(tagSet);","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"Sidney011100"},"content":"        return this;","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"Sidney011100"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTagSchool\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"Sidney011100"},"content":"     * that we are building.","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"Sidney011100"},"content":"    public EditEntryDescriptorBuilder withTagSchools(String... tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"Sidney011100"},"content":"        Set\u003cTagSchool\u003e tagSet \u003d Stream.of(tags).map(TagSchool::new).collect(Collectors.toSet());","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"Sidney011100"},"content":"        descriptor.setTagSchools(tagSet);","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":109,"author":{"gitId":"Donavanty"},"content":"    public EditCommand.EditEntryDescriptor build() {","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"marcusleeeugene":2,"Donavanty":24,"Sidney011100":18,"DineshMagesvaran":10,"-":51,"Prabhakaran-Gokul":7}},{"path":"src/test/java/fooddiary/testutil/EntryBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Address;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Name;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"DineshMagesvaran"},"content":"import fooddiary.model.entry.Price;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Rating;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"DineshMagesvaran"},"content":" * A utility class to help with building Entry objects.","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"public class EntryBuilder {","lastModifiedDate":"2021-03-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String DEFAULT_NAME \u003d \"Restaurant Z\";","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    public static final String DEFAULT_RATING \u003d \"3\";","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final String DEFAULT_PRICE \u003d \"6\";","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String DEFAULT_REVIEW \u003d \"I like this food!\";","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    private Rating rating;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"DineshMagesvaran"},"content":"    private Price price;","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private List\u003cReview\u003e reviews;","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"    private Set\u003cTagCategory\u003e categories;","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"    private Set\u003cTagSchool\u003e schools;","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"DineshMagesvaran"},"content":"     * Creates a {@code EntryBuilder} with the default details.","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"    public EntryBuilder() {","lastModifiedDate":"2021-03-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        rating \u003d new Rating(DEFAULT_RATING);","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"        price \u003d new Price(DEFAULT_PRICE);","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        reviews \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        reviews.add(new Review(DEFAULT_REVIEW));","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"Sidney011100"},"content":"        categories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"Sidney011100"},"content":"        schools \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":53,"author":{"gitId":"DineshMagesvaran"},"content":"     * Initializes the EntryBuilder with the data of {@code entryToCopy}.","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":55,"author":{"gitId":"Donavanty"},"content":"    public EntryBuilder(Entry entryToCopy) {","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"Donavanty"},"content":"        name \u003d entryToCopy.getName();","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"Donavanty"},"content":"        rating \u003d entryToCopy.getRating();","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"DineshMagesvaran"},"content":"        price \u003d entryToCopy.getPrice();","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        reviews \u003d entryToCopy.getReviews();","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"        address \u003d entryToCopy.getAddress();","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"Sidney011100"},"content":"        categories \u003d new HashSet\u003c\u003e(entryToCopy.getTagCategories());","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"Sidney011100"},"content":"        schools \u003d new HashSet\u003c\u003e(entryToCopy.getTagSchools());","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"DineshMagesvaran"},"content":"     * Sets the {@code Name} of the {@code Entry} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"    public EntryBuilder withName(String name) {","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTagCategory} and set it to the {@code Entry} that we are building.","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"    public EntryBuilder withTagCategories(String ... tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"        this.categories \u003d SampleDataUtil.getTagCategorySet(tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Sidney011100"},"content":"        return this;","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"Sidney011100"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"Sidney011100"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTagSchool\u003e} and set it to the {@code Entry} that we are building.","lastModifiedDate":"2021-03-27"},{"lineNumber":83,"author":{"gitId":"Sidney011100"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"Sidney011100"},"content":"    public EntryBuilder withTagSchools(String ... tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"Sidney011100"},"content":"        this.schools \u003d SampleDataUtil.getTagSchoolSet(tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"DineshMagesvaran"},"content":"     * Sets the {@code Address} of the {@code Entry} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"Donavanty"},"content":"    public EntryBuilder withAddress(String address) {","lastModifiedDate":"2021-03-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"DineshMagesvaran"},"content":"     * Sets the {@code Rating} of the {@code Entry} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":100,"author":{"gitId":"Donavanty"},"content":"    public EntryBuilder withRating(String rating) {","lastModifiedDate":"2021-03-19"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"        this.rating \u003d new Rating(rating);","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":106,"author":{"gitId":"DineshMagesvaran"},"content":"     * Sets the {@code Price} of the {@code price} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"DineshMagesvaran"},"content":"    public EntryBuilder withPrice(String price) {","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"DineshMagesvaran"},"content":"        this.price \u003d new Price(price);","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"DineshMagesvaran"},"content":"        return this;","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses the {@code reviews} into a {@code List\u003cReview\u003e} and set it to the {@code Entry} that we are building.","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public EntryBuilder withReviews(String ... reviews) {","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.reviews \u003d SampleDataUtil.getReviewList(reviews);","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"Donavanty"},"content":"    public Entry build() {","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"Sidney011100"},"content":"        return new Entry(name, rating, price, reviews, address, categories, schools);","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"marcusleeeugene":4,"Donavanty":20,"Sidney011100":20,"DineshMagesvaran":20,"-":51,"Prabhakaran-Gokul":10}},{"path":"src/test/java/fooddiary/testutil/EntryUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.parser.CliSyntax;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import fooddiary.model.entry.Review;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagCategory;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"Sidney011100"},"content":"import fooddiary.model.tag.TagSchool;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":" * A utility class for Entry.","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"Donavanty"},"content":"public class EntryUtil {","lastModifiedDate":"2021-03-19"},{"lineNumber":18,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"     * Returns an add command string for adding the {@code entry}.","lastModifiedDate":"2021-03-19"},{"lineNumber":21,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"Donavanty"},"content":"    public static String getAddCommand(Entry entry) {","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"Donavanty"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getEntryDetails(entry);","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"     * Returns the part of command string for the given {@code entry}\u0027s details.","lastModifiedDate":"2021-03-19"},{"lineNumber":28,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"Donavanty"},"content":"    public static String getEntryDetails(Entry entry) {","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Donavanty"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"        sb.append(CliSyntax.PREFIX_NAME + entry.getName().fullName + \" \");","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"        sb.append(CliSyntax.PREFIX_RATING + entry.getRating().value + \" \");","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"DineshMagesvaran"},"content":"        sb.append(CliSyntax.PREFIX_PRICE + entry.getPrice().value + \" \");","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        entry.getReviews().stream().forEach(s -\u003e sb.append(CliSyntax.PREFIX_REVIEW + s.value + \" \"));","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"Donavanty"},"content":"        sb.append(CliSyntax.PREFIX_ADDRESS + entry.getAddress().value + \" \");","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"Sidney011100"},"content":"        entry.getTagCategories().stream().forEach(","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"Sidney011100"},"content":"            s -\u003e sb.append(CliSyntax.PREFIX_TAG_CATEGORY + s.getTag() + \" \")","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"Sidney011100"},"content":"        );","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"Sidney011100"},"content":"        entry.getTagSchools().stream().forEach(","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"Sidney011100"},"content":"            s -\u003e sb.append(CliSyntax.PREFIX_TAG_SCHOOL + s.getTag() + \" \")","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"Donavanty"},"content":"        );","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"Donavanty"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"Donavanty"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"     * Returns the part of command string for the given {@code EditEntryDescriptor}\u0027s details.","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"Donavanty"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"Donavanty"},"content":"    public static String getEditEntryDescriptorDetails(EditCommand.EditEntryDescriptor descriptor) {","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"Donavanty"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"Donavanty"},"content":"        descriptor.getRating().ifPresent(rating -\u003e sb.append(CliSyntax.PREFIX_RATING).append(rating.value).append(\" \"));","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"DineshMagesvaran"},"content":"        descriptor.getPrice().ifPresent(price -\u003e sb.append(CliSyntax.PREFIX_PRICE).append(price.value).append(\" \"));","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (descriptor.getReviews().isPresent()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            List\u003cReview\u003e reviews \u003d descriptor.getReviews().get();","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (reviews.isEmpty()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                sb.append(CliSyntax.PREFIX_REVIEW);","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } else {","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                reviews.forEach(s -\u003e sb.append(CliSyntax.PREFIX_REVIEW).append(s.value).append(\" \"));","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"Donavanty"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(CliSyntax.PREFIX_ADDRESS)","lastModifiedDate":"2021-03-19"},{"lineNumber":62,"author":{"gitId":"Donavanty"},"content":"                .append(address.value).append(\" \"));","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"Sidney011100"},"content":"        if (descriptor.getTagCategories().isPresent()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"Sidney011100"},"content":"            Set\u003cTagCategory\u003e tags \u003d descriptor.getTagCategories().get();","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"Donavanty"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"Sidney011100"},"content":"                sb.append(CliSyntax.PREFIX_TAG_CATEGORY);","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"            } else {","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"Sidney011100"},"content":"                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG_CATEGORY).append(s.getTag()).append(\" \"));","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"Donavanty"},"content":"            }","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"Donavanty"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"Sidney011100"},"content":"        if (descriptor.getTagSchools().isPresent()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"Sidney011100"},"content":"            Set\u003cTagSchool\u003e tags \u003d descriptor.getTagSchools().get();","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"Sidney011100"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"Sidney011100"},"content":"                sb.append(CliSyntax.PREFIX_TAG_SCHOOL);","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"Sidney011100"},"content":"            } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"Sidney011100"},"content":"                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG_SCHOOL).append(s.getTag()).append(\" \"));","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"Sidney011100"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"Sidney011100"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"Sidney011100"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"Donavanty"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"Donavanty"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Donavanty":49,"Sidney011100":21,"DineshMagesvaran":2,"Prabhakaran-Gokul":11}},{"path":"src/test/java/fooddiary/testutil/FoodDiaryBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"public class FoodDiaryBuilder {","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"    private FoodDiary foodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"    public FoodDiaryBuilder() {","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"Donavanty"},"content":"        foodDiary \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"Donavanty"},"content":"    public FoodDiaryBuilder(FoodDiary foodDiary) {","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"Donavanty"},"content":"        this.foodDiary \u003d foodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"Donavanty"},"content":"    public FoodDiaryBuilder withEntry(Entry entry) {","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Donavanty"},"content":"        foodDiary.addEntry(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"Donavanty"},"content":"    public FoodDiary build() {","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"Donavanty"},"content":"        return foodDiary;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":13,"-":21}},{"path":"src/test/java/fooddiary/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":1,"-":71}},{"path":"src/test/java/fooddiary/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.Model;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"Donavanty"},"content":"     * Returns the middle index of the entry in the {@code model}\u0027s entry list.","lastModifiedDate":"2021-03-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"Donavanty"},"content":"        return Index.fromOneBased(model.getFilteredEntryList().size() / 2);","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"Donavanty"},"content":"     * Returns the last index of the entry in the {@code model}\u0027s entry list.","lastModifiedDate":"2021-03-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"Donavanty"},"content":"        return Index.fromOneBased(model.getFilteredEntryList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"Donavanty"},"content":"     * Returns the entry in the {@code model}\u0027s entry list at {@code index}.","lastModifiedDate":"2021-03-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"Donavanty"},"content":"    public static Entry getEntry(Model model, Index index) {","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"Donavanty"},"content":"        return model.getFilteredEntryList().get(index.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Donavanty":11,"-":44}},{"path":"src/test/java/fooddiary/testutil/TypicalEntries.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"Donavanty"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"Donavanty"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"Donavanty"},"content":"import fooddiary.logic.commands.CommandTestUtil;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.FoodDiary;","lastModifiedDate":"2021-03-19"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"import fooddiary.model.entry.Entry;","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":" * A utility class containing a list of {@code Entry} objects to be used in tests.","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":14,"author":{"gitId":"Donavanty"},"content":"public class TypicalEntries {","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":16,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_A \u003d new EntryBuilder().withName(\"Restaurant A\")","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withReviews(\"This is a review for Restaurant A.\")","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"DineshMagesvaran"},"content":"            .withRating(\"3\").withPrice(\"11\")","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"Sidney011100"},"content":"            .withTagCategories(\"WESTERN\")","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"Sidney011100"},"content":"            .withTagSchools(\"SCIENCE\")","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Sidney011100"},"content":"            .build();","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_B \u003d new EntryBuilder().withName(\"Restaurant B\")","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant B.\").withRating(\"2\").withPrice(\"12\")","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"Sidney011100"},"content":"            .withTagCategories(\"VEGAN\", \"DESSERT\")","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Sidney011100"},"content":"            .withTagSchools(\"SOC\")","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"Sidney011100"},"content":"            .build();","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"Sidney011100"},"content":"    public static final Entry ENTRY_C \u003d new EntryBuilder().withName(\"Restaurant C\")","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"Sidney011100"},"content":"            .withRating(\"1\").withPrice(\"13\")","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant C.\").withAddress(\"wall street\").build();","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_D \u003d new EntryBuilder().withName(\"Restaurant D\").withRating(\"5\").withPrice(\"14\")","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"Sidney011100"},"content":"            .withReviews(\"This is a review for Restaurant D.\").withAddress(\"10th street\")","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"Sidney011100"},"content":"            .withTagCategories(\"FASTFOOD\")","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"Sidney011100"},"content":"            .withTagSchools(\"BIZ\")","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"Sidney011100"},"content":"            .build();","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_E \u003d new EntryBuilder().withName(\"Restaurant E\").withRating(\"2\").withPrice(\"15\")","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant E.\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_F \u003d new EntryBuilder().withName(\"Restaurant F\").withRating(\"1\").withPrice(\"16\")","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant F.\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_G \u003d new EntryBuilder().withName(\"Restaurant G\").withRating(\"0\").withPrice(\"17\")","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant G.\").withAddress(\"4th street\").build();","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":44,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_H \u003d new EntryBuilder().withName(\"Restaurant H\").withRating(\"1\").withPrice(\"18\")","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant H.\").withAddress(\"little india\").build();","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry ENTRY_I \u003d new EntryBuilder().withName(\"Restaurant I\").withRating(\"1\").withPrice(\"19\")","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(\"This is a review for Restaurant I.\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":49,"author":{"gitId":"DineshMagesvaran"},"content":"    // Manually added - Entry\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry VALID_ENTRY_A \u003d new EntryBuilder().withName(CommandTestUtil.VALID_NAME_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"DineshMagesvaran"},"content":"            .withRating(CommandTestUtil.VALID_RATING_A).withPrice(CommandTestUtil.VALID_PRICE_A)","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(CommandTestUtil.VALID_REVIEW_A).withAddress(CommandTestUtil.VALID_ADDRESS_A)","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"Sidney011100"},"content":"            .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Entry VALID_ENTRY_B \u003d new EntryBuilder().withName(CommandTestUtil.VALID_NAME_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"DineshMagesvaran"},"content":"            .withRating(CommandTestUtil.VALID_RATING_B).withPrice(CommandTestUtil.VALID_PRICE_B)","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            .withReviews(CommandTestUtil.VALID_REVIEW_B).withAddress(CommandTestUtil.VALID_ADDRESS_B)","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"Sidney011100"},"content":"            .withTagCategories(CommandTestUtil.VALID_TAG_CATEGORY_WESTERN, CommandTestUtil.VALID_TAG_CATEGORY_FASTFOOD)","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":60,"author":{"gitId":"Donavanty"},"content":"    private TypicalEntries() {} // prevents instantiation","lastModifiedDate":"2021-03-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"DineshMagesvaran"},"content":"     * Returns a {@code FoodDiary} with all the typical entries.","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"DineshMagesvaran"},"content":"    public static FoodDiary getTypicalFoodDiaryWithMultipleEntries() {","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"Donavanty"},"content":"        FoodDiary ab \u003d new FoodDiary();","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"Donavanty"},"content":"        for (Entry entry : getTypicalEntries()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"Donavanty"},"content":"            ab.addEntry(entry);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":73,"author":{"gitId":"DineshMagesvaran"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":74,"author":{"gitId":"DineshMagesvaran"},"content":"     * Returns a {@code FoodDiary} with a single typical entry.","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"DineshMagesvaran"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":76,"author":{"gitId":"DineshMagesvaran"},"content":"    public static FoodDiary getTypicalFoodDiaryWithSingleEntry() {","lastModifiedDate":"2021-04-06"},{"lineNumber":77,"author":{"gitId":"DineshMagesvaran"},"content":"        FoodDiary ab \u003d new FoodDiary();","lastModifiedDate":"2021-04-06"},{"lineNumber":78,"author":{"gitId":"DineshMagesvaran"},"content":"        ab.addEntry(getTypicalEntries().get(0));","lastModifiedDate":"2021-04-06"},{"lineNumber":79,"author":{"gitId":"DineshMagesvaran"},"content":"        return ab;","lastModifiedDate":"2021-04-06"},{"lineNumber":80,"author":{"gitId":"DineshMagesvaran"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":81,"author":{"gitId":"DineshMagesvaran"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":82,"author":{"gitId":"Donavanty"},"content":"    public static List\u003cEntry\u003e getTypicalEntries() {","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"DineshMagesvaran"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ENTRY_A, ENTRY_B, ENTRY_C, ENTRY_D, ENTRY_E, ENTRY_F, ENTRY_G));","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"Donavanty":15,"Sidney011100":14,"DineshMagesvaran":27,"-":19,"Prabhakaran-Gokul":10}},{"path":"src/test/java/fooddiary/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import fooddiary.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"Donavanty"},"content":"    public static final Index INDEX_FIRST_ENTRY \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-19"},{"lineNumber":10,"author":{"gitId":"Donavanty"},"content":"    public static final Index INDEX_SECOND_ENTRY \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"Donavanty"},"content":"    public static final Index INDEX_THIRD_ENTRY \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"DineshMagesvaran"},"content":"    public static final Index INDEX_MILLIONTH_ENTRY \u003d Index.fromOneBased(1000000);","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"Donavanty":5,"DineshMagesvaran":1,"-":7}},{"path":"src/test/java/fooddiary/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"Donavanty":1,"-":34}},{"path":"src/test/java/fooddiary/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Donavanty"},"content":"package fooddiary.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"import static fooddiary.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2021-03-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"Donavanty"},"content":"import fooddiary.MainApp;","lastModifiedDate":"2021-03-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-19"},{"lineNumber":15,"author":{"gitId":"Donavanty"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"Donavanty":4,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"\u003c?import fooddiary.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"Donavanty":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"Donavanty"},"content":"\u003cfx:root type\u003d\"fooddiary.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"Donavanty":1,"-":5}}]
