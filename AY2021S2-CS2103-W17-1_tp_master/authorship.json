[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"* This is the **first iteration of NUS Module Planner**, a Software Engineering project for NUS CS2103\u003cbr\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W17-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W17-1/tp/actions)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"![mockup_img](https://ay2021s2-cs2103-w17-1.github.io/tp/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"* This is **Module Planning App project for NUS students**.\u003cbr\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  Example usages:"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"  * as a personalised module planner for an NUS student"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"  * as a platform to check whether graduation criteria is met"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"* The project allows NUS students to be able to plan for their modules to take in their future semesters by ensuring that their pre-requisites are met and that the modules taken are able to meet their graduation requirements."},{"lineNumber":12,"author":{"gitId":"-"},"content":"  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"* For the detailed documentation of this project, see the **[NUS Module Planner Product Website](https://ay2021s2-cs2103-w17-1.github.io/tp/)**."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"Acknowledgements:  "},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"seaniy":4,"-":6,"douglaswja":4,"ssagit":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"### Wang Haochen"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"\u003cimg src\u003d\"images/ssagit.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"[[github](https://github.com/ssagit)]"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"[[portfolio](team/ssagit.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"* Responsibilities: Scheduling \u0026 Tracking"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"### Sean Iau Yang"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"\u003cimg src\u003d\"images/seaniy.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"[[github](http://github.com/seaniy)]"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"[[portfolio](team/seaniy.md)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"* Responsibilities: Deliverables and deadlines"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"### Douglas Wei Jing Allwood"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"\u003cimg src\u003d\"images/douglaswja.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"[[github](http://github.com/douglaswja)] [[portfolio](team/douglaswja.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"* Responsibilities: Code Quality and Integration"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"### Chua Jun Jie Benedict"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"\u003cimg src\u003d\"images/benedictbcjj.png\" width\u003d\"200px\"\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"[[github](http://github.com/benedictbcjj)]"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"[[portfolio](team/benedictbcjj.md)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"* Responsibilities: Testing"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Yihe-Harry"},"content":"### Wang Yihe"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Yihe-Harry"},"content":"\u003cimg src\u003d\"images/yihe-harry.png\" width\u003d\"200px\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Yihe-Harry"},"content":"[[github](http://github.com/yihe-harry)]"},{"lineNumber":52,"author":{"gitId":"Yihe-Harry"},"content":"[[portfolio](team/yihe-harry.md)]"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Responsibilities: UI"}],"authorContributionMap":{"seaniy":4,"Yihe-Harry":4,"-":32,"douglaswja":6,"ssagit":4,"BenedictBCJJ":5}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your fork to CodeCov."},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"### Repository-wide checks"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"**If adding new checks:**"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN."},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory."},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"## Making a release"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/description/MainApp.java)."},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."}],"authorContributionMap":{"-":78,"ssagit":1}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"- Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  {:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"---"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"---"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"- NUS students"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"- has a hard time organising and planning what modules to take"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"- prefer desktop apps over phone apps"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"- can type fast"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"- prefers typing to mouse interactions"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"- is reasonably comfortable using CLI apps"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"- want to have a good way to check all MCs"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"- wants to have a good way to check all fulfilled pre-requisites"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"- wants to have a good way to plan for all their modules"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"**Value proposition**:"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"- managing study plan is much easier than existing choices (i.e. WHAT-IF report)"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"- planning for modules is more automatic/convenient than manual inputs (NUSMOD)"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"| Priority | As a …​           | I can …​                            | So that I can…​                                                        |"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"| -------- | ----------------- | ----------------------------------- | ---------------------------------------------------------------------- |"},{"lineNumber":44,"author":{"gitId":"-"},"content":"| `* * *`  | new user          | see usage instructions              | refer to instructions when I forget how to use the App                 |"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | have multiple study plans           | prepare for different study scenarios in university                    |"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | add multiple semesters to a plan    | create plans that involve multiple semesters                           |"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | add multiple modules to a semester  | plan for what modules i want to do in a given semester                 |"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | delete a study plan                 | remove plans that i no longer need                                     |"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | delete a semester from a plan       | remove semesters that i no longer need                                 |"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | delete a module from a semester     | remove modules that i no longer need                                   |"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | view summary information of a plan  | conveniently understand the plan without having to open it             |"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"| `* *`    | student user      | check if my plan contains 160MCs    | know whether my plan allows me to graduate                             |"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"| `* * *`  | student user      | view a module\u0027s prerequisites       | know what modules need to be done before hand                          |"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"| `* *`    | student user      | mark semesters as done              | advance my study plan according to the semesters that i have completed |"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"| `*`      | forgetful student | add and view grades of past modules | keep track of how well i did for different modules without remembering |"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"_{More to be added}_"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"**Use case: Add a plan**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"1.  User requests to add a plan"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"2.  AddressBook shows result"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":"- 2a. The given plan number already exists."},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":"  - 2a1. AddressBook shows an error message."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"BenedictBCJJ"},"content":"- 3a. The given plan number is invalid."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"BenedictBCJJ"},"content":"  - 3a1. AddressBook shows an error message."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"  Use case ends."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"**Use case: Delete a plan**"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"1.  User requests to list plans"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"2.  AddressBook shows a list of plans"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"3.  User requests to delete a specific plan in the list"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"4.  AddressBook deletes the plan"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"BenedictBCJJ"},"content":"- 2a. The list is empty."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"BenedictBCJJ"},"content":"- 3a. The given index is invalid."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"BenedictBCJJ"},"content":"  - 3a1. AddressBook shows an error message."},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    Use case resumes at step 2."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"seaniy"},"content":"**Use case: Add a module to semester**"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"seaniy"},"content":"**MSS**"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"seaniy"},"content":"1.  User requests to add a module"},{"lineNumber":114,"author":{"gitId":"seaniy"},"content":"2.  AddressBook shows result"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"seaniy"},"content":"    Use case ends."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"seaniy"},"content":"**Extensions**"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"BenedictBCJJ"},"content":"- 2a. The given module number is already added."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"BenedictBCJJ"},"content":"  - 2a1. AddressBook shows an error message."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"seaniy"},"content":"  Use case ends."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"BenedictBCJJ"},"content":"- 3a. The given plan/semester number does not exist."},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"BenedictBCJJ"},"content":"  - 3a1. AddressBook shows an error message."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"seaniy"},"content":"  Use case ends."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"BenedictBCJJ"},"content":"- 4a. The given module number does not exist."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"BenedictBCJJ"},"content":"  - 4a1. AddressBook shows an error message."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"seaniy"},"content":"  Use case ends."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"BenedictBCJJ"},"content":"- 5a. The given module number does not have its prerequisites met."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"BenedictBCJJ"},"content":"  - 3a1. AddressBook shows a warning prompt."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"seaniy"},"content":"  Use case ends."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":147,"author":{"gitId":"BenedictBCJJ"},"content":"2.  Should be able to handle 500 modules without a noticeable sluggishness in performance for typical usage."},{"lineNumber":148,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":149,"author":{"gitId":"BenedictBCJJ"},"content":"4.  The system should be backward compatible with data produced by earlier versions of the system."},{"lineNumber":150,"author":{"gitId":"BenedictBCJJ"},"content":"5.  The system should work on both 32-bit and 64-bit environments"},{"lineNumber":151,"author":{"gitId":"BenedictBCJJ"},"content":"6.  The system should respond within two seconds."},{"lineNumber":152,"author":{"gitId":"BenedictBCJJ"},"content":"7.  The system should be usable by a novice who has never attended a single semester in NUS."},{"lineNumber":153,"author":{"gitId":"BenedictBCJJ"},"content":"8.  The product should not be required to share data between users."},{"lineNumber":154,"author":{"gitId":"BenedictBCJJ"},"content":"9.  The product should not be able to detect if the registered module is valid or available in NUS."},{"lineNumber":155,"author":{"gitId":"BenedictBCJJ"},"content":"10. The product will not support any other modules other than for NUS."},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"BenedictBCJJ"},"content":"_{More to be added}_"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"Yihe-Harry"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":162,"author":{"gitId":"Yihe-Harry"},"content":"* **NUS**: National University of Singapore"},{"lineNumber":163,"author":{"gitId":"Yihe-Harry"},"content":"* **MCs**: Module credits, usually 4 for each sem-long module"},{"lineNumber":164,"author":{"gitId":"Yihe-Harry"},"content":"* **Module**: Classes for students in university. It has both a title and a module code"},{"lineNumber":165,"author":{"gitId":"Yihe-Harry"},"content":"* **Module prerequisite**: Students must fulfill by passing the prerequisite modules before taking this module"},{"lineNumber":166,"author":{"gitId":"BenedictBCJJ"},"content":"---"}],"authorContributionMap":{"seaniy":14,"Yihe-Harry":5,"-":87,"douglaswja":12,"ssagit":6,"BenedictBCJJ":42}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"   1. Run the `seedu.description.Main` and try a few commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)"}],"authorContributionMap":{"-":54,"ssagit":1}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"   e.g. `seedu.description.commons.StringUtilTest`"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"   e.g. `seedu.description.storage.StorageManagerTest`"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"   e.g. `seedu.description.logic.LogicManagerTest`"}],"authorContributionMap":{"-":33,"ssagit":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Yihe-Harry"},"content":"NUS Module Planner is a **desktop app for NUS students to manage and plan the modules to enrol in upcoming semesters, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, NUS Module Planner can get your module planning done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Yihe-Harry"},"content":"- Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  {:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Yihe-Harry"},"content":"---"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Yihe-Harry"},"content":"1. Download the latest `XYZ.jar` from [here]()."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Yihe-Harry"},"content":"   - **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Yihe-Harry"},"content":"   - **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"Yihe-Harry"},"content":"   - **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Yihe-Harry"},"content":"   - **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Yihe-Harry"},"content":"   - **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Yihe-Harry"},"content":"---"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Yihe-Harry"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"Yihe-Harry"},"content":"- Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Yihe-Harry"},"content":"- Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"Yihe-Harry"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"Yihe-Harry"},"content":"- Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"Yihe-Harry"},"content":"- If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"Yihe-Harry"},"content":"- Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Yihe-Harry"},"content":"# User Commands"},{"lineNumber":77,"author":{"gitId":"Yihe-Harry"},"content":"## General Commands"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Yihe-Harry"},"content":"### Check graduation : `validate`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"Yihe-Harry"},"content":"Format: `validate [p/PLAN_NUMBER]`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"Yihe-Harry"},"content":"If the optional argument `[p/PLAN_NUMBER]` is provided:  "},{"lineNumber":84,"author":{"gitId":"Yihe-Harry"},"content":"- Shows header"},{"lineNumber":85,"author":{"gitId":"Yihe-Harry"},"content":"    - Shows plan number"},{"lineNumber":86,"author":{"gitId":"Yihe-Harry"},"content":"    - Shows how many MCs the plan has"},{"lineNumber":87,"author":{"gitId":"Yihe-Harry"},"content":"    - Shows how many MCs completed"},{"lineNumber":88,"author":{"gitId":"Yihe-Harry"},"content":"    - Shows how many semesters remaining in plan"},{"lineNumber":89,"author":{"gitId":"Yihe-Harry"},"content":"- Shows rows of modules placed in respective semesters"},{"lineNumber":90,"author":{"gitId":"Yihe-Harry"},"content":"    - Shows X tables of X semesters"},{"lineNumber":91,"author":{"gitId":"Yihe-Harry"},"content":"    - Each table has a header of how many MCs the semester will have"},{"lineNumber":92,"author":{"gitId":"Yihe-Harry"},"content":"    - Each table shows module details"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"Yihe-Harry"},"content":"Otherwise:  "},{"lineNumber":95,"author":{"gitId":"Yihe-Harry"},"content":"- Shows list of plans that are still valid"},{"lineNumber":96,"author":{"gitId":"Yihe-Harry"},"content":"    - Each row is a plan"},{"lineNumber":97,"author":{"gitId":"Yihe-Harry"},"content":"        - Each plan has 4 column attributes:"},{"lineNumber":98,"author":{"gitId":"Yihe-Harry"},"content":"            - Shows plan number"},{"lineNumber":99,"author":{"gitId":"Yihe-Harry"},"content":"            - Shows how many MCs the plan has"},{"lineNumber":100,"author":{"gitId":"Yihe-Harry"},"content":"            - Shows how many MCs completed"},{"lineNumber":101,"author":{"gitId":"Yihe-Harry"},"content":"            - Shows how many semesters remaining in plan"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"Yihe-Harry"},"content":"\u003e Tip: A plan is valid if the modules contained in its history match those of"},{"lineNumber":104,"author":{"gitId":"Yihe-Harry"},"content":"\u003e the current Master Plan.  "},{"lineNumber":105,"author":{"gitId":"Yihe-Harry"},"content":"\u003e This ensures that any valid plan is a viable option for the user."},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"Yihe-Harry"},"content":"## Plan commands"},{"lineNumber":108,"author":{"gitId":"Yihe-Harry"},"content":"### List a summary of all plans: `list plans`"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"Yihe-Harry"},"content":"Format: `list plans`"},{"lineNumber":111,"author":{"gitId":"Yihe-Harry"},"content":"Tip: A user can view an individual plan to see more details about it. (See show p/PLAN_NUMBER)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"Yihe-Harry"},"content":"Format: `master p/PLAN_NUMBER`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"Yihe-Harry"},"content":"This command must be done by the user at least once before they can use other commands."},{"lineNumber":116,"author":{"gitId":"Yihe-Harry"},"content":"Marks the given plan as the master plan, and this plan should contain all the modules that the user has taken (if any)."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"Yihe-Harry"},"content":"Example output:"},{"lineNumber":119,"author":{"gitId":"Yihe-Harry"},"content":"[IMG]"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"Yihe-Harry"},"content":"### Create Plan: `add/delete`"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"Yihe-Harry"},"content":"Format: `add/delete p/PLAN_NUMBER`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"Yihe-Harry"},"content":"Shows 2 rows:"},{"lineNumber":126,"author":{"gitId":"Yihe-Harry"},"content":"- Whether plan is added/deleted is successful/unsuccessful"},{"lineNumber":127,"author":{"gitId":"Yihe-Harry"},"content":"- Plan number"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"Yihe-Harry"},"content":"Constraints:"},{"lineNumber":130,"author":{"gitId":"Yihe-Harry"},"content":"- Trying to add a plan that already exist will not be allowed"},{"lineNumber":131,"author":{"gitId":"Yihe-Harry"},"content":"- Trying to delete a plan that does not exist will not be allowed"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"Yihe-Harry"},"content":"### Set Plan as Master Plan: `master`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"Yihe-Harry"},"content":"Format: `master p/PLAN_NUMBER`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"Yihe-Harry"},"content":"This command must be done by the user at least once before they can use other commands."},{"lineNumber":138,"author":{"gitId":"Yihe-Harry"},"content":"Marks the given plan as the master plan, and this plan should contain all the modules that the user has taken (if any)."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"Yihe-Harry"},"content":"Example output:"},{"lineNumber":141,"author":{"gitId":"Yihe-Harry"},"content":"[IMG]"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"Yihe-Harry"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":145,"author":{"gitId":"Yihe-Harry"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":146,"author":{"gitId":"Yihe-Harry"},"content":"## Semester commands"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"Yihe-Harry"},"content":"### Show the number of MCs the user is currently taking: `show MCs`"},{"lineNumber":149,"author":{"gitId":"Yihe-Harry"},"content":"Format: `Show MCs`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"Yihe-Harry"},"content":"Example output: `The current MCs you are taking is xxx`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"Yihe-Harry"},"content":"### Calculate and show the current CAP (Cumulative academic points) of the student: `show CAP`"},{"lineNumber":154,"author":{"gitId":"Yihe-Harry"},"content":"Format: `Show CAP`"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"Yihe-Harry"},"content":"This command takes in the grades of modules user has marked as completed and entered their grade, and calculate their CAP "},{"lineNumber":157,"author":{"gitId":"Yihe-Harry"},"content":"using this formula"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"Yihe-Harry"},"content":"![modular-system](https://user-images.githubusercontent.com/67280376/109455909-9e9f8380-7a92-11eb-9ea1-f49801578a95.png)"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"Yihe-Harry"},"content":"Example output `Current CAP is xxx`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"Yihe-Harry"},"content":"### Add/Delete Semester to/from Plan: `add/delete`"},{"lineNumber":165,"author":{"gitId":"Yihe-Harry"},"content":"Format for adding: `add p/PLAN_NUMBER s/SEM_NUMBER`  "},{"lineNumber":166,"author":{"gitId":"Yihe-Harry"},"content":"Format for deleting: `delete p/PLAN_NUMBER s/SEM_NUMBER`  "},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"Yihe-Harry"},"content":"The output will show whether the operation was successful and include the "},{"lineNumber":169,"author":{"gitId":"Yihe-Harry"},"content":"semester number in its output.  "},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"Yihe-Harry"},"content":"Constraints:"},{"lineNumber":172,"author":{"gitId":"Yihe-Harry"},"content":"* Trying to add a semester that already exist will not be allowed"},{"lineNumber":173,"author":{"gitId":"Yihe-Harry"},"content":"* Trying to delete a semester that does not exist will not be allowed"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"Yihe-Harry"},"content":"### Set Semester as in-progress: `semester current`"},{"lineNumber":177,"author":{"gitId":"Yihe-Harry"},"content":"Format: `sem s/SEM_NUMBER current/`"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"Yihe-Harry"},"content":"Marks the supplied semester as the current semester of the master plan."},{"lineNumber":180,"author":{"gitId":"Yihe-Harry"},"content":"This indicates that all previous semesters are part of the user’s history and all future semesters have yet to be attempted."},{"lineNumber":181,"author":{"gitId":"Yihe-Harry"},"content":"The user will have to manually update the current semester as time progresses."},{"lineNumber":182,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":183,"author":{"gitId":"Yihe-Harry"},"content":"Example output:"},{"lineNumber":184,"author":{"gitId":"Yihe-Harry"},"content":"[IMG]"},{"lineNumber":185,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":186,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":187,"author":{"gitId":"Yihe-Harry"},"content":"### Show history: `history`"},{"lineNumber":188,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":189,"author":{"gitId":"Yihe-Harry"},"content":"Format: `history`"},{"lineNumber":190,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":191,"author":{"gitId":"Yihe-Harry"},"content":"The above command takes no arguments and shows the user a list of modules that "},{"lineNumber":192,"author":{"gitId":"Yihe-Harry"},"content":"they have completed up until before the *current semester*."},{"lineNumber":193,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":194,"author":{"gitId":"Yihe-Harry"},"content":"\u003e Tip: The *current semester* is the semester that was marked using "},{"lineNumber":195,"author":{"gitId":"Yihe-Harry"},"content":"\u003e the `semester current` command."},{"lineNumber":196,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":197,"author":{"gitId":"Yihe-Harry"},"content":"Example output:"},{"lineNumber":198,"author":{"gitId":"Yihe-Harry"},"content":"[IMG]"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"Yihe-Harry"},"content":"## Module commands"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"Yihe-Harry"},"content":"### Add/Delete module to/from semester: `add/delete`"},{"lineNumber":206,"author":{"gitId":"Yihe-Harry"},"content":"Format for adding: `add m/MODULE_CODE p/PLAN_NUMBER s/SEM_NUMBER`"},{"lineNumber":207,"author":{"gitId":"Yihe-Harry"},"content":"Format for deleting: `delete m/MODULE_CODE p/PLAN_NUMBER s/SEM_NUMBER`  "},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"Yihe-Harry"},"content":"\u003e Tip: A user can view module info to see more details about it. (See `info`)"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"Yihe-Harry"},"content":"This command takes in three arguments, `MODULE_CODE`, `PLAN_NUMBER` and "},{"lineNumber":212,"author":{"gitId":"Yihe-Harry"},"content":"`SEM_NUMBER`, and outputs meta details about the module being "},{"lineNumber":213,"author":{"gitId":"Yihe-Harry"},"content":"added/deleted, as well as whether the addition/deletion was successful or not.   "},{"lineNumber":214,"author":{"gitId":"Yihe-Harry"},"content":"The details to output are as follows:  "},{"lineNumber":215,"author":{"gitId":"Yihe-Harry"},"content":"* Module addition/deletion success status"},{"lineNumber":216,"author":{"gitId":"Yihe-Harry"},"content":"* Semester number"},{"lineNumber":217,"author":{"gitId":"Yihe-Harry"},"content":"* Module code"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"Yihe-Harry"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":220,"author":{"gitId":"douglaswja"},"content":"## Semester commands"},{"lineNumber":221,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":222,"author":{"gitId":"douglaswja"},"content":"### Show the number of MCs the user is currently taking: `show MCs`"},{"lineNumber":223,"author":{"gitId":"douglaswja"},"content":"Format: `Show MCs`"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"Yihe-Harry"},"content":"Example output: `The current MCs you are taking is xxx`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"douglaswja"},"content":"### Calculate and show the current CAP (Cumulative academic points) of the student: `show CAP`"},{"lineNumber":228,"author":{"gitId":"douglaswja"},"content":"Format: `Show CAP`"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"Yihe-Harry"},"content":"This command takes in the grades of modules user has marked as completed and entered their grade, and calculate their CAP "},{"lineNumber":231,"author":{"gitId":"Yihe-Harry"},"content":"using this formula"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"Yihe-Harry"},"content":"![modular-system](https://user-images.githubusercontent.com/67280376/109455909-9e9f8380-7a92-11eb-9ea1-f49801578a95.png)"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"Yihe-Harry"},"content":"Example output `Current CAP is xxx`"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"douglaswja"},"content":"### Add/Delete Semester to/from Plan: `add/delete`"},{"lineNumber":239,"author":{"gitId":"douglaswja"},"content":"Format for adding: `add p/PLAN_NUMBER s/SEM_NUMBER`  "},{"lineNumber":240,"author":{"gitId":"douglaswja"},"content":"Format for deleting: `delete p/PLAN_NUMBER s/SEM_NUMBER`  "},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"douglaswja"},"content":"The output will show whether the operation was successful and include the "},{"lineNumber":243,"author":{"gitId":"douglaswja"},"content":"semester number in its output.  "},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"douglaswja"},"content":"Constraints:"},{"lineNumber":246,"author":{"gitId":"douglaswja"},"content":"* Trying to add a semester that already exist will not be allowed"},{"lineNumber":247,"author":{"gitId":"douglaswja"},"content":"* Trying to delete a semester that does not exist will not be allowed"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"douglaswja"},"content":"### Set Semester as in-progress: `semester current`"},{"lineNumber":251,"author":{"gitId":"douglaswja"},"content":"Format: `sem s/SEM_NUMBER current/`"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"BenedictBCJJ"},"content":"Marks the supplied semester as the current semester of the master plan."},{"lineNumber":254,"author":{"gitId":"BenedictBCJJ"},"content":"This indicates that all previous semesters are part of the user’s history and all future semesters have yet to be attempted."},{"lineNumber":255,"author":{"gitId":"BenedictBCJJ"},"content":"The user will have to manually update the current semester as time progresses."},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"BenedictBCJJ"},"content":"Example output:"},{"lineNumber":258,"author":{"gitId":"BenedictBCJJ"},"content":"[IMG]"},{"lineNumber":259,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":260,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":261,"author":{"gitId":"douglaswja"},"content":"### Show history: `history`"},{"lineNumber":262,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":263,"author":{"gitId":"douglaswja"},"content":"Format: `history`"},{"lineNumber":264,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":265,"author":{"gitId":"douglaswja"},"content":"The above command takes no arguments and shows the user a list of modules that "},{"lineNumber":266,"author":{"gitId":"douglaswja"},"content":"they have completed up until before the *current semester*."},{"lineNumber":267,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":268,"author":{"gitId":"douglaswja"},"content":"\u003e Tip: The *current semester* is the semester that was marked using "},{"lineNumber":269,"author":{"gitId":"douglaswja"},"content":"\u003e the `semester current` command."},{"lineNumber":270,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":271,"author":{"gitId":"BenedictBCJJ"},"content":"Example output:"},{"lineNumber":272,"author":{"gitId":"BenedictBCJJ"},"content":"[IMG]"},{"lineNumber":273,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":274,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":275,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":276,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":277,"author":{"gitId":"douglaswja"},"content":"## Module commands"},{"lineNumber":278,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":279,"author":{"gitId":"douglaswja"},"content":"### Add/Delete module to/from semester: `add/delete`"},{"lineNumber":280,"author":{"gitId":"douglaswja"},"content":"Format for adding: `add m/MODULE_CODE p/PLAN_NUMBER s/SEM_NUMBER`"},{"lineNumber":281,"author":{"gitId":"douglaswja"},"content":"Format for deleting: `delete m/MODULE_CODE p/PLAN_NUMBER s/SEM_NUMBER`  "},{"lineNumber":282,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":283,"author":{"gitId":"douglaswja"},"content":"\u003e Tip: A user can view module info to see more details about it. (See `info`)"},{"lineNumber":284,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":285,"author":{"gitId":"douglaswja"},"content":"This command takes in three arguments, `MODULE_CODE`, `PLAN_NUMBER` and "},{"lineNumber":286,"author":{"gitId":"douglaswja"},"content":"`SEM_NUMBER`, and outputs meta details about the module being "},{"lineNumber":287,"author":{"gitId":"douglaswja"},"content":"added/deleted, as well as whether the addition/deletion was successful or not.   "},{"lineNumber":288,"author":{"gitId":"douglaswja"},"content":"The details to output are as follows:  "},{"lineNumber":289,"author":{"gitId":"douglaswja"},"content":"* Module addition/deletion success status"},{"lineNumber":290,"author":{"gitId":"douglaswja"},"content":"* Semester number"},{"lineNumber":291,"author":{"gitId":"douglaswja"},"content":"* Module code"},{"lineNumber":292,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":293,"author":{"gitId":"Yihe-Harry"},"content":"Constraints:  "},{"lineNumber":294,"author":{"gitId":"Yihe-Harry"},"content":"* Trying to add a module that already exists will not be allowed"},{"lineNumber":295,"author":{"gitId":"Yihe-Harry"},"content":"* Trying to add/delete a nonexistent module code/plan number/semester "},{"lineNumber":296,"author":{"gitId":"Yihe-Harry"},"content":"  number will not be allowed  "},{"lineNumber":297,"author":{"gitId":"Yihe-Harry"},"content":"  "},{"lineNumber":298,"author":{"gitId":"Yihe-Harry"},"content":"Prompts:  "},{"lineNumber":299,"author":{"gitId":"Yihe-Harry"},"content":"* Adding a module without prerequisites fulfilled results in a warning"},{"lineNumber":300,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":301,"author":{"gitId":"Yihe-Harry"},"content":"### View module info: `info`"},{"lineNumber":302,"author":{"gitId":"Yihe-Harry"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":303,"author":{"gitId":"Yihe-Harry"},"content":"Format: `info m/MODULE_CODE`    "},{"lineNumber":304,"author":{"gitId":"Yihe-Harry"},"content":"\u003e Tip: A user can also add a module to a plan/semester (See `add/delete`)  "},{"lineNumber":305,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":306,"author":{"gitId":"Yihe-Harry"},"content":"By default, this command takes in one optional argument, `MODULE_CODE`,"},{"lineNumber":307,"author":{"gitId":"Yihe-Harry"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":308,"author":{"gitId":"douglaswja"},"content":"Format: `info m/MODULE_CODE`"},{"lineNumber":309,"author":{"gitId":"douglaswja"},"content":"Tip: A user can also add a module to a plan/semester (See `add/delete`)"},{"lineNumber":310,"author":{"gitId":"douglaswja"},"content":"By default, this command takes in one optional argument, `MODULE_CODE`,"},{"lineNumber":311,"author":{"gitId":"Yihe-Harry"},"content":"and outputs the module information including:  "},{"lineNumber":312,"author":{"gitId":"Yihe-Harry"},"content":"* Brief Description"},{"lineNumber":313,"author":{"gitId":"Yihe-Harry"},"content":"* Number of MCs"},{"lineNumber":314,"author":{"gitId":"Yihe-Harry"},"content":"* Semesters available"},{"lineNumber":315,"author":{"gitId":"Yihe-Harry"},"content":"* Pre-requisites"},{"lineNumber":316,"author":{"gitId":"Yihe-Harry"},"content":"* Preclusions  "},{"lineNumber":317,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":318,"author":{"gitId":"Yihe-Harry"},"content":"Constraints:  "},{"lineNumber":319,"author":{"gitId":"Yihe-Harry"},"content":"* Module has to exist"},{"lineNumber":320,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":321,"author":{"gitId":"Yihe-Harry"},"content":"### Clearing all entries : `clear`"},{"lineNumber":322,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":323,"author":{"gitId":"Yihe-Harry"},"content":"Clears all entries from the address book."},{"lineNumber":324,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":325,"author":{"gitId":"Yihe-Harry"},"content":"Format: `clear`"},{"lineNumber":326,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":327,"author":{"gitId":"Yihe-Harry"},"content":"### Exiting the program : `exit`"},{"lineNumber":328,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":329,"author":{"gitId":"Yihe-Harry"},"content":"Exits the program."},{"lineNumber":330,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":331,"author":{"gitId":"Yihe-Harry"},"content":"Format: `exit`"}],"authorContributionMap":{"Yihe-Harry":162,"-":112,"douglaswja":42,"BenedictBCJJ":15}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"title: NUS Module Planner"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"seaniy":1,"-":18}},{"path":"docs/team/benedictbcjj.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"---"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"title: BenedictBCJJ\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"---"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"## Project: NUS Module Planner"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"NUS Module planner is a brownfield project based on AddressBook - Level 3, a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":""}],"authorContributionMap":{"BenedictBCJJ":11}},{"path":"docs/team/douglaswja.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"---"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"title: Douglas Allwood Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"---"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"## Project: NUS Module Planner"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"NUS Module planner is a brownfield project based on AddressBook - Level 3, a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"douglaswja":10}},{"path":"docs/team/seaniy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"---"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"title: seaniy\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"---"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"## Project: NUS Module Planner"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"NUS Module planner is a brownfield project based on AddressBook - Level 3, a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"seaniy":10}},{"path":"docs/team/ssagit.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"---"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"title: ssagit\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"---"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"## Project: NUS Module Planner"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"NUS Module planner is a brownfield project based on AddressBook - Level 3, a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"ssagit":10}},{"path":"docs/team/yihe-harry.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Yihe-Harry"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Yihe-Harry"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Yihe-Harry"},"content":"title: Yihe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Yihe-Harry"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":6,"author":{"gitId":"Yihe-Harry"},"content":"## Project: NUS Module Planner"},{"lineNumber":7,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":8,"author":{"gitId":"Yihe-Harry"},"content":"NUS Module planner is a brownfield project based on AddressBook - Level 3, a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":10,"author":{"gitId":"Yihe-Harry"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":11,"author":{"gitId":"Yihe-Harry"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"Yihe-Harry"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":13,"author":{"gitId":"Yihe-Harry"},"content":"Given below are my contributions to the project."},{"lineNumber":14,"author":{"gitId":"Yihe-Harry"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e e804dd300f6ebd9d4de6833688ba5e21d1e4d70f"}],"authorContributionMap":{"Yihe-Harry":14}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their description book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/description/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"package seedu.description.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"import seedu.description.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":" * Changes the remark of an existing plan in the description book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the plan identified \""},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"            + \"by the index number used in the last plan listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"import static seedu.description.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"     * @param index of the plan in the filtered plan list to edit the remark"},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"     * @param remark of the plan to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"ssagit"},"content":"Create a `RemarkCommandParser` class in the `seedu.description.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"ssagit"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of plan data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the plan’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a plan."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"ssagit"},"content":"Create a new `Remark` in `seedu.description.model.plan`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"ssagit"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each plan."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"ssagit"},"content":"Simply add the following to [`seedu.description.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"ssagit"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty description book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"ssagit"},"content":"public PersonCard(Person plan, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"ssagit"},"content":"    remark.setText(plan.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"ssagit"},"content":"        Person planToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"ssagit"},"content":"        Person editedPlan \u003d new Person(planToEdit.getName(), planToEdit.getPhone(), planToEdit.getEmail(),"},{"lineNumber":345,"author":{"gitId":"ssagit"},"content":"                planToEdit.getAddress(), remark, planToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"ssagit"},"content":"        model.setPerson(planToEdit, editedPlan);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"ssagit"},"content":"        return new CommandResult(generateSuccessMessage(editedPlan));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"ssagit"},"content":"     * {@code planToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"ssagit"},"content":"    private String generateSuccessMessage(Person planToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"ssagit"},"content":"        return String.format(message, planToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"-":368,"ssagit":26}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"In this tutorial, we’ll do exactly just that and remove the `description` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"The `description` field in `Person` is actually an instance of the `seedu.address.model.plan.Descriptionress` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"1. Safe delete the field `description` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"1. Remove the usages of `description` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `description` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `description` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$description` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"![$description](../images/remove/$description.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"private Label description;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"\u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `description` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"  \"plans\": [ {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"    \"description\": \"4th street\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"You can go through each individual `json` file and manually remove the `description` field."}],"authorContributionMap":{"-":89,"ssagit":14}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.description.ui.CommandBox.CommandExecutor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":155,"author":{"gitId":"ssagit"},"content":"       Person planToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":156,"author":{"gitId":"ssagit"},"content":"       Person editedPlan \u003d createEditedPerson(planToEdit, editPersonDescriptor);"},{"lineNumber":157,"author":{"gitId":"ssagit"},"content":"       if (!planToEdit.isSamePerson(editedPlan) \u0026\u0026 model.hasPerson(editedPlan)) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":160,"author":{"gitId":"ssagit"},"content":"       model.setPerson(planToEdit, editedPlan);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":162,"author":{"gitId":"ssagit"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPlan));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":183,"author":{"gitId":"ssagit"},"content":"       plans.addAll("},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"ssagit"},"content":"    3.  Save the description book in the CSV format instead"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"ssagit"},"content":"    6.  Add a new entity to the description book"}],"authorContributionMap":{"-":241,"ssagit":9}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"import seedu.address.storage.JsonPlansStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonPlansStorage(userPrefs.getPlansFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"            addressBookOptional \u003d storage.readPlans();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":176,"author":{"gitId":"ssagit"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Description Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":3,"-":179,"ssagit":1}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_INVALID_PLAN_DISPLAYED_INDEX \u003d \"The plan index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_INVALID_SEM_NUMBER \u003d \"The semester number provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":2,"-":12}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"     * @see seedu.address.model.Model#getPlans()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    ObservableList\u003cPlan\u003e getFilteredPersonList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":1,"-":47,"ssagit":2}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"            storage.savePlans(model.getPlans());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        return model.getPlans();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"    public ObservableList\u003cPlan\u003e getFilteredPersonList() {"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"        return model.getFilteredPlanList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"        return model.getPlansFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":4,"-":75,"ssagit":2}},{"path":"src/main/java/seedu/address/logic/commands/AddPlanCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":" * Adds a plan to the address book."},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"public class AddPlanCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    public static final String COMMAND_WORD \u003d \"addp\";"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a plan. \""},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"            + PREFIX_DESCRIPTION + \"Software Engineering Route \""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"            + PREFIX_TAG + \"fun \""},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            + PREFIX_TAG + \"good prospects\";"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New plan added: Plan %1$s\";"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_DUPLICATE_PLAN \u003d \"This plan already exists\";"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"    private final Plan toAdd;"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"     * Creates an AddPlanCommand to add the specified {@code Plan}"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    public AddPlanCommand(Plan plan) {"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        requireNonNull(plan);"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        toAdd \u003d plan;"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"        if (model.hasPlan(toAdd)) {"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PLAN);"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        model.addPlan(toAdd);"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getFilteredPlanList().size() + toAdd.toString()));"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"                || (other instanceof AddPlanCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"                \u0026\u0026 toAdd.equals(((AddPlanCommand) other).toAdd));"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":58}},{"path":"src/main/java/seedu/address/logic/commands/AddSemesterCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN_NUMBER;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEM_NUMBER;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":" * Adds a semester to a plan in the address book."},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"public class AddSemesterCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    public static final String COMMAND_WORD \u003d \"adds\";"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a semester to a plan. \""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            + PREFIX_PLAN_NUMBER + \"PLAN NUMBER \""},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"            + PREFIX_SEM_NUMBER + \"SEM NUMBER \\n\""},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"            + PREFIX_PLAN_NUMBER + \"1 \""},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"            + PREFIX_SEM_NUMBER + \"2 \";"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New semester added to Plan %1$s: %2$s\";"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_DUPLICATE_PLAN \u003d \"This semester already exists\";"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    private final Semester toAdd;"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    private final Index toAddTo; // plan number"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"     * Creates an AddSemesterCommand to add the specified {@code Semester}"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    public AddSemesterCommand(Index planNumber, Semester semester) {"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"        requireNonNull(semester);"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"        toAdd \u003d semester;"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"        toAddTo \u003d planNumber;"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"        if (toAddTo.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"        if (model.hasSemester(toAddTo.getZeroBased(), toAdd)) {"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PLAN);"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        model.addSemester(toAddTo.getZeroBased(), toAdd);"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddTo.getOneBased(), toAdd));"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"                || (other instanceof AddSemesterCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"                \u0026\u0026 toAdd.equals(((AddSemesterCommand) other).toAdd));"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":69}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Description book has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"        model.setPlans(new AddressBook());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":1,"-":21,"ssagit":1}},{"path":"src/main/java/seedu/address/logic/commands/DeletePlanCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN_NUMBER;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":" * Deletes a plan identified using it\u0027s displayed index from the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"public class DeletePlanCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    public static final String COMMAND_WORD \u003d \"deletep\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"            + \": Deletes the plan identified by the index number used in the displayed plan list.\\n\""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"            + PREFIX_PLAN_NUMBER + \"PLAN NUMBER (must be a valid plan number)\\n\""},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"            + PREFIX_PLAN_NUMBER + \"1\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Plan deleted: Plan %1$s\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"     * Creates a DeletePlanCommand to delete the specified {@code Plan}"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    public DeletePlanCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"        Plan planToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"        model.deletePlan(planToDelete);"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS,"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"                targetIndex.getOneBased() + planToDelete.toString()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"                || (other instanceof DeletePlanCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePlanCommand) other).targetIndex)); // state check"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":19,"-":37,"ssagit":4}},{"path":"src/main/java/seedu/address/logic/commands/DeleteSemesterCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN_NUMBER;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEM_NUMBER;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":" * Deletes a semester from the plan identified using it\u0027s displayed index from the address book."},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"public class DeleteSemesterCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    public static final String COMMAND_WORD \u003d \"deletes\";"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"            + \": Deletes a semester from the plan identified by the index number used in the displayed plan list.\\n\""},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"            + PREFIX_PLAN_NUMBER + \"PLAN NUMBER (must be a valid plan number)\""},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"            + PREFIX_SEM_NUMBER + \"SEM NUMBER (must be a valid plan number)\\n\""},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"            + PREFIX_PLAN_NUMBER + \"1\""},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"            + PREFIX_SEM_NUMBER + \"1\";"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    public static final String MESSAGE_DELETE_SEMESTER_SUCCESS \u003d \"Semester deleted from Plan %1$s: %2$s\";"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    private final Index targetPlanIndex;"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    private final int targetSemNumber;"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"     * Creates a DeleteSemesterCommand to delete the specified {@code Semester}"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    public DeleteSemesterCommand(Index targetPlanIndex, int targetSemNumber) {"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"        this.targetPlanIndex \u003d targetPlanIndex;"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"        this.targetSemNumber \u003d targetSemNumber;"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        if (targetPlanIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"        Plan planToDeleteFrom \u003d lastShownList.get(targetPlanIndex.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"        if (!planToDeleteFrom.hasSemester(targetSemNumber)) {"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_SEM_NUMBER);"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        Semester semesterToDelete \u003d planToDeleteFrom.getSemester(targetSemNumber);"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"        model.deleteSemester(planToDeleteFrom, semesterToDelete);"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_SEMESTER_SUCCESS,"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"                targetPlanIndex.getOneBased(), semesterToDelete.toString()));"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"                || (other instanceof DeleteSemesterCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"                \u0026\u0026 targetSemNumber \u003d\u003d (((DeleteSemesterCommand) other).targetSemNumber)); // state check"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":71}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Description Book as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":18,"ssagit":1}},{"path":"src/main/java/seedu/address/logic/commands/InfoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.storage.JsonModule;"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":" * Finds and list module information to the user."},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"public class InfoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"    public static final String COMMAND_WORD \u003d \"info\";"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List all modules information or a specified one \""},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"            + \"Parameters: NONE or \""},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"            + PREFIX_MODULE_CODE + \"MODULE CODE \" + \"\\n\""},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"            + \"Example: \" + COMMAND_WORD + \"\\n\""},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"            + PREFIX_MODULE_CODE + \"CS2030 \";"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    public static final String MESSAGE_NOT_FOUND \u003d \"No such module in the module list\";"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"    public static final String MESSAGE_FOUND \u003d \"Specified module information displayed\";"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    private String moduleCode;"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"     * Creates a infocommand to find the specified {@code moduleCode} and list its information"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param moduleCode the modulecode of the module information to be listed"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"    public InfoCommand (String moduleCode) {"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"     * Creates an infocommand to list all module infomation"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    public InfoCommand() {"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        this.moduleCode \u003d \"\";"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"        JsonModule[] informationOfModules \u003d model.getPlans().getModuleInfo();"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"        if (noArgument()) {"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"            StringBuilder str \u003d new StringBuilder();"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"            for (int i \u003d 0; i \u003c informationOfModules.length; i++) {"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"                str.append(informationOfModules[i].toString());"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"                str.append(\"\\n\\n\");"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"            return new CommandResult(str.toString() + MESSAGE_SUCCESS);"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"            return findMatchingModule(informationOfModules);"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":66,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"BenedictBCJJ"},"content":"     * Checks if infocommand has been given a module code to find"},{"lineNumber":68,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return true if modulecode specified false otherwise"},{"lineNumber":69,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"BenedictBCJJ"},"content":"    private boolean noArgument() {"},{"lineNumber":71,"author":{"gitId":"BenedictBCJJ"},"content":"        return moduleCode.equals(\"\");"},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":"     * finds the module code from the array of module information"},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param informationOfModules the array of module information to find the module fomr"},{"lineNumber":77,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return the module information if found otherwise a module not found message"},{"lineNumber":78,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"BenedictBCJJ"},"content":"    private CommandResult findMatchingModule(JsonModule[] informationOfModules) {"},{"lineNumber":80,"author":{"gitId":"BenedictBCJJ"},"content":"        for (int i \u003d 0; i \u003c informationOfModules.length; i++) {"},{"lineNumber":81,"author":{"gitId":"BenedictBCJJ"},"content":"            if (informationOfModules[i].getModuleCode().equals(this.moduleCode)) {"},{"lineNumber":82,"author":{"gitId":"BenedictBCJJ"},"content":"                return new CommandResult(informationOfModules[i].toString() + MESSAGE_FOUND);"},{"lineNumber":83,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"BenedictBCJJ"},"content":"        return new CommandResult(MESSAGE_NOT_FOUND);"},{"lineNumber":86,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"BenedictBCJJ"},"content":"}"},{"lineNumber":88,"author":{"gitId":"BenedictBCJJ"},"content":""}],"authorContributionMap":{"seaniy":1,"BenedictBCJJ":87}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PLANS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":2,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/AddPlanCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.AddPlanCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":" * Parses input arguments and creates a new AddPlanCommand object"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"public class AddPlanCommandParser implements Parser\u003cAddPlanCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPlanCommand"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"     * and returns an AddPlanCommand object for execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    public AddPlanCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TAG);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPlanCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        Description description \u003d ParserUtil.parsePlan(argMultimap.getValue(PREFIX_DESCRIPTION).get());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"        Plan plan \u003d new Plan(description, tagList);"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        return new AddPlanCommand(plan);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":12,"-":35,"ssagit":3}},{"path":"src/main/java/seedu/address/logic/parser/AddSemesterCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN_NUMBER;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEM_NUMBER;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.AddSemesterCommand;"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":" * Parses input arguments and creates a new AddSemesterCommand object"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"public class AddSemesterCommandParser implements Parser\u003cAddSemesterCommand\u003e {"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"     * Parses the given {@code String} of arguments in the context of the AddSemesterCommand"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"     * and returns an AddSemesterCommand object for execution."},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    public AddSemesterCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PLAN_NUMBER, PREFIX_SEM_NUMBER);"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN_NUMBER, PREFIX_SEM_NUMBER)"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSemesterCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"        int semNumber \u003d ParserUtil.parseSemesterNumber(argMultimap.getValue(PREFIX_SEM_NUMBER).get());"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"        Index planNumber \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_NUMBER).get());"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        Semester semester \u003d new Semester(semNumber);"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        return new AddSemesterCommand(planNumber, semester);"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":48}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.AddPlanCommand;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.AddSemesterCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.DeletePlanCommand;"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.DeleteSemesterCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.logic.commands.InfoCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        case AddPlanCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"            return new AddPlanCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"        case AddSemesterCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"            return new AddSemesterCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"        case DeletePlanCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"            return new DeletePlanCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"        case DeleteSemesterCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"            return new DeleteSemesterCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":"        case InfoCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":"            return new InfoCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":12,"-":64,"BenedictBCJJ":4}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public static final Prefix PREFIX_PLAN_NUMBER \u003d new Prefix(\"p/\");"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    public static final Prefix PREFIX_SEM_NUMBER \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":4,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/DeletePlanCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN_NUMBER;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.DeletePlanCommand;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":" * Parses input arguments and creates a new DeletePlanCommand object"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"public class DeletePlanCommandParser implements Parser\u003cDeletePlanCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePlanCommand"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"     * and returns a DeletePlanCommand object for execution."},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    public DeletePlanCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"            ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"                    ArgumentTokenizer.tokenize(args, PREFIX_PLAN_NUMBER);"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_PLAN_NUMBER)"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"                        DeletePlanCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_NUMBER).get());"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"            return new DeletePlanCommand(index);"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        } catch (ParseException pe) {"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"            throw new ParseException("},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePlanCommand.MESSAGE_USAGE), pe);"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":48}},{"path":"src/main/java/seedu/address/logic/parser/DeleteSemesterCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN_NUMBER;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SEM_NUMBER;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.DeleteSemesterCommand;"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":" * Parses input arguments and creates a new DeleteSemesterCommand object"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"public class DeleteSemesterCommandParser implements Parser\u003cDeleteSemesterCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteSemesterCommand"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"     * and returns a DeleteSemesterCommand object for execution."},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    public DeleteSemesterCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"                    ArgumentTokenizer.tokenize(args, PREFIX_PLAN_NUMBER, PREFIX_SEM_NUMBER);"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_PLAN_NUMBER, PREFIX_SEM_NUMBER)"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"                        DeleteSemesterCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN_NUMBER).get());"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"            int semNumber \u003d ParserUtil.parseSemesterNumber(argMultimap.getValue(PREFIX_SEM_NUMBER).get());"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"            return new DeleteSemesterCommand(index, semNumber);"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        } catch (ParseException pe) {"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"            throw new ParseException("},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSemesterCommand.MESSAGE_USAGE), pe);"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":50}},{"path":"src/main/java/seedu/address/logic/parser/InfoCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.logic.commands.InfoCommand;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":" * Parses input arguments and creates a new InfoCommand object"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"public class InfoCommandParser implements Parser\u003cInfoCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * Parses the given {@code String} of arguments in the context of the InfoCommand"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     * and returns an InfoCommand object for execution."},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"    public InfoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"        if (args.equals(\"\")) {"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"            return new InfoCommand();"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InfoCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"            String moduleCode \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"            return new InfoCommand(moduleCode);"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"        return Stream.of(prefixes).noneMatch(prefix -\u003e argumentMultimap.getValue(prefix).get().equals(\"\"));"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":44}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"     * Parses a {@code String description} into an {@code Description}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"     * @throws ParseException if the given {@code description} is invalid."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    public static Description parsePlan(String description) throws ParseException {"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"        requireNonNull(description);"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"     * Parses a {@code String semNumber} into an {@code Integer}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"     * @throws ParseException if the given {@code semNumber} is invalid."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"    public static int parsePlanNumber(String planNumber) throws ParseException {"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"        requireNonNull(planNumber);"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"        String trimmedPlanNumber \u003d planNumber.trim();"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        int planNum \u003d 0;"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"            planNum \u003d Integer.parseInt(trimmedPlanNumber);"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"        } catch (NumberFormatException error) {"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"            throw new ParseException(\"Invalid Plan Number\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"        return planNum;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"seaniy"},"content":"     * Parses a {@code String semNumber} into an {@code Integer}."},{"lineNumber":97,"author":{"gitId":"seaniy"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitId":"seaniy"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":"     * @throws ParseException if the given {@code semNumber} is invalid."},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"seaniy"},"content":"    public static int parseSemesterNumber(String semesterNumber) throws ParseException {"},{"lineNumber":102,"author":{"gitId":"seaniy"},"content":"        requireNonNull(semesterNumber);"},{"lineNumber":103,"author":{"gitId":"seaniy"},"content":"        String trimmedDescription \u003d semesterNumber.trim();"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":"        int semesterNum \u003d 0;"},{"lineNumber":105,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"seaniy"},"content":"            semesterNum \u003d Integer.parseInt(trimmedDescription);"},{"lineNumber":107,"author":{"gitId":"seaniy"},"content":"        } catch (NumberFormatException error) {"},{"lineNumber":108,"author":{"gitId":"seaniy"},"content":"            throw new ParseException(\"Invalid Semester Number\");"},{"lineNumber":109,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"seaniy"},"content":"        return semesterNum;"},{"lineNumber":111,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":36,"-":74,"ssagit":2}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.UniquePersonList;"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.storage.JsonModule;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"    private final JsonModule[] moduleInfo \u003d readModuleInfo();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"     * Replaces the contents of the plan list with {@code plans}."},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"     * {@code plans} must not contain duplicate plans."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"    public void setPersons(List\u003cPlan\u003e plans) {"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        this.persons.setPersons(plans);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"    //// plan-level operations"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"     * Returns true if a plan with the same identity as {@code plan} exists in the address book."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"    public boolean hasPlan(Plan plan) {"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"        requireNonNull(plan);"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"        return persons.contains(plan);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"     * Adds a plan to the address book."},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"     * The plan must not already exist in the address book."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"    public void addPlan(Plan p) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"     * Replaces the given plan {@code target} in the list with {@code editedPlan}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"     * The plan identity of {@code editedPlan} must not be the same as another existing plan in the address book."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"    public void setPlan(Plan target, Plan editedPlan) {"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"        requireNonNull(editedPlan);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"        persons.setPerson(target, editedPlan);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"    public void removePlan(Plan key) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"BenedictBCJJ"},"content":"     * reads the moduleinfo.json located in data folder and creates an array from the info"},{"lineNumber":108,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return array of module information"},{"lineNumber":109,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"BenedictBCJJ"},"content":"    private JsonModule[] readModuleInfo() {"},{"lineNumber":111,"author":{"gitId":"BenedictBCJJ"},"content":"        JsonModule[] md \u003d null;"},{"lineNumber":112,"author":{"gitId":"BenedictBCJJ"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"BenedictBCJJ"},"content":"            ObjectMapper mapper \u003d new ObjectMapper();"},{"lineNumber":114,"author":{"gitId":"BenedictBCJJ"},"content":"            Path addressBookFilePath \u003d Paths.get(\"data\", \"moduleinfo.json\");"},{"lineNumber":115,"author":{"gitId":"BenedictBCJJ"},"content":"            String json \u003d Files.readAllLines(addressBookFilePath).get(0);"},{"lineNumber":116,"author":{"gitId":"BenedictBCJJ"},"content":"            Optional\u003cJsonModule[]\u003e opt \u003d JsonUtil.readJsonFile(addressBookFilePath, JsonModule[].class);"},{"lineNumber":117,"author":{"gitId":"BenedictBCJJ"},"content":"            md \u003d opt.get();"},{"lineNumber":118,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (Exception e) {"},{"lineNumber":119,"author":{"gitId":"BenedictBCJJ"},"content":"            System.out.println(\"There is an error in reading moduleinfo.json file please check\");"},{"lineNumber":120,"author":{"gitId":"BenedictBCJJ"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":121,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"BenedictBCJJ"},"content":"        return md;"},{"lineNumber":123,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":125,"author":{"gitId":"BenedictBCJJ"},"content":"    public JsonModule[] getModuleInfo() {"},{"lineNumber":126,"author":{"gitId":"BenedictBCJJ"},"content":"        return moduleInfo;"},{"lineNumber":127,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"ssagit"},"content":"    public ObservableList\u003cPlan\u003e getPersonList() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":4,"-":99,"ssagit":17,"BenedictBCJJ":31}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    Predicate\u003cPlan\u003e PREDICATE_SHOW_ALL_PLANS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    Path getPlansFilePath();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    void setPlansFilePath(Path addressBookFilePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"    void setPlans(ReadOnlyAddressBook addressBook);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"    ReadOnlyAddressBook getPlans();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     * Returns true if a plan with the same identity as {@code plan} exists in the address book."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"    boolean hasPlan(Plan plan);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"     * Deletes the given plan."},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"     * The plan must exist in the address book."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"    void deletePlan(Plan target);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"     * Adds the given plan."},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"     * {@code plan} must not already exist in the address book."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"    void addPlan(Plan plan);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"     * Replaces the given plan {@code target} with {@code editedPlan}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"     * The plan identity of {@code editedPlan} must not be the same as another existing plan in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"    void setPlan(Plan target, Plan editedPlan);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"    /** Returns an unmodifiable view of the filtered plan list */"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"    ObservableList\u003cPlan\u003e getFilteredPlanList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"     * Updates the filter of the filtered plan list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":"    void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":89,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"     * Returns true if a plan with the same identity as {@code plan} exists in the address book."},{"lineNumber":91,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"seaniy"},"content":"    boolean hasSemester(int planNumber, Semester semester);"},{"lineNumber":93,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":94,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"     * Deletes the given plan."},{"lineNumber":96,"author":{"gitId":"seaniy"},"content":"     * The plan must exist in the address book."},{"lineNumber":97,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"seaniy"},"content":"    void deleteSemester(Plan plan, Semester target);"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"seaniy"},"content":"     * Adds the given plan."},{"lineNumber":102,"author":{"gitId":"seaniy"},"content":"     * {@code plan} must not already exist in the address book."},{"lineNumber":103,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":"    void addSemester(int planNumber, Semester semester);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":29,"-":66,"ssagit":10}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    private final FilteredList\u003cPlan\u003e filteredPlans;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"        filteredPlans \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"    public Path getPlansFilePath() {"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"        return userPrefs.getPlansFilePath();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"    public void setPlansFilePath(Path addressBookFilePath) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"        userPrefs.setPlansFilePath(addressBookFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"    public void setPlans(ReadOnlyAddressBook addressBook) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":"    public ReadOnlyAddressBook getPlans() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"seaniy"},"content":"    public boolean hasPlan(Plan plan) {"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"        requireNonNull(plan);"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"        return addressBook.hasPlan(plan);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":"    public void deletePlan(Plan target) {"},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"        addressBook.removePlan(target);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":"    public void addPlan(Plan plan) {"},{"lineNumber":105,"author":{"gitId":"seaniy"},"content":"        addressBook.addPlan(plan);"},{"lineNumber":106,"author":{"gitId":"seaniy"},"content":"        updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"seaniy"},"content":"    public void setPlan(Plan target, Plan editedPlan) {"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"        requireAllNonNull(target, editedPlan);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"seaniy"},"content":"        addressBook.setPlan(target, editedPlan);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"seaniy"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Semester \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":118,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"seaniy"},"content":"    public boolean hasSemester(int planNumber, Semester semester) {"},{"lineNumber":120,"author":{"gitId":"seaniy"},"content":"        requireAllNonNull(planNumber, semester);"},{"lineNumber":121,"author":{"gitId":"seaniy"},"content":"        Plan plan \u003d addressBook.getPersonList().get(planNumber);"},{"lineNumber":122,"author":{"gitId":"seaniy"},"content":"        return plan.getSemesters().stream().anyMatch((currentSemester) -\u003e"},{"lineNumber":123,"author":{"gitId":"seaniy"},"content":"            currentSemester.getSemNumber() \u003d\u003d semester.getSemNumber()"},{"lineNumber":124,"author":{"gitId":"seaniy"},"content":"        );"},{"lineNumber":125,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":127,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"seaniy"},"content":"    public void deleteSemester(Plan plan, Semester target) {"},{"lineNumber":129,"author":{"gitId":"seaniy"},"content":"        addressBook.setPlan(plan, plan.removeSemester(target));"},{"lineNumber":130,"author":{"gitId":"seaniy"},"content":"        updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"},{"lineNumber":131,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":133,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"seaniy"},"content":"    public void addSemester(int planNumber, Semester semester) {"},{"lineNumber":135,"author":{"gitId":"seaniy"},"content":"        Plan plan \u003d addressBook.getPersonList().get(planNumber);"},{"lineNumber":136,"author":{"gitId":"seaniy"},"content":"        addressBook.setPlan(plan, plan.addSemester(semester));"},{"lineNumber":137,"author":{"gitId":"seaniy"},"content":"        updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"ssagit"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Plan List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"ssagit"},"content":"     * Returns an unmodifiable view of the list of {@code Plan} backed by the internal list of"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitId":"seaniy"},"content":"    public ObservableList\u003cPlan\u003e getFilteredPlanList() {"},{"lineNumber":148,"author":{"gitId":"ssagit"},"content":"        return filteredPlans;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"seaniy"},"content":"    public void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":154,"author":{"gitId":"ssagit"},"content":"        filteredPlans.setPredicate(predicate);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":173,"author":{"gitId":"ssagit"},"content":"                \u0026\u0026 filteredPlans.equals(other.filteredPlans);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":41,"-":125,"ssagit":10}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import seedu.address.storage.JsonModule;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    ObservableList\u003cPlan\u003e getPersonList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     * Returns　an array of module information from moduleinfo.json"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"    JsonModule[] getModuleInfo();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":15,"ssagit":2,"BenedictBCJJ":5}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    Path getPlansFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":1,"-":15}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    private Path plansFilePath \u003d Paths.get(\"data\" , \"plans.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"        setPlansFilePath(newUserPrefs.getPlansFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"    public Path getPlansFilePath() {"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"        return plansFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"    public void setPlansFilePath(Path plansFilePath) {"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"        requireNonNull(plansFilePath);"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"        this.plansFilePath \u003d plansFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"                \u0026\u0026 plansFilePath.equals(o.plansFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"        return Objects.hash(guiSettings, plansFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"        sb.append(\"\\nLocal data file location : \" + plansFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":10,"-":77}},{"path":"src/main/java/seedu/address/model/plan/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.plan;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":" * Represents a Plan\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"     * Constructs an {@code Description}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"     * @param description A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    public Description(String description) {"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        requireNonNull(description);"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"        value \u003d description;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"                \u0026\u0026 value.equals(((Description) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":7,"-":44,"ssagit":6}},{"path":"src/main/java/seedu/address/model/plan/Module.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Yihe-Harry"},"content":"package seedu.address.model.plan;"},{"lineNumber":2,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":3,"author":{"gitId":"Yihe-Harry"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Yihe-Harry"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.exceptions.ModuleExceptions;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"Yihe-Harry"},"content":"public class Module {"},{"lineNumber":9,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":10,"author":{"gitId":"Yihe-Harry"},"content":"    private String moduleTitle;"},{"lineNumber":11,"author":{"gitId":"Yihe-Harry"},"content":"    private String moduleCode;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    private int moduleCredits;"},{"lineNumber":13,"author":{"gitId":"Yihe-Harry"},"content":"    private String descriptions;"},{"lineNumber":14,"author":{"gitId":"Yihe-Harry"},"content":"    private boolean isDone;"},{"lineNumber":15,"author":{"gitId":"Yihe-Harry"},"content":"    private String grade;"},{"lineNumber":16,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":17,"author":{"gitId":"Yihe-Harry"},"content":"    private List\u003cModule\u003e prerequisites \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"Yihe-Harry"},"content":"    private List\u003cModule\u003e preclusions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"     * Constructor for creating a module."},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     * @param moduleTitle Title of module."},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"     * @param moduleCode Code of module."},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     * @param moduleCredits Number of module credits module offers."},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    public Module (String moduleTitle, String moduleCode, int moduleCredits) {"},{"lineNumber":27,"author":{"gitId":"Yihe-Harry"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":28,"author":{"gitId":"Yihe-Harry"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        this.moduleCredits \u003d moduleCredits;"},{"lineNumber":30,"author":{"gitId":"Yihe-Harry"},"content":"        this.isDone \u003d false;"},{"lineNumber":31,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":33,"author":{"gitId":"Yihe-Harry"},"content":"    public String getModuleTitle() {"},{"lineNumber":34,"author":{"gitId":"Yihe-Harry"},"content":"        return moduleTitle;"},{"lineNumber":35,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":37,"author":{"gitId":"Yihe-Harry"},"content":"    public String getModuleCode() {"},{"lineNumber":38,"author":{"gitId":"Yihe-Harry"},"content":"        return moduleCode;"},{"lineNumber":39,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":41,"author":{"gitId":"Yihe-Harry"},"content":"    public int getMCs() {"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        return moduleCredits;"},{"lineNumber":43,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":45,"author":{"gitId":"Yihe-Harry"},"content":"    public String getDescriptions() {"},{"lineNumber":46,"author":{"gitId":"Yihe-Harry"},"content":"        return descriptions;"},{"lineNumber":47,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":49,"author":{"gitId":"Yihe-Harry"},"content":"    public String getGrade() {"},{"lineNumber":50,"author":{"gitId":"Yihe-Harry"},"content":"        return grade;"},{"lineNumber":51,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"     * Custom method to compare modules."},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"     * @param otherModule The module to compare to."},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"     * @return True if modules are the same."},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Yihe-Harry"},"content":"    public boolean isSameModule(Module otherModule) {"},{"lineNumber":59,"author":{"gitId":"Yihe-Harry"},"content":"        if (this \u003d\u003d otherModule) {"},{"lineNumber":60,"author":{"gitId":"Yihe-Harry"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Yihe-Harry"},"content":"        return otherModule !\u003d null"},{"lineNumber":63,"author":{"gitId":"Yihe-Harry"},"content":"                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"},{"lineNumber":64,"author":{"gitId":"Yihe-Harry"},"content":"                \u0026\u0026 otherModule.getModuleTitle().equals(getModuleTitle());"},{"lineNumber":65,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":67,"author":{"gitId":"Yihe-Harry"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"Yihe-Harry"},"content":"    public boolean equals (Object other) {"},{"lineNumber":69,"author":{"gitId":"Yihe-Harry"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"Yihe-Harry"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":73,"author":{"gitId":"Yihe-Harry"},"content":"        if (!(other instanceof Module)) {"},{"lineNumber":74,"author":{"gitId":"Yihe-Harry"},"content":"            return false;"},{"lineNumber":75,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":77,"author":{"gitId":"Yihe-Harry"},"content":"        Module otherModule \u003d (Module) other;"},{"lineNumber":78,"author":{"gitId":"Yihe-Harry"},"content":"        return otherModule.getModuleTitle().equals(getModuleTitle())"},{"lineNumber":79,"author":{"gitId":"Yihe-Harry"},"content":"                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"},{"lineNumber":80,"author":{"gitId":"Yihe-Harry"},"content":"                \u0026\u0026 otherModule.getMCs() \u003d\u003d getMCs()"},{"lineNumber":81,"author":{"gitId":"Yihe-Harry"},"content":"                \u0026\u0026 otherModule.getDescriptions().equals(getDescriptions());"},{"lineNumber":82,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":84,"author":{"gitId":"Yihe-Harry"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Yihe-Harry"},"content":"     * mark module as done and give it a grade"},{"lineNumber":86,"author":{"gitId":"Yihe-Harry"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Yihe-Harry"},"content":"    public void doneModule (String grade) throws ModuleExceptions {"},{"lineNumber":88,"author":{"gitId":"Yihe-Harry"},"content":"        if (isDone) {"},{"lineNumber":89,"author":{"gitId":"Yihe-Harry"},"content":"            throw new ModuleExceptions(\"Module is already mark as done\");"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"        } else if (grade.length() \u003e\u003d 2 || !Character.isUpperCase(grade.charAt(0))) {"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"            //grade length entered is longer than 2 or first letter is not upper case"},{"lineNumber":92,"author":{"gitId":"Yihe-Harry"},"content":"            throw new ModuleExceptions(\"Invalid grade, please try again\");"},{"lineNumber":93,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"Yihe-Harry"},"content":"        this.grade \u003d grade;"},{"lineNumber":95,"author":{"gitId":"Yihe-Harry"},"content":"        this.isDone \u003d true;"},{"lineNumber":96,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":98,"author":{"gitId":"Yihe-Harry"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"Yihe-Harry"},"content":"     * convert letter grade to CAP grade"},{"lineNumber":100,"author":{"gitId":"Yihe-Harry"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Yihe-Harry"},"content":"    public double convertGradeToCap() {"},{"lineNumber":102,"author":{"gitId":"Yihe-Harry"},"content":"        String g \u003d this.getGrade();"},{"lineNumber":103,"author":{"gitId":"Yihe-Harry"},"content":"        double numGrade;"},{"lineNumber":104,"author":{"gitId":"Yihe-Harry"},"content":"        switch (g) {"},{"lineNumber":105,"author":{"gitId":"Yihe-Harry"},"content":"        case \"A+\":"},{"lineNumber":106,"author":{"gitId":"Yihe-Harry"},"content":"        case \"A\":"},{"lineNumber":107,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 5;"},{"lineNumber":108,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":109,"author":{"gitId":"Yihe-Harry"},"content":"        case \"A-\":"},{"lineNumber":110,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 4.5;"},{"lineNumber":111,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":112,"author":{"gitId":"Yihe-Harry"},"content":"        case \"B+\":"},{"lineNumber":113,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 4;"},{"lineNumber":114,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":115,"author":{"gitId":"Yihe-Harry"},"content":"        case \"B\":"},{"lineNumber":116,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 3.5;"},{"lineNumber":117,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":118,"author":{"gitId":"Yihe-Harry"},"content":"        case \"B-\":"},{"lineNumber":119,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 3;"},{"lineNumber":120,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":121,"author":{"gitId":"Yihe-Harry"},"content":"        case \"C+\":"},{"lineNumber":122,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 2.5;"},{"lineNumber":123,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":124,"author":{"gitId":"Yihe-Harry"},"content":"        case \"C\":"},{"lineNumber":125,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 2;"},{"lineNumber":126,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":127,"author":{"gitId":"Yihe-Harry"},"content":"        case \"C-\":"},{"lineNumber":128,"author":{"gitId":"Yihe-Harry"},"content":"            numGrade \u003d 1.5;"},{"lineNumber":129,"author":{"gitId":"Yihe-Harry"},"content":"            break;"},{"lineNumber":130,"author":{"gitId":"Yihe-Harry"},"content":"        default: numGrade \u003d 0;"},{"lineNumber":131,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Yihe-Harry"},"content":"        return numGrade;"},{"lineNumber":133,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":135,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"ssagit"},"content":"     * Add pre-reqs to module."},{"lineNumber":137,"author":{"gitId":"ssagit"},"content":"     * @param prereq a prerequisite module."},{"lineNumber":138,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"Yihe-Harry"},"content":"    public void addPrerequisites(Module... prereq) {"},{"lineNumber":140,"author":{"gitId":"Yihe-Harry"},"content":"        for (Module m : prereq) {"},{"lineNumber":141,"author":{"gitId":"Yihe-Harry"},"content":"            prerequisites.add(m);"},{"lineNumber":142,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":145,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"ssagit"},"content":"     * Add preclusions to module."},{"lineNumber":147,"author":{"gitId":"ssagit"},"content":"     * @param preclu a preclusion to the module."},{"lineNumber":148,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"Yihe-Harry"},"content":"    public void addPreclusions (Module ... preclu) {"},{"lineNumber":150,"author":{"gitId":"Yihe-Harry"},"content":"        for (Module m : preclu) {"},{"lineNumber":151,"author":{"gitId":"Yihe-Harry"},"content":"            preclusions.add(m);"},{"lineNumber":152,"author":{"gitId":"Yihe-Harry"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":155,"author":{"gitId":"Yihe-Harry"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"Yihe-Harry"},"content":"    public String toString() {"},{"lineNumber":157,"author":{"gitId":"Yihe-Harry"},"content":"        return getModuleCode() + \" \" + getModuleTitle();"},{"lineNumber":158,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Yihe-Harry"},"content":"}"}],"authorContributionMap":{"Yihe-Harry":132,"ssagit":27}},{"path":"src/main/java/seedu/address/model/plan/Plan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.plan;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":" * Represents a Plan in the description book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"public class Plan {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    private List\u003cSemester\u003e semesters;"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    private final Description description;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     * Semesters MUST have at least 1 semester within it"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    public Plan(Description description, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        requireAllNonNull(description, tags);"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"        this.semesters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     * Every field must be present and not null."},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     * Semesters MUST have at least 1 semester within it"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"    public Plan(Description description, Set\u003cTag\u003e tags, List\u003cSemester\u003e semesters) {"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"        requireAllNonNull(description, tags, semesters);"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        this.semesters \u003d semesters;"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        this.description \u003d description;"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        this.tags.addAll(tags);"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"     * Adds a semester to the Plan."},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"    public Plan addSemester(Semester semester) {"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        semesters.add(semester);"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"     * Deletes a semester from the Plan."},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"    public Plan removeSemester(Semester semester) {"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"        for (int i \u003d 0; i \u003c semesters.size(); i++) {"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"            if (semesters.get(i).getSemNumber() \u003d\u003d semester.getSemNumber()) {"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"                semesters.remove(i);"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"                break;"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"     * Returns List of Semesters."},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"     * @return List of Semesters"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"    public List\u003cSemester\u003e getSemesters() {"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"        return semesters;"},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"     * Returns Semester matching semester number provided."},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"     * @return Semester"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"    public Semester getSemester(int semNumber) {"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"        for (Semester semester : semesters) {"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"            if (semester.getSemNumber() \u003d\u003d semNumber) {"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"                return semester;"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"        return null;"},{"lineNumber":86,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"seaniy"},"content":"     * Check whether Semester exists."},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"     * @return if Semester exists, true, else false"},{"lineNumber":91,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"seaniy"},"content":"    public boolean hasSemester(int semNumber) {"},{"lineNumber":93,"author":{"gitId":"seaniy"},"content":"        return semesters.stream().anyMatch(semester -\u003e"},{"lineNumber":94,"author":{"gitId":"seaniy"},"content":"            semester.getSemNumber() \u003d\u003d semNumber"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"        );"},{"lineNumber":96,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":98,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":"     * Returns Description of Plan."},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"    public Description getDescription() {"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"        return description;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":"        if (!(other instanceof Plan)) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"ssagit"},"content":"        Plan otherPlan \u003d (Plan) other;"},{"lineNumber":128,"author":{"gitId":"ssagit"},"content":"        return otherPlan.getDescription().equals(getDescription())"},{"lineNumber":129,"author":{"gitId":"ssagit"},"content":"                \u0026\u0026 otherPlan.getTags().equals(getTags());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":135,"author":{"gitId":"ssagit"},"content":"        return Objects.hash(description, tags);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":141,"author":{"gitId":"ssagit"},"content":"        builder.append(\"; Description: \")"},{"lineNumber":142,"author":{"gitId":"ssagit"},"content":"                .append(getDescription());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":57,"-":65,"douglaswja":3,"ssagit":27}},{"path":"src/main/java/seedu/address/model/plan/Semester.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.plan;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"public class Semester {"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"     * TODO:"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"     * 1. Implement SemesterParser"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"     * 2. Consider including isDone instance member to mark if the Semester has been completed"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    private final String semesterDescription \u003d \"Semester: %1$s; Total MCs: %2$s\";"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    private final int semNumber;"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    private final List\u003cModule\u003e modules;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"     * Constructor of Semester object."},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"     * @param semNumber Number of Semester."},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    public Semester(int semNumber) {"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"        this.semNumber \u003d semNumber;"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        modules \u003d new ArrayList\u003c\u003e(10);"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    public int getSemNumber() {"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        return semNumber;"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    public List\u003cModule\u003e getModules() {"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"        return modules;"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"    public int getTotalMCs() {"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"        int totalMCs \u003d 0;"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"        for (Module mod : modules) {"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"            totalMCs +\u003d mod.getMCs();"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"        return totalMCs;"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"     * Returns true if both Semesters contain the same modules."},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"        if (!(other instanceof Semester)) {"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"            return false;"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"        Semester otherSemester \u003d (Semester) other;"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"        HashSet\u003cModule\u003e thisModuleSet \u003d new HashSet\u003c\u003e(getModules());"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"        HashSet\u003cModule\u003e otherModuleSet \u003d new HashSet\u003c\u003e(otherSemester.getModules());"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"        return thisModuleSet.equals(otherModuleSet);"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"        return Objects.hash(getModules());"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"        String formattedSemesterDescription \u003d String.format(semesterDescription, getSemNumber(), getTotalMCs(), \"\\n\");"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"        stringBuilder.append(formattedSemesterDescription);"},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"        for (Module mod : modules) {"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"            stringBuilder.append(mod.toString());"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"        return stringBuilder.toString();"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"seaniy":2,"douglaswja":65,"ssagit":9}},{"path":"src/main/java/seedu/address/model/plan/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.plan;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":" * A plan is considered unique by comparing using {@code Plan#isSamePerson(Plan)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":" * persons uses Plan#isSamePerson(Plan) for equality so as to ensure that the plan being added or updated is"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a plan uses Plan#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":" * as to ensure that the plan with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":" *"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":" *"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":" * @see Plan#equals(Plan)"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"public class UniquePersonList implements Iterable\u003cPlan\u003e {"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    private final ObservableList\u003cPlan\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    private final ObservableList\u003cPlan\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"     * Returns true if the list contains an equivalent plan as the given argument."},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    public boolean contains(Plan toCheck) {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"        return internalList.stream().anyMatch(toCheck::equals);"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"     * Adds a plan to the list."},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"     * The plan must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"    public void add(Plan toAdd) {"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"     * Replaces the plan {@code target} in the list with {@code editedPlan}."},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"     * The plan identity of {@code editedPlan} must not be the same as another existing plan in the list."},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"    public void setPerson(Plan target, Plan editedPlan) {"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"        requireAllNonNull(target, editedPlan);"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"        if (!target.equals(editedPlan) \u0026\u0026 contains(editedPlan)) {"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"        internalList.set(index, editedPlan);"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"     * Removes the equivalent plan from the list."},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"     * The plan must exist in the list."},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"    public void remove(Plan toRemove) {"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"     * Replaces the contents of this list with {@code plans}."},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"     * {@code plans} must not contain duplicate plans."},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"    public void setPersons(List\u003cPlan\u003e plans) {"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"        requireAllNonNull(plans);"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"        if (!personsAreUnique(plans)) {"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"        internalList.setAll(plans);"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"    public ObservableList\u003cPlan\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":"    public Iterator\u003cPlan\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"ssagit"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"ssagit"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"ssagit"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":119,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"ssagit"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"ssagit"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":124,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"ssagit"},"content":"     * Returns true if {@code plans} contains only unique plans."},{"lineNumber":126,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"ssagit"},"content":"    private boolean personsAreUnique(List\u003cPlan\u003e plans) {"},{"lineNumber":128,"author":{"gitId":"ssagit"},"content":"        for (int i \u003d 0; i \u003c plans.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"ssagit"},"content":"            for (int j \u003d i + 1; j \u003c plans.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"ssagit"},"content":"                if (plans.get(i).equals(plans.get(j))) {"},{"lineNumber":131,"author":{"gitId":"ssagit"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"ssagit"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":137}},{"path":"src/main/java/seedu/address/model/plan/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.plan.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":10,"ssagit":1}},{"path":"src/main/java/seedu/address/model/plan/exceptions/ModuleExceptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Yihe-Harry"},"content":"package seedu.address.model.plan.exceptions;"},{"lineNumber":2,"author":{"gitId":"Yihe-Harry"},"content":""},{"lineNumber":3,"author":{"gitId":"Yihe-Harry"},"content":"public class ModuleExceptions extends Exception {"},{"lineNumber":4,"author":{"gitId":"Yihe-Harry"},"content":"    public ModuleExceptions(String message) {"},{"lineNumber":5,"author":{"gitId":"Yihe-Harry"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"Yihe-Harry"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Yihe-Harry"},"content":"}"}],"authorContributionMap":{"Yihe-Harry":7}},{"path":"src/main/java/seedu/address/model/plan/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.plan.exceptions;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":" * Signals that the operation is unable to find the specified plan."},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"public class PersonNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"ssagit":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    public static Plan[] getSamplePersons() {"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"        return new Plan[] {"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"            new Plan(new Description(\"Initial Plan\"),"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"                getTagSet(\"sample\")),"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"        for (Plan samplePlan : getSamplePersons()) {"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"            sampleAb.addPlan(samplePlan);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":3,"-":33,"ssagit":5}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    Path getPlansFilePath();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readPlans() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"     * @see #getPlansFilePath()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readPlans(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"    void savePlans(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"     * @see #savePlans(ReadOnlyAddressBook)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"    void savePlans(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":7,"-":38}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPlan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":" * Jackson-friendly version of {@link Plan}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"class JsonAdaptedPlan {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Plan\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    private final String description;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    private final List\u003cJsonAdaptedSemester\u003e semesters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given plan details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    public JsonAdaptedPlan(@JsonProperty(\"description\") String address,"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"                           @JsonProperty(\"semesters\") List\u003cJsonAdaptedSemester\u003e semesters) {"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        this.description \u003d address;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        if (semesters !\u003d null) {"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"            this.semesters.addAll(semesters);"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"     * Converts a given {@code Plan} into this class for Json use."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"    public JsonAdaptedPlan(Plan source) {"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        description \u003d source.getDescription().value;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"        semesters.addAll(source.getSemesters().stream()"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"                .map(JsonAdaptedSemester::new)"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"     * Converts this Jackson-friendly adapted plan object into the model\u0027s {@code Plan} object."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted plan."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"    public Plan toModelType() throws IllegalValueException {"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"        final List\u003cTag\u003e planTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"            planTags.add(tag.toModelType());"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"        final List\u003cSemester\u003e planSemesters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"        for (JsonAdaptedSemester sem : semesters) {"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"            planSemesters.add(sem.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"                        Description.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"        if (!Description.isValidDescription(description)) {"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"        final Description modelDescription \u003d new Description(description);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(planTags);"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"        return new Plan(modelDescription, modelTags, planSemesters);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":29,"-":46,"ssagit":11}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedSemester.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Semester;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":" * Jackson-friendly version of {@link Semester}."},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"class JsonAdaptedSemester {"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    private final int semNumber;"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"     * Constructs a {@code JsonAdaptedSemester} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    public JsonAdaptedSemester(@JsonProperty(\"semNumber\") int semNumber) {"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"        this.semNumber \u003d semNumber;"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"     * Converts a given {@code Semester} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    public JsonAdaptedSemester(Semester source) {"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        semNumber \u003d source.getSemNumber();"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"    public Semester toModelType() throws IllegalValueException {"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        //        if (!Semester.isValidSemester(semNumber)) {"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"        //            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        //        }"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"        return new Semester(semNumber);"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":43}},{"path":"src/main/java/seedu/address/storage/JsonModule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":" * A class to access Module Information as a json file on the hard disk."},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"public class JsonModule {"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"    private String moduleCode;"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    private String moduleTitle;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    private String numMc;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    private String availSems;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"    private String[] prereqs;"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"    private String[] preclusions;"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     * Properly formats the elements for user viewing"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return module information in a readable format"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"        return moduleCode + \", \" + moduleTitle + \", \" + numMc + \" mc\""},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"                + \"\\navailable sem: \" + availSems + \u0027\\n\u0027"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"                + \"prereqs: \" + Arrays.toString(prereqs)"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"                + \"\\npreclusions: \" + Arrays.toString(preclusions);"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getModuleCode() {"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        return moduleCode;"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setModuleCode(String moduleCode) {"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getModuleTitle() {"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        return moduleTitle;"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setModuleTitle(String moduleTitle) {"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getNumMc() {"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"        return numMc;"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setNumMc(String numMc) {"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"        this.numMc \u003d numMc;"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getAvailSems() {"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"        return availSems;"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setAvailSems(String availSems) {"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"        this.availSems \u003d availSems;"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"    public String[] getPrereqs() {"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"        return prereqs;"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setPrereqs(String[] prereqs) {"},{"lineNumber":66,"author":{"gitId":"BenedictBCJJ"},"content":"        this.prereqs \u003d prereqs;"},{"lineNumber":67,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":69,"author":{"gitId":"BenedictBCJJ"},"content":"    public String[] getPreclusions() {"},{"lineNumber":70,"author":{"gitId":"BenedictBCJJ"},"content":"        return preclusions;"},{"lineNumber":71,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setPreclusions(String[] preclusions) {"},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":"        this.preclusions \u003d preclusions;"},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":76}},{"path":"src/main/java/seedu/address/storage/JsonPlansStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"public class JsonPlansStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonPlansStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    public JsonPlansStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"    public Path getPlansFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readPlans() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        return readPlans(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"     * Similar to {@link #readPlans()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readPlans(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        Optional\u003cJsonSerializablePlans\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"                filePath, JsonSerializablePlans.class);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"    public void savePlans(ReadOnlyAddressBook plans) throws IOException {"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"        savePlans(plans, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"     * Similar to {@link #savePlans(ReadOnlyAddressBook)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"    public void savePlans(ReadOnlyAddressBook plans, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"        requireNonNull(plans);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"        JsonUtil.saveJsonFile(new JsonSerializablePlans(plans), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":16,"-":64}},{"path":"src/main/java/seedu/address/storage/JsonSerializablePlans.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"@JsonRootName(value \u003d \"plans\")"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"class JsonSerializablePlans {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate plan(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    private final List\u003cJsonAdaptedPlan\u003e plans \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"    public JsonSerializablePlans(@JsonProperty(\"plans\") List\u003cJsonAdaptedPlan\u003e plans) {"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        this.plans.addAll(plans);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"    public JsonSerializablePlans(ReadOnlyAddressBook source) {"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"        plans.addAll(source.getPersonList().stream().map(JsonAdaptedPlan::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        for (JsonAdaptedPlan jsonAdaptedPlan : plans) {"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"            Plan plan \u003d jsonAdaptedPlan.toModelType();"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"            if (addressBook.hasPlan(plan)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"            addressBook.addPlan(plan);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":11,"-":47,"ssagit":2}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    Path getPlansFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readPlans() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"    void savePlans(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":3,"-":29}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"    public Path getPlansFilePath() {"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"        return addressBookStorage.getPlansFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readPlans() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        return readPlans(addressBookStorage.getPlansFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readPlans(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"        return addressBookStorage.readPlans(filePath);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"    public void savePlans(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"        savePlans(addressBook, addressBookStorage.getPlansFilePath());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"    public void savePlans(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"        addressBookStorage.savePlans(addressBook, filePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":10,"-":69}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":" * An UI component that displays information of a {@code Plan}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    public final Plan plan;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    private Label description;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     * Creates a {@code PersonCode} with the given {@code Plan} and index to display."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"    public PersonCard(Plan plan, int displayedIndex) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        this.plan \u003d plan;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"        description.setText(plan.getDescription().value);"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"        plan.getTags().stream()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"                \u0026\u0026 plan.equals(card.plan);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":58,"ssagit":10}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    private ListView\u003cPlan\u003e personListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    public PersonListPanel(ObservableList\u003cPlan\u003e planList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"        personListView.setItems(planList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Plan} using a {@code PersonCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    class PersonListViewCell extends ListCell\u003cPlan\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"        protected void updateItem(Plan plan, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"            super.updateItem(plan, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"            if (empty || plan \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"                setGraphic(new PersonCard(plan, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":39,"ssagit":10}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"1000\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"                   minHeight\u003d\"300\" prefHeight\u003d\"300\" maxHeight\u003d\"300\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"        \u003cVBox fx:id\u003d\"planList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"-":57,"ssagit":1,"BenedictBCJJ":2}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"-":32,"ssagit":1}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.testutil.TypicalPlans.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"        expectedModel.setPlans(new AddressBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":2,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    public static final String VALID_PLAN_DESCRIPTION \u003d \" \" + PREFIX_DESCRIPTION + \"Software Engineering Route\";"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    public static final String VALID_PLAN_TAG \u003d \"fun\";"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    public static final String VALID_TAG_PLAN \u003d \" \" + PREFIX_TAG + VALID_PLAN_TAG;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"     * - the address book, filtered plan list and selected plan in {@code actualModel} remain unchanged"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getPlans());"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"        List\u003cPlan\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPlanList());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"        assertEquals(expectedAddressBook, actualModel.getPlans());"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPlanList());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":8,"-":59,"ssagit":2}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import static seedu.address.testutil.TypicalPlans.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        expectedModel \u003d new ModelManager(model.getPlans(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":2,"-":29}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePlan((String) null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePlan(INVALID_ADDRESS));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"        Description expectedDescription \u003d new Description(VALID_ADDRESS);"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"        assertEquals(expectedDescription, ParserUtil.parsePlan(VALID_ADDRESS));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"        Description expectedDescription \u003d new Description(VALID_ADDRESS);"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"        assertEquals(expectedDescription, ParserUtil.parsePlan(addressWithWhitespace));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":4,"-":111,"ssagit":3}},{"path":"src/test/java/seedu/address/model/DescriptionBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"/*"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"*/"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"// import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"//import java.util.Collection;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"// import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"//import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"//import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"//import seedu.address.model.plan.Plan;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"// import seedu.address.model.plan.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"// import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"public class DescriptionBookTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"        // Two plans with the same identity fields"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        Plan editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"        List\u003cPlan\u003e newPlans \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPlans);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPlan(null));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"        assertFalse(addressBook.hasPlan(ALICE));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"        addressBook.addPlan(ALICE);"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"        assertTrue(addressBook.hasPlan(ALICE));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"        addressBook.addPlan(ALICE);"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"        Plan editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"        assertTrue(addressBook.hasPlan(editedAlice));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"    */"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"BenedictBCJJ"},"content":"    /*"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"     * A stub ReadOnlyAddressBook whose plans list can violate interface constraints."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"BenedictBCJJ"},"content":"    /*"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"        private final ObservableList\u003cPlan\u003e plans \u003d FXCollections.observableArrayList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"        AddressBookStub(Collection\u003cPlan\u003e plans) {"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"            this.plans.setAll(plans);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"        public ObservableList\u003cPlan\u003e getPersonList() {"},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"            return plans;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"BenedictBCJJ"},"content":"        @Override"},{"lineNumber":111,"author":{"gitId":"BenedictBCJJ"},"content":"        public get"},{"lineNumber":112,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"BenedictBCJJ"},"content":"    */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":6,"-":76,"ssagit":22,"BenedictBCJJ":10}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PLANS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"import static seedu.address.testutil.TypicalPlans.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getPlans()));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        userPrefs.setPlansFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"        userPrefs.setPlansFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPlansFilePath(null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"        modelManager.setPlansFilePath(path);"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"        assertEquals(path, modelManager.getPlansFilePath());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPlan(null));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"        assertFalse(modelManager.hasPlan(ALICE));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"        modelManager.addPlan(ALICE);"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"        assertTrue(modelManager.hasPlan(ALICE));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPlanList().remove(0));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":117,"author":{"gitId":"seaniy"},"content":"        modelManager.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":121,"author":{"gitId":"seaniy"},"content":"        differentUserPrefs.setPlansFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":16,"-":108}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPlansFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":1,"-":20}},{"path":"src/test/java/seedu/address/model/person/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"public class DescriptionTest {"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidAddress));"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    public void isValidAddress() {"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"        // null address"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        // invalid addresses"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        // valid addresses"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"        assertTrue(Description.isValidDescription(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        assertTrue(Description.isValidDescription(\"-\")); // one character"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        assertTrue(Description.isValidDescription(\"Leng Inc; 1234 Market St; \""},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"                + \"San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"seaniy":6,"ssagit":33}},{"path":"src/test/java/seedu/address/model/person/PlanTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"//import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"import seedu.address.testutil.PlanBuilder;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"public class PlanTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"        Plan plan \u003d new PlanBuilder().build();"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e plan.getTags().remove(0));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        Plan aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        // different plan -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"        Plan editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":2,"-":45,"ssagit":12}},{"path":"src/test/java/seedu/address/storage/JsonDescriptionBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"// import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"/*"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"public class JsonDescriptionBookStorageTest {"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonDescriptionBookStorageTest\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        return new JsonPlansStorage(Paths.get(filePath)).readPlans(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"        JsonPlansStorage jsonPlansStorage \u003d new JsonPlansStorage(filePath);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"        jsonPlansStorage.savePlans(original, filePath);"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"        ReadOnlyAddressBook readBack \u003d jsonPlansStorage.readPlans(filePath).get();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"        original.addPlan(HOON);"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"        original.removePlan(ALICE);"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"        jsonPlansStorage.savePlans(original, filePath);"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"        readBack \u003d jsonPlansStorage.readPlans(filePath).get();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":"        original.addPlan(IDA);"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":"        jsonPlansStorage.savePlans(original); // file path not specified"},{"lineNumber":89,"author":{"gitId":"seaniy"},"content":"        readBack \u003d jsonPlansStorage.readPlans().get(); // file path not specified"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":"            new JsonPlansStorage(Paths.get(filePath))"},{"lineNumber":105,"author":{"gitId":"seaniy"},"content":"                    .savePlans(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":13,"-":92,"ssagit":14}},{"path":"src/test/java/seedu/address/storage/JsonSerializableDescriptionBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"/*"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"public class JsonSerializableDescriptionBookTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"            \"JsonSerializableDescriptionBookTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    /*"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        JsonSerializablePlans dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"                JsonSerializablePlans.class).get();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"        JsonSerializablePlans dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"                JsonSerializablePlans.class).get();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"        JsonSerializablePlans dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"                JsonSerializablePlans.class).get();"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePlans.MESSAGE_DUPLICATE_PERSON,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":7,"-":38,"ssagit":10}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        JsonPlansStorage addressBookStorage \u003d new JsonPlansStorage(getTempFilePath(\"ab\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":36,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":37,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":38,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":39,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        assertNotNull(storageManager.getPlansFilePath());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":2,"-":51}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     * Adds a new {@code Plan} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    public AddressBookBuilder withPerson(Plan plan) {"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"        addressBook.addPlan(plan);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":1,"-":30,"ssagit":3}},{"path":"src/test/java/seedu/address/testutil/PlanBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Description;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":" * A utility class to help with building Plan objects."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"public class PlanBuilder {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Networking\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    private Description description;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    public PlanBuilder() {"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"     * Initializes the PersonBuilder with the data of {@code planToCopy}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"    public PlanBuilder(Plan planToCopy) {"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        description \u003d planToCopy.getDescription();"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        tags \u003d new HashSet\u003c\u003e(planToCopy.getTags());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Plan} that we are building."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"    public PlanBuilder withTags(String ... tags) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"     * Sets the {@code Description} of the {@code Plan} that we are building."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"    public PlanBuilder withDescription(String description) {"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"    public Plan build() {"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"        return new Plan(description, tags);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":8,"-":37,"ssagit":11}},{"path":"src/test/java/seedu/address/testutil/PlanUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import seedu.address.logic.commands.AddPlanCommand;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":" * A utility class for Plan."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"public class PlanUtil {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * Returns an add command string for adding the {@code plan}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    public static String getAddCommand(Plan plan) {"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"        return AddPlanCommand.COMMAND_WORD + \" \" + getPersonDetails(plan);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     * Returns the part of command string for the given {@code plan}\u0027s details."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    public static String getPersonDetails(Plan plan) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"        sb.append(PREFIX_ADDRESS + plan.getDescription().value + \" \");"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"        plan.getTags().stream().forEach("},{"lineNumber":28,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":3,"-":21,"ssagit":8}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     * Returns the middle index of the plan in the {@code model}\u0027s plan list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        return Index.fromOneBased(model.getFilteredPlanList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"     * Returns the last index of the plan in the {@code model}\u0027s plan list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"        return Index.fromOneBased(model.getFilteredPlanList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     * Returns the plan in the {@code model}\u0027s plan list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"    public static Plan getPerson(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"        return model.getFilteredPlanList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":3,"-":47,"ssagit":5}},{"path":"src/test/java/seedu/address/testutil/TypicalPlans.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"import seedu.address.model.plan.Plan;"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":" * A utility class containing a list of {@code Plan} objects to be used in tests."},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"public class TypicalPlans {"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    public static final Plan ALICE \u003d new PlanBuilder()"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"            .withDescription(\"software engineering\")"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"            .withTags(\"fun\").build();"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    private TypicalPlans() {} // prevents instantiation"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"        for (Plan plan : getTypicalPersons()) {"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"            ab.addPlan(plan);"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"        return ab;"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    public static List\u003cPlan\u003e getTypicalPersons() {"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE));"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":38}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"\u003c?import seedu.description.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"}],"authorContributionMap":{"-":3,"ssagit":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"\u003cfx:root type\u003d\"seedu.description.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"-":5,"ssagit":1}}]
