[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vivegank"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W12-1/tp/actions)","lastModifiedDate":"2021-03-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"vivegank"},"content":"* This is **an app to help insurance agents specializing in medical insurance to keep track of their clients\u0027 information**.\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":6,"author":{"gitId":"vivegank"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-03-02"}],"authorContributionMap":{"vivegank":3,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    //PERTAINING TO GOOGLE DRIVE SAVING","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"    compile \u0027com.google.api-client:google-api-client:1.23.0\u0027","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    compile \u0027com.google.apis:google-api-services-drive:v3-rev110-1.23.0\u0027","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"nicholasnge":5,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"### Glendon Chua","lastModifiedDate":"2021-03-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"BigDoot"},"content":"\u003cimg src\u003d\"images/bigdoot.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"[[github](https://github.com/BigDoot)]","lastModifiedDate":"2021-03-02"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"[[portfolio](team/BigDoot.md)]","lastModifiedDate":"2021-03-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: Testing, Code quality","lastModifiedDate":"2021-03-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"### Nicholas Nge","lastModifiedDate":"2021-03-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"\u003cimg src\u003d\"images/nicholasnge.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"[[github](http://github.com/nicholasnge)]","lastModifiedDate":"2021-03-02"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"[[portfolio](team/nicholasnge.md)]","lastModifiedDate":"2021-03-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: UI, Deliverables and deadlines","lastModifiedDate":"2021-03-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"### Prerthan Munireternam","lastModifiedDate":"2021-03-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"\u003cimg src\u003d\"images/prerthan99.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"[[github](http://github.com/prerthan99)] [[portfolio](team/prerthan99.md)]","lastModifiedDate":"2021-03-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"* Role: Documentation","lastModifiedDate":"2021-03-02"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: Data, Integration","lastModifiedDate":"2021-03-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"### Vivegan","lastModifiedDate":"2021-03-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"\u003cimg src\u003d\"images/vivegank.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"[[github](http://github.com/vivegank)]","lastModifiedDate":"2021-03-02"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"[[portfolio](team/vivegank.md)]","lastModifiedDate":"2021-03-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: Dev Ops + Threading, Scheduling and tracking","lastModifiedDate":"2021-03-02"}],"authorContributionMap":{"BigDoot":1,"nicholasnge":19,"-":28}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2020-06-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"prerthan99"},"content":"* Insurance agents specialising in medical insurance","lastModifiedDate":"2021-03-02"},{"lineNumber":240,"author":{"gitId":"prerthan99"},"content":"* has manu contacts to manage","lastModifiedDate":"2021-03-02"},{"lineNumber":241,"author":{"gitId":"prerthan99"},"content":"* has a need to edit and share contacts information","lastModifiedDate":"2021-03-02"},{"lineNumber":242,"author":{"gitId":"prerthan99"},"content":"* well versed in CLI","lastModifiedDate":"2021-03-02"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":246,"author":{"gitId":"prerthan99"},"content":"**Value proposition**: ","lastModifiedDate":"2021-03-02"},{"lineNumber":247,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":248,"author":{"gitId":"prerthan99"},"content":"* Ease insurance agents with details as its centralised","lastModifiedDate":"2021-03-02"},{"lineNumber":249,"author":{"gitId":"prerthan99"},"content":"* Can share information to medical officers and clients involved","lastModifiedDate":"2021-03-02"},{"lineNumber":250,"author":{"gitId":"prerthan99"},"content":"* For those proficient in typing, ease management of assets ","lastModifiedDate":"2021-03-02"},{"lineNumber":251,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"prerthan99"},"content":"| `* * *`  | user                                       | add clients contact.           | have a seperate place to store domain specific information.            |","lastModifiedDate":"2021-03-02"},{"lineNumber":261,"author":{"gitId":"prerthan99"},"content":"| `* * *`  | user                                       | delete client\u0027s contact        | remove unwanted contacts                                               |","lastModifiedDate":"2021-03-02"},{"lineNumber":262,"author":{"gitId":"prerthan99"},"content":"| `* * *`  | user                                       | view all my contacts           | view a list of all my contacts.                                        |","lastModifiedDate":"2021-03-02"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"prerthan99"},"content":"| `* *`    | user                                       | see all the commands available | know what commands to use                |","lastModifiedDate":"2021-03-02"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"prerthan99"},"content":"**Use case: Adding a new user**","lastModifiedDate":"2021-03-02"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"prerthan99"},"content":"  1. User chooses to add a client.","lastModifiedDate":"2021-03-02"},{"lineNumber":277,"author":{"gitId":"prerthan99"},"content":"  2. Bob requests for details of the client.","lastModifiedDate":"2021-03-02"},{"lineNumber":278,"author":{"gitId":"prerthan99"},"content":"  3. User enters the requested details.","lastModifiedDate":"2021-03-02"},{"lineNumber":279,"author":{"gitId":"prerthan99"},"content":"  4. Bob requests for confirmation.","lastModifiedDate":"2021-03-02"},{"lineNumber":280,"author":{"gitId":"prerthan99"},"content":"  5. User confirms.","lastModifiedDate":"2021-03-02"},{"lineNumber":281,"author":{"gitId":"prerthan99"},"content":"  6. Bob adds the client and displays the new log of clients.","lastModifiedDate":"2021-03-02"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"prerthan99"},"content":"  *3a. Bob detects an error in the entered data.","lastModifiedDate":"2021-03-02"},{"lineNumber":288,"author":{"gitId":"prerthan99"},"content":"  *    3a1. Bob requests for the correct data.","lastModifiedDate":"2021-03-02"},{"lineNumber":289,"author":{"gitId":"prerthan99"},"content":"  *    3a2. User enters new data.","lastModifiedDate":"2021-03-02"},{"lineNumber":290,"author":{"gitId":"prerthan99"},"content":"  *    Steps 3a1-3a2 are repeated until the data entered are correct.","lastModifiedDate":"2021-03-02"},{"lineNumber":291,"author":{"gitId":"prerthan99"},"content":"  ","lastModifiedDate":"2021-03-02"},{"lineNumber":292,"author":{"gitId":"prerthan99"},"content":"      Use case resumes from step 4.","lastModifiedDate":"2021-03-02"},{"lineNumber":293,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":294,"author":{"gitId":"prerthan99"},"content":"      Use case ends.","lastModifiedDate":"2021-03-02"},{"lineNumber":295,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":296,"author":{"gitId":"prerthan99"},"content":"  *3b. User requests to edit the data of the client in a future date.","lastModifiedDate":"2021-03-02"},{"lineNumber":297,"author":{"gitId":"prerthan99"},"content":"  *    3b1. Bob requests for confirmation.","lastModifiedDate":"2021-03-02"},{"lineNumber":298,"author":{"gitId":"prerthan99"},"content":"  *    3b2. User confirms future transfer.","lastModifiedDate":"2021-03-02"},{"lineNumber":299,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      ","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"prerthan99"},"content":" *3c At any time, User chooses to delete the client.","lastModifiedDate":"2021-03-02"},{"lineNumber":303,"author":{"gitId":"prerthan99"},"content":" *     3c1. OBS requests to confirm the deletion.","lastModifiedDate":"2021-03-02"},{"lineNumber":304,"author":{"gitId":"prerthan99"},"content":" *     3c2. User confirms the deletion.","lastModifiedDate":"2021-03-02"},{"lineNumber":305,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"prerthan99"},"content":"      Use case ends.","lastModifiedDate":"2021-03-02"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"prerthan99"},"content":"1. Domain rules : at least 1 user added","lastModifiedDate":"2021-03-02"},{"lineNumber":315,"author":{"gitId":"prerthan99"},"content":"2. Constraints : System should be compatible with previous version and easily scalable to add new functionalities","lastModifiedDate":"2021-03-02"},{"lineNumber":316,"author":{"gitId":"prerthan99"},"content":"3. Technical requirement : System should be able to work on any processor i.e. 32 bit or 64 bit.","lastModifiedDate":"2021-03-02"},{"lineNumber":317,"author":{"gitId":"prerthan99"},"content":"4. Technical requirement : System should be scalable enough to be able to keep up with new processors (more than 64)","lastModifiedDate":"2021-03-02"},{"lineNumber":318,"author":{"gitId":"prerthan99"},"content":"5. Technical requirement : System should be able to work on an operating system (OS) i.e. MacOS, Windows, Linux etc.","lastModifiedDate":"2021-03-02"},{"lineNumber":319,"author":{"gitId":"prerthan99"},"content":"6. Performance requirement : System should have at most a tolerable lag time but not too long that it is off putting","lastModifiedDate":"2021-03-02"},{"lineNumber":320,"author":{"gitId":"prerthan99"},"content":"7. Quality requirement : System should be straightforward enough that a novice should at the very least be able to add, edit and delete users","lastModifiedDate":"2021-03-02"},{"lineNumber":321,"author":{"gitId":"prerthan99"},"content":"8. Process requirement : i.e. the project should adhere to the schedule pre decided (subject to minor adjustments within the agreed upon room for error)","lastModifiedDate":"2021-03-02"},{"lineNumber":322,"author":{"gitId":"prerthan99"},"content":"9. Miscellaneous : the program should not contain any offending imaginary and or vulgar words/language","lastModifiedDate":"2021-03-02"},{"lineNumber":323,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"prerthan99":48,"-":335}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"DocBob is a **desktop app for managing patient\u0027s information, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Bob can get your patient\u0027s medical information faster than any other patient\u0027s information management app in the market. ","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"BigDoot"},"content":"1. Download the latest `bob.jar` from [here](https://github.com/AY2021S2-CS2103T-W12-1/tp/releases).","lastModifiedDate":"2021-03-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"BigDoot"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will list out all available commands.\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"   * **`list`** : List out all patients or appointment information available.","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"   * **`add`**`/nShrek p/66666666 a/69 l/Swamp` : Adds a patient named `Shrek` to the patient list.","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"   * **`delete`**`Lord Farquaad` : Deletes a patient named `Lord Farquaad` from the patient list.","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"BigDoot"},"content":"### List out all available commands : `help`","lastModifiedDate":"2021-03-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"BigDoot"},"content":"Shows a list of all available commands for use in the app, with format example.","lastModifiedDate":"2021-03-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"BigDoot"},"content":"Example: `help`","lastModifiedDate":"2021-03-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"BigDoot"},"content":"Output: ","lastModifiedDate":"2021-03-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"BigDoot"},"content":"`1) add n/Name p/phoneNumber a/Age l/Location`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":74,"author":{"gitId":"BigDoot"},"content":"`2) delete Name`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":75,"author":{"gitId":"BigDoot"},"content":"`3) list`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":76,"author":{"gitId":"BigDoot"},"content":"`4) help`","lastModifiedDate":"2021-03-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"### Adding a patinet\u0027s contact: `add`","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"Adds a patient to DocBob\u0027s contact list.","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":82,"author":{"gitId":"BigDoot"},"content":"Format: `add n/Name p/phoneNumber a/Age l/Location`","lastModifiedDate":"2021-03-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"BigDoot"},"content":"* `add /nShrek p/66666666 a/69 l/Swamp`","lastModifiedDate":"2021-03-02"},{"lineNumber":86,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"Can also add a patient by appointment","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"Format: `appt INDEX /dDATE`","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"where DATE is DDMMYYYYhhmm or DDMMhhmm","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"Examples:","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"* `appt 12 200420210930`","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"### Deleting a patient\u0027s contact: `delete`","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"Deletes a patient from DocBob\u0027s contact list.","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"BigDoot"},"content":"Format: `delete Name`","lastModifiedDate":"2021-03-02"},{"lineNumber":101,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":102,"author":{"gitId":"BigDoot"},"content":"Examples:","lastModifiedDate":"2021-03-02"},{"lineNumber":103,"author":{"gitId":"BigDoot"},"content":"* `delete Lord Farquaad`","lastModifiedDate":"2021-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"Deleting can also be done by index","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"Format : `delete INDEX`","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"where INDEX must be a positive integer (1,2,3,...)","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"* `delete 1`","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"### Listing out all patients contacts : `list`","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"Shows a list of all your saved patients information.","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"BigDoot"},"content":"Example: `list`","lastModifiedDate":"2021-03-02"},{"lineNumber":120,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":121,"author":{"gitId":"BigDoot"},"content":"Output: ","lastModifiedDate":"2021-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":123,"author":{"gitId":"BigDoot"},"content":"`1) Shrek`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":124,"author":{"gitId":"BigDoot"},"content":"`2) Fiona`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":125,"author":{"gitId":"BigDoot"},"content":"`3) Lord Farquaad`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":126,"author":{"gitId":"BigDoot"},"content":"`4) Donkey`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":127,"author":{"gitId":"BigDoot"},"content":"`5) Onions`\u003cbr\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":128,"author":{"gitId":"BigDoot"},"content":"`6) Dragon`","lastModifiedDate":"2021-03-02"},{"lineNumber":129,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":"### Editing a patient information[Coming soon] : `edit`","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"Edits an existing person in the list.","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"prerthan99"},"content":"* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2021-03-16"},{"lineNumber":140,"author":{"gitId":"prerthan99"},"content":"* You can remove all the patient’s tags by typing `t/` without","lastModifiedDate":"2021-03-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"prerthan99"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2021-03-16"},{"lineNumber":145,"author":{"gitId":"prerthan99"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-03-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"prerthan99"},"content":"### Locating patient by name[Coming soon] : `find`","lastModifiedDate":"2021-03-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"prerthan99"},"content":"Finds patiets whose names contain any of the given keywords.","lastModifiedDate":"2021-03-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"BigDoot"},"content":"### Clearing all entries[Coming soon] : `clear`","lastModifiedDate":"2021-03-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"prerthan99"},"content":"Clears all entries from DocBob.","lastModifiedDate":"2021-03-16"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"BigDoot"},"content":"### Exiting the program[Coming soon] : `exit`","lastModifiedDate":"2021-03-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"BigDoot"},"content":"Client contact data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-03-02"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":184,"author":{"gitId":"BigDoot"},"content":"Client contact data is saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-03-02"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"prerthan99"},"content":"**Add** | `add n/Name p/phoneNumber a/Age l/Location` \u003cbr\u003e e.g., `add /nShrek p/66666666 a/69 l/Swamp`\u003cbr\u003e `appt INDEX /dDATE` \u003cbr\u003e e.g., `appt 12 200420210930`","lastModifiedDate":"2021-03-16"},{"lineNumber":205,"author":{"gitId":"prerthan99"},"content":"**Delete** | `delete Name`\u003cbr\u003e e.g., `delete Lord Farquaad` \u003cbr\u003e `delete INDEX` \u003cbr\u003e e.g., `delete 1`","lastModifiedDate":"2021-03-16"},{"lineNumber":206,"author":{"gitId":"BigDoot"},"content":"**List** | `list`","lastModifiedDate":"2021-03-02"},{"lineNumber":207,"author":{"gitId":"BigDoot"},"content":"","lastModifiedDate":"2021-03-02"}],"authorContributionMap":{"prerthan99":35,"BigDoot":35,"-":137}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"vivegank"},"content":"//import seedu.address.storage.DriveStorage;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);","lastModifiedDate":"2017-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"        //run google drive setup","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"vivegank"},"content":"        //DriveStorage.run();","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"            if (addressBookOptional.isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"nicholasnge":3,"-":182,"vivegank":2}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command! DocBob doesn\u0027t understand you bro.\";","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"BigDoot":1,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to DocBob. \\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in DocBob!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"BigDoot":3,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"BigDoot"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"BigDoot":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Hey Doc, here are your patients!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"BigDoot"},"content":"            + \": Shows a list of all your saved patient contacts.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"BigDoot"},"content":"            + \"Parameters: None\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"BigDoot"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"BigDoot":5,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/medical/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.logic.commands.medical;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public static final String COMMAND_WORD \u003d \"appt\";","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment with a patient \"","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            + \"by the index number used in the displayed person list. \\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \\n\" + Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"            + \"\\n Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"24051800\";","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment added: %s\";","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    private final Index index;","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    private final LocalDateTime date;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"     * @param date  details to edit the person with","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    public AddAppointmentCommand(Index index, LocalDateTime date) {","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"        Person person \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        Appointment appt \u003d new Appointment(person, date);","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        Person editedPerson \u003d createPersonWithAppointment(person, appt);","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"        model.setPerson(person, editedPerson);","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, appt));","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"    private static Person createPersonWithAppointment(Person personToEdit, Appointment appt) {","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"        // copy everything","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"        Name updatedName \u003d personToEdit.getName();","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"        Person p \u003d new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"        p.addAppointment(appt);","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"        return p;","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"vivegank"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"vivegank"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"vivegank"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"vivegank"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"vivegank"},"content":"            return true;","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"vivegank"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"vivegank"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"vivegank"},"content":"        if (!(other instanceof AddAppointmentCommand)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"vivegank"},"content":"            return false;","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"vivegank"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"vivegank"},"content":"        // state check","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"vivegank"},"content":"        AddAppointmentCommand c \u003d (AddAppointmentCommand) other;","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"vivegank"},"content":"        return index.equals(c.index)","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"vivegank"},"content":"                \u0026\u0026 date.equals(c.date);","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":86,"vivegank":18}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.medical.AddAppointmentCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.medical.AddAppointmentCommandParser;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nicholasnge":5,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"nicholasnge":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_INVALID_DATE_NUMBER \u003d \"Date should contain only valid integers.\";","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":129,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"nicholasnge"},"content":"     * Parses {@code String unsortedDate} into a {@code LocalDateTime}.","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":133,"author":{"gitId":"nicholasnge"},"content":"    public static LocalDateTime parseDate(String unsortedDate) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":134,"author":{"gitId":"nicholasnge"},"content":"        LocalDateTime date;","lastModifiedDate":"2021-03-14"},{"lineNumber":135,"author":{"gitId":"nicholasnge"},"content":"        if (unsortedDate.length() \u003d\u003d 12) { // following the format DDMMYYYYhhmm","lastModifiedDate":"2021-03-14"},{"lineNumber":136,"author":{"gitId":"nicholasnge"},"content":"            try {","lastModifiedDate":"2021-03-14"},{"lineNumber":137,"author":{"gitId":"nicholasnge"},"content":"                int day \u003d Integer.parseInt(unsortedDate.substring(0, 2));","lastModifiedDate":"2021-03-14"},{"lineNumber":138,"author":{"gitId":"nicholasnge"},"content":"                int month \u003d Integer.parseInt(unsortedDate.substring(2, 4));","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"nicholasnge"},"content":"                int year \u003d Integer.parseInt(unsortedDate.substring(4, 8));","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"nicholasnge"},"content":"                int hour \u003d Integer.parseInt(unsortedDate.substring(8, 10));","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"nicholasnge"},"content":"                int min \u003d Integer.parseInt(unsortedDate.substring(10, 12));","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"nicholasnge"},"content":"                date \u003d LocalDateTime.of(year, month, day, hour, min);","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"nicholasnge"},"content":"            } catch (NumberFormatException | DateTimeException e) {","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"nicholasnge"},"content":"                throw new ParseException(MESSAGE_INVALID_DATE_NUMBER);","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"nicholasnge"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"nicholasnge"},"content":"        } else if (unsortedDate.length() \u003d\u003d 8) { // following the format DDMMhhmm","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"nicholasnge"},"content":"            try {","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"nicholasnge"},"content":"                int day \u003d Integer.parseInt(unsortedDate.substring(0, 2));","lastModifiedDate":"2021-03-14"},{"lineNumber":149,"author":{"gitId":"nicholasnge"},"content":"                int month \u003d Integer.parseInt(unsortedDate.substring(2, 4));","lastModifiedDate":"2021-03-14"},{"lineNumber":150,"author":{"gitId":"nicholasnge"},"content":"                int hour \u003d Integer.parseInt(unsortedDate.substring(4, 6));","lastModifiedDate":"2021-03-14"},{"lineNumber":151,"author":{"gitId":"nicholasnge"},"content":"                int min \u003d Integer.parseInt(unsortedDate.substring(6, 8));","lastModifiedDate":"2021-03-14"},{"lineNumber":152,"author":{"gitId":"nicholasnge"},"content":"                date \u003d LocalDateTime.of(LocalDateTime.now().getYear(), month, day, hour, min);","lastModifiedDate":"2021-03-14"},{"lineNumber":153,"author":{"gitId":"nicholasnge"},"content":"            } catch (NumberFormatException | DateTimeException e) {","lastModifiedDate":"2021-03-14"},{"lineNumber":154,"author":{"gitId":"nicholasnge"},"content":"                throw new ParseException(MESSAGE_INVALID_DATE_NUMBER);","lastModifiedDate":"2021-03-14"},{"lineNumber":155,"author":{"gitId":"nicholasnge"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":156,"author":{"gitId":"nicholasnge"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":157,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT);","lastModifiedDate":"2021-03-14"},{"lineNumber":158,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":159,"author":{"gitId":"nicholasnge"},"content":"        if (date.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2021-03-14"},{"lineNumber":160,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS_MIN_DATE);","lastModifiedDate":"2021-03-14"},{"lineNumber":161,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":162,"author":{"gitId":"nicholasnge"},"content":"        return date;","lastModifiedDate":"2021-03-14"},{"lineNumber":163,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"nicholasnge":40,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/medical/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.logic.parser.medical;","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.medical.AddAppointmentCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE);","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        Index index;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        LocalDateTime date;","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"index: \" + index.toString());","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"prefix date: \" + date.toString());","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        return new AddAppointmentCommand(index, date);","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"vivegank"},"content":"    //Is this needed in AddAppointmentCommandParser? Seems unused.","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"vivegank"},"content":"    ///**","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"vivegank"},"content":"    // * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"vivegank"},"content":"    // * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"vivegank"},"content":"    // */","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"vivegank"},"content":"    //private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"vivegank"},"content":"    //    return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"vivegank"},"content":"    //}","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":51,"vivegank":8}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    Path getSettingsFilePath();","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"nicholasnge":1,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"BigDoot"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"docBob.json\");","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    private Path settingsFilePath \u003d Paths.get(\"data\" , \"settings.json\");","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        setSettingsFilePath(newUserPrefs.getSettingsFilePath());","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"    public Path getSettingsFilePath() {","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return settingsFilePath;","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    private void setSettingsFilePath(Path settingsFilePath) {","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(settingsFilePath);","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"        this.settingsFilePath \u003d settingsFilePath;","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"        sb.append(\"\\nLocal settings file location : \" + settingsFilePath);","lastModifiedDate":"2021-03-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"BigDoot":1,"nicholasnge":13,"-":87}},{"path":"src/main/java/seedu/address/model/medical/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"vivegank"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"vivegank"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_DISPLAY;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":" * Represents a Appointment of a Patient.","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"public class Appointment {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_CONSTRAINTS_MIN_DATE \u003d \"Date must be in the future\";","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_CONSTRAINTS_DATE_FORMAT \u003d \"Date format: \"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"            + \"DDMMYYYYhhmm or DDMMhhmm. If the year is omitted, the current year is\"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"            + \"assumed.\";","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    private Person person;","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    private String zoomMeetingUrl;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    private LocalDateTime date;","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    public Appointment(Person person, LocalDateTime date) {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"vivegank"},"content":"        requireAllNonNull(person, date);","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"    public Appointment(LocalDateTime date) {","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"vivegank"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    public Person getPerson() {","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        return person;","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"    public String getZoomMeetingUrl() {","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        return zoomMeetingUrl;","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    public LocalDateTime getDate() {","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        return date;","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        return person.hashCode() + date.hashCode();","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"vivegank"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"vivegank"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"vivegank"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"vivegank"},"content":"            return true;","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"vivegank"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"vivegank"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"vivegank"},"content":"            return false;","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"vivegank"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"vivegank"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"vivegank"},"content":"        return otherAppointment.getPerson().equals(getPerson())","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"vivegank"},"content":"                \u0026\u0026 otherAppointment.getDate().equals(getDate());","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    public String toString() {","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"        return getDateDisplay() + \" - \" + person.getName();","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"    // for storage into JSON","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"    public String getDateStorage() {","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_STORAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"    // for displaying, doesnt have year","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"    public String getDateDisplay() {","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_DISPLAY);","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"nicholasnge":70,"vivegank":19}},{"path":"src/main/java/seedu/address/model/medical/DateFormat.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"public class DateFormat {","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    public static final DateTimeFormatter DATE_FORMAT_STORAGE \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"            new DateTimeFormatterBuilder().appendPattern(\"d/M/yy H:mm\")","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"            .toFormatter();","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    public static final DateTimeFormatter DATE_FORMAT_DISPLAY \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"            new DateTimeFormatterBuilder().appendPattern(\"EEE, dd MMM, HH:mm\")","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"            .toFormatter();","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":20}},{"path":"src/main/java/seedu/address/model/medical/MedicalRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_DISPLAY;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":" * Represents a Appointment of a Patient.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"public class MedicalRecord {","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    // attributes from appointment","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    private Person person;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    private LocalDateTime date;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private String zoomMeetingUrl;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    private List\u003cSection\u003e sections;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord(Person person, LocalDateTime date, List\u003cString\u003e sections) {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        this.sections \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        for (String section : sections) {","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"            this.sections.add(new Section(section));","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    //TODO REMOVE PERSON FROM MEDICAL RECORD","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord(LocalDateTime date, List\u003cSection\u003e sections) {","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        this.sections \u003d sections;","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord(Appointment appointment, List\u003cString\u003e sections) {","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        this.person \u003d appointment.getPerson();","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d appointment.getDate();","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        this.zoomMeetingUrl \u003d appointment.getZoomMeetingUrl();","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        this.sections \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        for (String section : sections) {","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"            this.sections.add(new Section(section));","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"    public Person getPerson() {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return person;","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    public LocalDateTime getDate() {","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        return date;","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"    public String getZoomMeetingUrl() {","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        return zoomMeetingUrl;","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"vivegank"},"content":"    public List\u003cSection\u003e getSections() {","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"vivegank"},"content":"        return Collections.unmodifiableList(sections);","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"    // for storage into JSON","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"    public String getDateStorage() {","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_STORAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"    // for displaying, doesnt have year","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"    public String getDateDisplay() {","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_DISPLAY);","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"nicholasnge":80,"vivegank":3}},{"path":"src/main/java/seedu/address/model/medical/Section.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":" * Represents a Section of a Medical Record.","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"public class Section {","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    public static final int MAX_TITLE_LENGTH \u003d 30;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Title must be less than \" + MAX_TITLE_LENGTH + \" characters long\";","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    private String title;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    private String body;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    public Section(String title) {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"        new Section(title, \"\");","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    public Section(String title, String body) {","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        this.body \u003d \"\";","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    public static boolean isValidTitleBody(String title, String body) {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        return title.length() \u003c\u003d MAX_TITLE_LENGTH;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    public String getTitle() {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        return title;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    public String getBody() {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        return body;","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"nicholasnge":39}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.MedicalRecord;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    // Medical fields","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cMedicalRecord\u003e records \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"    public List\u003cAppointment\u003e getAppointments() {","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"        return Collections.unmodifiableList(appointments);","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"    public List\u003cMedicalRecord\u003e getRecords() {","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"        return Collections.unmodifiableList(records);","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"nicholasnge"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"nicholasnge"},"content":"        this.appointments.add(appointment);","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"nicholasnge"},"content":"    public void addMedicalRecord(MedicalRecord record) {","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"nicholasnge"},"content":"        this.records.add(record);","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nicholasnge":23,"-":123}},{"path":"src/main/java/seedu/address/storage/DriveStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.io.InputStream;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.security.GeneralSecurityException;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.auth.oauth2.Credential;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.http.javanet.NetHttpTransport;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.json.JsonFactory;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.Drive;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.DriveScopes;","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.model.File;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.model.FileList;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"public class DriveStorage {","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    private static final String APPLICATION_NAME \u003d \"Google Drive API Java Quickstart\";","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    private static final String TOKENS_DIRECTORY_PATH \u003d \"tokens\";","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"     * Global instance of the scopes required by this quickstart.","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"     * If modifying these scopes, delete your previously saved tokens/ folder.","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    private static final List\u003cString\u003e SCOPES \u003d Collections.singletonList(DriveScopes.DRIVE_FILE);","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    private static final String CREDENTIALS_FILE_PATH \u003d \"/credentials.json\";","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     * Creates an authorized Credential object.","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     * @param httpTransport The network HTTP Transport.","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     * @return An authorized Credential object.","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"     * @throws IOException If the credentials.json file cannot be found.","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    private static Credential getCredentials(final NetHttpTransport httpTransport) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        // Load client secrets.","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        InputStream in \u003d DriveStorage.class.getResourceAsStream(CREDENTIALS_FILE_PATH);","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"        if (in \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"            throw new FileNotFoundException(\"Resource not found: \" + CREDENTIALS_FILE_PATH);","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        // Build flow and trigger user authorization request.","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder(","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"                httpTransport, JSON_FACTORY, clientSecrets, SCOPES)","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"                .setAccessType(\"offline\")","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"                .build();","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        LocalServerReceiver receiver \u003d new LocalServerReceiver.Builder().setPort(8888).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"user\");","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"     * Build a new authorized API client service","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"    public static void run() throws IOException, GeneralSecurityException {","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"        // Build a new authorized API client service.","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"        Drive service \u003d new Drive.Builder(httpTransport, JSON_FACTORY, getCredentials(httpTransport))","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"                .setApplicationName(APPLICATION_NAME)","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"                .build();","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"        // Print the names and IDs for up to 10 files.","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"        FileList result \u003d service.files().list()","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"                .setPageSize(10)","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"                .setFields(\"nextPageToken, files(id, name)\")","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"                .execute();","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"        List\u003cFile\u003e files \u003d result.getFiles();","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"        if (files \u003d\u003d null || files.isEmpty()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(\"No files found.\");","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(\"Files:\");","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"            for (File file : files) {","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"                System.out.printf(\"%s (%s)\\n\", file.getName(), file.getId());","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"nicholasnge":87}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    private final String dateString;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedAppointment(String dateString) {","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"        this.dateString \u003d dateString;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        dateString \u003d source.getDateStorage();","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    @JsonValue","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    public String getDateString() {","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        return dateString;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(dateString, DATE_FORMAT_STORAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"            return new Appointment(date);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT);","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":51}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"                             @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"                             @JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records) {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        if (records !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"            this.records.addAll(records);","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        if (appointments !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"            this.appointments.addAll(appointments);","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"        records.addAll(source.getRecords().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"                .map(JsonAdaptedRecord::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"        appointments.addAll(source.getAppointments().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"                .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"nicholasnge"},"content":"        Person person \u003d new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"nicholasnge"},"content":"        // add the appointments","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"nicholasnge"},"content":"        for (JsonAdaptedAppointment appt : appointments) {","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"nicholasnge"},"content":"            person.addAppointment(appt.toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"nicholasnge"},"content":"        // add the medical records","lastModifiedDate":"2021-03-14"},{"lineNumber":129,"author":{"gitId":"nicholasnge"},"content":"        for (JsonAdaptedRecord rec : records) {","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"nicholasnge"},"content":"            person.addMedicalRecord(rec.toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"nicholasnge"},"content":"        return person;","lastModifiedDate":"2021-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"nicholasnge":28,"-":107}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.MedicalRecord;","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Section;","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"public class JsonAdaptedRecord {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    private final String dateString;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cJsonAdaptedSection\u003e sections \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedRecord(@JsonProperty(\"dateString\") String dateString,","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"                             @JsonProperty(\"sections\") List\u003cJsonAdaptedSection\u003e sections) {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        this.dateString \u003d dateString;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        if (sections !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"            this.sections.addAll(sections);","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedRecord(MedicalRecord source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        dateString \u003d source.getDateStorage();","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"        sections.addAll(source.getSections().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"                .map(JsonAdaptedSection::new)","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        final LocalDateTime date;","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"            date \u003d LocalDateTime.parse(dateString, DATE_FORMAT_STORAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT);","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        final List\u003cSection\u003e recordSections \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        for (JsonAdaptedSection section : sections) {","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"            recordSections.add(section.toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        return new MedicalRecord(date, recordSections);","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":64}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedSection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Section;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"public class JsonAdaptedSection {","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    private final String title;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    private final String body;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedSection(@JsonProperty(\"title\") String title, @JsonProperty(\"body\") String body) {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"        this.body \u003d body;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedSection(Section source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        title \u003d source.getTitle();","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        body \u003d source.getBody();","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    @JsonValue","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    public String getTitle() {","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        return title;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    @JsonValue","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public String getBody() {","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        return body;","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    public Section toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        if (!Section.isValidTitleBody(title, body)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        return new Section(title, body);","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":54}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"BigDoot"},"content":"    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S2-CS2103T-W12-1/\"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"BigDoot"},"content":"                                                + \"tp/blob/master/docs/UserGuide.md\";","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"BigDoot"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the full user guide here: \" + USERGUIDE_URL + \"\\n\";","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"BigDoot"},"content":"    public static final String COMMANDGUIDE_MESSAGE \u003d AddCommand.MESSAGE_USAGE + \"\\n\\n\" + DeleteCommand.MESSAGE_USAGE","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"BigDoot"},"content":"                                                        + \"\\n\\n\" + ListCommand.MESSAGE_USAGE + \"\\n\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"BigDoot"},"content":"                                                        + HelpCommand.MESSAGE_USAGE + \"\\n\\n\";","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"BigDoot"},"content":"        helpMessage.setText(HELP_MESSAGE + \"\\n\" + COMMANDGUIDE_MESSAGE);","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"BigDoot":11,"-":99}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"BigDoot"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/bob_builder_32.png\";","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"BigDoot":1,"-":88}},{"path":"src/main/resources/credentials.json","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"{\"installed\":{\"client_id\":\"186790329373-iscruru802cr782rnmun7s2i1hln8bac.apps.googleusercontent.com\",\"project_id\":\"quickstart2103-1615307438241\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_secret\":\"Qn1GiIfBnUdMAKTAC-fah0y1\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"]}}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"nicholasnge":1}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"BigDoot"},"content":"         title\u003d\"DocBob\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"BigDoot"},"content":"    \u003cImage url\u003d\"@/images/bob_builder_32.png\" /\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"BigDoot":2,"-":58}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"BigDoot"},"content":"  \"addressBookFilePath\" : \"docBob.json\"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"BigDoot":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"BigDoot"},"content":"  \"addressBookFilePath\" : \"docBob.json\"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"BigDoot":1,"-":10}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"BigDoot"},"content":"        assertNotNull(AppUtil.getImage(\"/images/bob_builder_32.png\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"BigDoot":1,"-":35}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"BigDoot"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"docBob.json\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"BigDoot":1,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/medical/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vivegank"},"content":"package seedu.address.logic.commands.medical;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"vivegank"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"vivegank"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"vivegank"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"vivegank"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"vivegank"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"vivegank"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"vivegank"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"vivegank"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"vivegank"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"vivegank"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"vivegank"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"vivegank"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"vivegank"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"vivegank"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"vivegank"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"vivegank"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"vivegank"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"vivegank"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"vivegank"},"content":"import seedu.address.model.medical.Appointment;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"vivegank"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"vivegank"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"vivegank"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"vivegank"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"vivegank"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"vivegank"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null, null));","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"vivegank"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"vivegank"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"vivegank"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2021, 12, 12, 18, 00);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"vivegank"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(outOfBoundIndex, dateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"vivegank"},"content":"        assertCommandFailure(addAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"vivegank"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"vivegank"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"vivegank"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2021, 12, 12, 18, 00);","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"vivegank"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"vivegank"},"content":"        Person personWithAppointment \u003d new PersonBuilder(personInFilteredList).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"vivegank"},"content":"        Appointment appointment \u003d new Appointment(personWithAppointment, dateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"vivegank"},"content":"        personWithAppointment.addAppointment(appointment);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"vivegank"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, dateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"vivegank"},"content":"        String expectedMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS, appointment);","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"vivegank"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"vivegank"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), personWithAppointment);","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"vivegank"},"content":"        assertCommandSuccess(addAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"vivegank"},"content":"    public void equals() {","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"vivegank"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2021, 12, 12, 18, 00);","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"vivegank"},"content":"        LocalDateTime otherDateTime \u003d LocalDateTime.of(2021, 11, 11, 18, 00);","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"vivegank"},"content":"        final AddAppointmentCommand standardCommand \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, dateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"vivegank"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"vivegank"},"content":"        LocalDateTime copyDateTime \u003d LocalDateTime.of(2021, 12, 12, 18, 00);","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"vivegank"},"content":"        AddAppointmentCommand commandWithSameValues \u003d new AddAppointmentCommand(INDEX_FIRST_PERSON, copyDateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"vivegank"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"vivegank"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"vivegank"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"vivegank"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"vivegank"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"vivegank"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"vivegank"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"vivegank"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"vivegank"},"content":"        assertFalse(standardCommand.equals(new AddAppointmentCommand(INDEX_SECOND_PERSON, dateTime)));","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"vivegank"},"content":"        // different dateTime -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"vivegank"},"content":"        assertFalse(standardCommand.equals(new AddAppointmentCommand(INDEX_FIRST_PERSON, otherDateTime)));","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"vivegank"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"vivegank":91}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"vivegank"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"vivegank"},"content":"import seedu.address.logic.commands.medical.AddAppointmentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"vivegank"},"content":"    public void parseCommand_addAppointment() throws Exception {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"vivegank"},"content":"        AddAppointmentCommand command \u003d (AddAppointmentCommand) parser.parseCommand(","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"vivegank"},"content":"                AddAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" d/121220211430\");","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"vivegank"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2021, 12, 12, 14, 30);","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"vivegank"},"content":"        assertEquals(new AddAppointmentCommand(INDEX_FIRST_PERSON, dateTime), command);","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"-":101,"vivegank":10}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"vivegank"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"vivegank"},"content":"    private static final String INVALID_SHORT_DATE \u003d \"130521\";","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"vivegank"},"content":"    private static final String INVALID_DDMMYYYYhhmm_DATE_1 \u003d \"10102021ab14\";","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"vivegank"},"content":"    private static final String INVALID_DDMMYYYYhhmm_DATE_2 \u003d \"101420212359\";","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"vivegank"},"content":"    private static final String INVALID_DDMMhhmm_DATE_1 \u003d \"1010ab14\";","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"vivegank"},"content":"    private static final String INVALID_DDMMhhmm_DATE_2 \u003d \"40102259\";","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"vivegank"},"content":"    private static final String INVALID_PAST_DATE \u003d \"101020201430\";","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":43,"author":{"gitId":"vivegank"},"content":"    private static final String VALID_DDMMYYYYhhmm_DATE \u003d \"101020211430\";","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"vivegank"},"content":"    private static final String VALID_DDMMhhmm_DATE \u003d \"10091630\";","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":206,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":207,"author":{"gitId":"vivegank"},"content":"    public void parseDate_invalidCharactersInddmmyyyyhhmmDate_throwsParseException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":208,"author":{"gitId":"vivegank"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DDMMYYYYhhmm_DATE_1));","lastModifiedDate":"2021-03-16"},{"lineNumber":209,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":210,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":211,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":212,"author":{"gitId":"vivegank"},"content":"    public void parseDate_invalidCharactersInddmmhhmmDate_throwsParseException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":213,"author":{"gitId":"vivegank"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DDMMhhmm_DATE_1));","lastModifiedDate":"2021-03-16"},{"lineNumber":214,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":215,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":216,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":217,"author":{"gitId":"vivegank"},"content":"    public void parseDate_invalidDateTimeInddmmyyyyhhmmDate_throwsParseException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":218,"author":{"gitId":"vivegank"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DDMMYYYYhhmm_DATE_2));","lastModifiedDate":"2021-03-16"},{"lineNumber":219,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":220,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":221,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":222,"author":{"gitId":"vivegank"},"content":"    public void parseDate_invalidDateTimeInddmmhhmmDate_throwsParseException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":223,"author":{"gitId":"vivegank"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DDMMhhmm_DATE_2));","lastModifiedDate":"2021-03-16"},{"lineNumber":224,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":225,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":226,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":227,"author":{"gitId":"vivegank"},"content":"    public void parseDate_invalidDateFormat_throwsParseException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":228,"author":{"gitId":"vivegank"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_SHORT_DATE));","lastModifiedDate":"2021-03-16"},{"lineNumber":229,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":230,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":231,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":232,"author":{"gitId":"vivegank"},"content":"    public void parseDate_invalidPastDate_throwsParseException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":233,"author":{"gitId":"vivegank"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_PAST_DATE));","lastModifiedDate":"2021-03-16"},{"lineNumber":234,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":235,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":236,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":237,"author":{"gitId":"vivegank"},"content":"    public void parseDate_validddmmyyyyhhmmDate_returnsLocalDateTime() throws Exception {","lastModifiedDate":"2021-03-16"},{"lineNumber":238,"author":{"gitId":"vivegank"},"content":"        LocalDateTime actualDateTime \u003d ParserUtil.parseDate(VALID_DDMMYYYYhhmm_DATE);","lastModifiedDate":"2021-03-16"},{"lineNumber":239,"author":{"gitId":"vivegank"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.of(2021, 10, 10, 14, 30);","lastModifiedDate":"2021-03-16"},{"lineNumber":240,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":241,"author":{"gitId":"vivegank"},"content":"        assertEquals(expectedDateTime, actualDateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":242,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":243,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":244,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":245,"author":{"gitId":"vivegank"},"content":"    public void parseDate_validddmmhhmmDate_returnsLocalDateTime() throws Exception {","lastModifiedDate":"2021-03-16"},{"lineNumber":246,"author":{"gitId":"vivegank"},"content":"        LocalDateTime actualDateTime \u003d ParserUtil.parseDate(VALID_DDMMhhmm_DATE);","lastModifiedDate":"2021-03-16"},{"lineNumber":247,"author":{"gitId":"vivegank"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.of(LocalDateTime.now().getYear(), 9, 10, 16, 30);","lastModifiedDate":"2021-03-16"},{"lineNumber":248,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":249,"author":{"gitId":"vivegank"},"content":"        assertEquals(expectedDateTime, actualDateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":250,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":251,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"-":196,"vivegank":55}},{"path":"src/test/java/seedu/address/logic/parser/medical/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vivegank"},"content":"package seedu.address.logic.parser.medical;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"vivegank"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"vivegank"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"vivegank"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"vivegank"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"vivegank"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"vivegank"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"vivegank"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"vivegank"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"vivegank"},"content":"import seedu.address.logic.commands.medical.AddAppointmentCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"vivegank"},"content":"class AddAppointmentCommandParserTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"vivegank"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"vivegank"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"vivegank"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"vivegank"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"vivegank"},"content":"        // no index specified","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"vivegank"},"content":"        // no date specified","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"vivegank"},"content":"        // no index and no date specified","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"vivegank"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"vivegank"},"content":"        // negative index","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, \"-5 d/20051800\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"vivegank"},"content":"        // zero index","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, \"0 d/20051800\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"vivegank"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"vivegank"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"vivegank"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"vivegank"},"content":"    public void parse_dateSpecified_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"vivegank"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"vivegank"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" d/200520211800\";","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"vivegank"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.of(2021, 5, 20, 18, 0);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"vivegank"},"content":"        AddAppointmentCommand expectedCommand \u003d new AddAppointmentCommand(targetIndex, expectedDateTime);","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"vivegank"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"vivegank"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"vivegank":58}},{"path":"src/test/java/seedu/address/model/medical/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vivegank"},"content":"package seedu.address.model.medical;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"vivegank"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"vivegank"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"vivegank"},"content":"class AppointmentTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"vivegank"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"vivegank"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"vivegank"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, null));","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"vivegank"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"vivegank"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"vivegank"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"vivegank"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"vivegank":15}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"//import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"//import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"//","lastModifiedDate":"2021-03-14"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":"//    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"nicholasnge"},"content":"//    }","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"nicholasnge":76,"-":32}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"BigDoot"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"docBob.json\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"BigDoot":1,"-":122}}]
