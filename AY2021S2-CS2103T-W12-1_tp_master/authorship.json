[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vivegank"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W12-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"vivegank"},"content":"* This is **an app to help insurance agents specializing in medical insurance to keep track of their clients\u0027 information**.\u003cbr\u003e"},{"lineNumber":6,"author":{"gitId":"vivegank"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"vivegank":3,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    //PERTAINING TO GOOGLE DRIVE SAVING"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"    compile \u0027com.google.api-client:google-api-client:1.23.0\u0027"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    compile \u0027com.google.apis:google-api-services-drive:v3-rev110-1.23.0\u0027"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"nicholasnge":5,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"### Glendon Chua"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"BigDoot"},"content":"\u003cimg src\u003d\"images/bigdoot.png\" width\u003d\"200px\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"[[github](https://github.com/BigDoot)]"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"[[portfolio](team/BigDoot.md)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Team Lead"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: Testing, Code quality"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"### Nicholas Nge"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"\u003cimg src\u003d\"images/nicholasnge.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"[[github](http://github.com/nicholasnge)]"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"[[portfolio](team/nicholasnge.md)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: UI, Deliverables and deadlines"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"### Prerthan Munireternam"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"\u003cimg src\u003d\"images/prerthan99.png\" width\u003d\"200px\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"[[github](http://github.com/prerthan99)] [[portfolio](team/prerthan99.md)]"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"* Role: Documentation"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: Data, Integration"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"### Vivegan"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"\u003cimg src\u003d\"images/vivegank.png\" width\u003d\"200px\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"[[github](http://github.com/vivegank)]"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"[[portfolio](team/vivegank.md)]"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"* Responsibilities: Dev Ops + Threading, Scheduling and tracking"}],"authorContributionMap":{"BigDoot":1,"nicholasnge":19,"-":28}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"prerthan99"},"content":"* Insurance agents specialising in medical insurance"},{"lineNumber":240,"author":{"gitId":"prerthan99"},"content":"* has manu contacts to manage"},{"lineNumber":241,"author":{"gitId":"prerthan99"},"content":"* has a need to edit and share contacts information"},{"lineNumber":242,"author":{"gitId":"prerthan99"},"content":"* well versed in CLI"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":246,"author":{"gitId":"prerthan99"},"content":"**Value proposition**: "},{"lineNumber":247,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":248,"author":{"gitId":"prerthan99"},"content":"* Ease insurance agents with details as its centralised"},{"lineNumber":249,"author":{"gitId":"prerthan99"},"content":"* Can share information to medical officers and clients involved"},{"lineNumber":250,"author":{"gitId":"prerthan99"},"content":"* For those proficient in typing, ease management of assets "},{"lineNumber":251,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":259,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":260,"author":{"gitId":"prerthan99"},"content":"| `* * *`  | user                                       | add clients contact.           | have a seperate place to store domain specific information.            |"},{"lineNumber":261,"author":{"gitId":"prerthan99"},"content":"| `* * *`  | user                                       | delete client\u0027s contact        | remove unwanted contacts                                               |"},{"lineNumber":262,"author":{"gitId":"prerthan99"},"content":"| `* * *`  | user                                       | view all my contacts           | view a list of all my contacts.                                        |"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":264,"author":{"gitId":"prerthan99"},"content":"| `* *`    | user                                       | see all the commands available | know what commands to use                |"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"prerthan99"},"content":"**Use case: Adding a new user**"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"prerthan99"},"content":"  1. User chooses to add a client."},{"lineNumber":277,"author":{"gitId":"prerthan99"},"content":"  2. Bob requests for details of the client."},{"lineNumber":278,"author":{"gitId":"prerthan99"},"content":"  3. User enters the requested details."},{"lineNumber":279,"author":{"gitId":"prerthan99"},"content":"  4. Bob requests for confirmation."},{"lineNumber":280,"author":{"gitId":"prerthan99"},"content":"  5. User confirms."},{"lineNumber":281,"author":{"gitId":"prerthan99"},"content":"  6. Bob adds the client and displays the new log of clients."},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"prerthan99"},"content":"  *3a. Bob detects an error in the entered data."},{"lineNumber":288,"author":{"gitId":"prerthan99"},"content":"  *    3a1. Bob requests for the correct data."},{"lineNumber":289,"author":{"gitId":"prerthan99"},"content":"  *    3a2. User enters new data."},{"lineNumber":290,"author":{"gitId":"prerthan99"},"content":"  *    Steps 3a1-3a2 are repeated until the data entered are correct."},{"lineNumber":291,"author":{"gitId":"prerthan99"},"content":"  "},{"lineNumber":292,"author":{"gitId":"prerthan99"},"content":"      Use case resumes from step 4."},{"lineNumber":293,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":294,"author":{"gitId":"prerthan99"},"content":"      Use case ends."},{"lineNumber":295,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":296,"author":{"gitId":"prerthan99"},"content":"  *3b. User requests to edit the data of the client in a future date."},{"lineNumber":297,"author":{"gitId":"prerthan99"},"content":"  *    3b1. Bob requests for confirmation."},{"lineNumber":298,"author":{"gitId":"prerthan99"},"content":"  *    3b2. User confirms future transfer."},{"lineNumber":299,"author":{"gitId":"-"},"content":"  "},{"lineNumber":300,"author":{"gitId":"-"},"content":"      Use case ends."},{"lineNumber":301,"author":{"gitId":"-"},"content":"      "},{"lineNumber":302,"author":{"gitId":"prerthan99"},"content":" *3c At any time, User chooses to delete the client."},{"lineNumber":303,"author":{"gitId":"prerthan99"},"content":" *     3c1. OBS requests to confirm the deletion."},{"lineNumber":304,"author":{"gitId":"prerthan99"},"content":" *     3c2. User confirms the deletion."},{"lineNumber":305,"author":{"gitId":"-"},"content":" "},{"lineNumber":306,"author":{"gitId":"-"},"content":" "},{"lineNumber":307,"author":{"gitId":"prerthan99"},"content":"      Use case ends."},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"prerthan99"},"content":"1. Domain rules : at least 1 user added"},{"lineNumber":315,"author":{"gitId":"prerthan99"},"content":"2. Constraints : System should be compatible with previous version and easily scalable to add new functionalities"},{"lineNumber":316,"author":{"gitId":"prerthan99"},"content":"3. Technical requirement : System should be able to work on any processor i.e. 32 bit or 64 bit."},{"lineNumber":317,"author":{"gitId":"prerthan99"},"content":"4. Technical requirement : System should be scalable enough to be able to keep up with new processors (more than 64)"},{"lineNumber":318,"author":{"gitId":"prerthan99"},"content":"5. Technical requirement : System should be able to work on an operating system (OS) i.e. MacOS, Windows, Linux etc."},{"lineNumber":319,"author":{"gitId":"prerthan99"},"content":"6. Performance requirement : System should have at most a tolerable lag time but not too long that it is off putting"},{"lineNumber":320,"author":{"gitId":"prerthan99"},"content":"7. Quality requirement : System should be straightforward enough that a novice should at the very least be able to add, edit and delete users"},{"lineNumber":321,"author":{"gitId":"prerthan99"},"content":"8. Process requirement : i.e. the project should adhere to the schedule pre decided (subject to minor adjustments within the agreed upon room for error)"},{"lineNumber":322,"author":{"gitId":"prerthan99"},"content":"9. Miscellaneous : the program should not contain any offending imaginary and or vulgar words/language"},{"lineNumber":323,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":330,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":339,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":356,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":367,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"prerthan99":48,"-":335}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"BigDoot"},"content":"Bob the Underwriting Insurance Agent is a **desktop app for managing insurance clients’ information, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Bob can get your client management tasks done faster than any other insurance clients’ information management app in the market. "},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"BigDoot"},"content":"1. Download the latest `bob.jar` from [here](https://github.com/AY2021S2-CS2103T-W12-1/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"BigDoot"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will list out all available commands.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"BigDoot"},"content":"   * **`list`** : List out all available commands."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"BigDoot"},"content":"   * **`add`**`/nShrek p/66666666 a/69 l/Swamp` : Adds a client contact named `Shrek` to the contacts list."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"BigDoot"},"content":"   * **`delete`**`Lord Farquaad` : Deletes a client contact named `Lord Farquaad` from the contacts list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"BigDoot"},"content":"### List out all available commands : `help`"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"BigDoot"},"content":"Shows a list of all available commands for use in the app, with format example."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"BigDoot"},"content":"Example: `help`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"BigDoot"},"content":"Output: "},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"BigDoot"},"content":"`1) add n/Name p/phoneNumber a/Age l/Location`\u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"BigDoot"},"content":"`2) delete Name`\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"BigDoot"},"content":"`3) list`\u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"BigDoot"},"content":"`4) help`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"BigDoot"},"content":"### Adding a client\u0027s contact: `add`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"BigDoot"},"content":"Adds a client to the contact book."},{"lineNumber":81,"author":{"gitId":"BigDoot"},"content":""},{"lineNumber":82,"author":{"gitId":"BigDoot"},"content":"Format: `add n/Name p/phoneNumber a/Age l/Location`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":85,"author":{"gitId":"BigDoot"},"content":"* `add /nShrek p/66666666 a/69 l/Swamp`"},{"lineNumber":86,"author":{"gitId":"BigDoot"},"content":""},{"lineNumber":87,"author":{"gitId":"BigDoot"},"content":"### Deleting a client\u0027s contact: `delete`"},{"lineNumber":88,"author":{"gitId":"BigDoot"},"content":""},{"lineNumber":89,"author":{"gitId":"BigDoot"},"content":"Deletes a client from the contact book."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"BigDoot"},"content":"Format: `delete Name`"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":94,"author":{"gitId":"BigDoot"},"content":"* `delete Lord Farquaad`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"BigDoot"},"content":"### Listing out all client contacts : `list`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"BigDoot"},"content":"Shows a list of all your saved client contacts."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"BigDoot"},"content":"Example: `list`"},{"lineNumber":103,"author":{"gitId":"BigDoot"},"content":""},{"lineNumber":104,"author":{"gitId":"BigDoot"},"content":"Output: "},{"lineNumber":105,"author":{"gitId":"BigDoot"},"content":""},{"lineNumber":106,"author":{"gitId":"BigDoot"},"content":"`1) Shrek`\u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"BigDoot"},"content":"`2) Fiona`\u003cbr\u003e"},{"lineNumber":108,"author":{"gitId":"BigDoot"},"content":"`3) Lord Farquaad`\u003cbr\u003e"},{"lineNumber":109,"author":{"gitId":"BigDoot"},"content":"`4) Donkey`\u003cbr\u003e"},{"lineNumber":110,"author":{"gitId":"BigDoot"},"content":"`5) Onions`\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"BigDoot"},"content":"`6) Dragon`"},{"lineNumber":112,"author":{"gitId":"BigDoot"},"content":""},{"lineNumber":113,"author":{"gitId":"BigDoot"},"content":"### Editing a client contact[Coming soon] : `edit`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"Edits an existing person in the address book."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":122,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":123,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":128,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"BigDoot"},"content":"### Locating persons by name[Coming soon] : `find`"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":139,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":141,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"BigDoot"},"content":"### Deleting a person[Coming soon] : `delete`"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":155,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":156,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":159,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book."},{"lineNumber":160,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"BigDoot"},"content":"### Clearing all entries[Coming soon] : `clear`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"BigDoot"},"content":"### Exiting the program[Coming soon] : `exit`"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"BigDoot"},"content":"Client contact data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"BigDoot"},"content":"Client contact data is saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":183,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run."},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":191,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":198,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":199,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":200,"author":{"gitId":"BigDoot"},"content":"**Add** | `add n/Name p/phoneNumber a/Age l/Location` \u003cbr\u003e e.g., `add /nShrek p/66666666 a/69 l/Swamp`"},{"lineNumber":201,"author":{"gitId":"BigDoot"},"content":"**Delete** | `delete Name`\u003cbr\u003e e.g., `delete Lord Farquaad`"},{"lineNumber":202,"author":{"gitId":"BigDoot"},"content":"**List** | `list`"},{"lineNumber":203,"author":{"gitId":"BigDoot"},"content":""}],"authorContributionMap":{"BigDoot":49,"-":154}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.storage.DriveStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"        //run google drive setup"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"        DriveStorage.run();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"            if (addressBookOptional.isEmpty()) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":127,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":5,"-":182}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command! DocBob doesn\u0027t understand you bro.\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to DocBob. \\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";"},{"lineNumber":37,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in DocBob!\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":3,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"BigDoot"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Hey Doc, here are your patients!\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"BigDoot"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitId":"BigDoot"},"content":"            + \": Shows a list of all your saved patient contacts.\\n\""},{"lineNumber":19,"author":{"gitId":"BigDoot"},"content":"            + \"Parameters: None\\n\""},{"lineNumber":20,"author":{"gitId":"BigDoot"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":5,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/medical/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.logic.commands.medical;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"public class AddAppointmentCommand extends Command {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public static final String COMMAND_WORD \u003d \"appt\";"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment with a patient \""},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            + \"by the index number used in the displayed person list. \\n\""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \\n\" + Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"            + \"\\n Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DATE + \"24051800\";"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment added: %s\";"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    private final LocalDateTime date;"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"     * @param date  details to edit the person with"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    public AddAppointmentCommand(Index index, LocalDateTime date) {"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(index);"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(date);"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        this.index \u003d index;"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"        Person person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        Appointment appt \u003d new Appointment(person, date);"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        Person editedPerson \u003d createPersonWithAppointment(person, appt);"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"        model.setPerson(person, editedPerson);"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, appt));"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"    private static Person createPersonWithAppointment(Person personToEdit, Appointment appt) {"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"        // copy everything"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"        Person p \u003d new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"        p.addAppointment(appt);"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"        return p;"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":86}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.medical.AddAppointmentCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.medical.AddAppointmentCommandParser;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":5,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.DateTimeException;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_INVALID_DATE_NUMBER \u003d \"Date should contain only valid integers.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":130,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"nicholasnge"},"content":"     * Parses {@code String unsortedDate} into a {@code LocalDateTime}."},{"lineNumber":132,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"nicholasnge"},"content":"    public static LocalDateTime parseDate(String unsortedDate) throws ParseException {"},{"lineNumber":134,"author":{"gitId":"nicholasnge"},"content":"        LocalDateTime date;"},{"lineNumber":135,"author":{"gitId":"nicholasnge"},"content":"        if (unsortedDate.length() \u003d\u003d 12) { // following the format DDMMYYYYhhmm"},{"lineNumber":136,"author":{"gitId":"nicholasnge"},"content":"            try {"},{"lineNumber":137,"author":{"gitId":"nicholasnge"},"content":"                int day \u003d Integer.parseInt(unsortedDate.substring(0, 2));"},{"lineNumber":138,"author":{"gitId":"nicholasnge"},"content":"                int month \u003d Integer.parseInt(unsortedDate.substring(2, 4));"},{"lineNumber":139,"author":{"gitId":"nicholasnge"},"content":"                int year \u003d Integer.parseInt(unsortedDate.substring(4, 8));"},{"lineNumber":140,"author":{"gitId":"nicholasnge"},"content":"                int hour \u003d Integer.parseInt(unsortedDate.substring(8, 10));"},{"lineNumber":141,"author":{"gitId":"nicholasnge"},"content":"                int min \u003d Integer.parseInt(unsortedDate.substring(10, 12));"},{"lineNumber":142,"author":{"gitId":"nicholasnge"},"content":"                date \u003d LocalDateTime.of(year, month, day, hour, min);"},{"lineNumber":143,"author":{"gitId":"nicholasnge"},"content":"            } catch (NumberFormatException | DateTimeException e) {"},{"lineNumber":144,"author":{"gitId":"nicholasnge"},"content":"                throw new ParseException(MESSAGE_INVALID_DATE_NUMBER);"},{"lineNumber":145,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"nicholasnge"},"content":"        } else if (unsortedDate.length() \u003d\u003d 8) { // following the format DDMMhhmm"},{"lineNumber":147,"author":{"gitId":"nicholasnge"},"content":"            try {"},{"lineNumber":148,"author":{"gitId":"nicholasnge"},"content":"                int day \u003d Integer.parseInt(unsortedDate.substring(0, 2));"},{"lineNumber":149,"author":{"gitId":"nicholasnge"},"content":"                int month \u003d Integer.parseInt(unsortedDate.substring(2, 4));"},{"lineNumber":150,"author":{"gitId":"nicholasnge"},"content":"                int hour \u003d Integer.parseInt(unsortedDate.substring(4, 6));"},{"lineNumber":151,"author":{"gitId":"nicholasnge"},"content":"                int min \u003d Integer.parseInt(unsortedDate.substring(6, 8));"},{"lineNumber":152,"author":{"gitId":"nicholasnge"},"content":"                date \u003d LocalDateTime.of(LocalDateTime.now().getYear(), month, day, hour, min);"},{"lineNumber":153,"author":{"gitId":"nicholasnge"},"content":"            } catch (NumberFormatException | DateTimeException e) {"},{"lineNumber":154,"author":{"gitId":"nicholasnge"},"content":"                throw new ParseException(MESSAGE_INVALID_DATE_NUMBER);"},{"lineNumber":155,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":156,"author":{"gitId":"nicholasnge"},"content":"        } else {"},{"lineNumber":157,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT);"},{"lineNumber":158,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"nicholasnge"},"content":"        if (date.isBefore(LocalDateTime.now())) {"},{"lineNumber":160,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS_MIN_DATE);"},{"lineNumber":161,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"nicholasnge"},"content":"        return date;"},{"lineNumber":163,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":40,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/medical/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.logic.parser.medical;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.commands.medical.AddAppointmentCommand;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        LocalDateTime date;"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE), pe);"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"index: \" + index.toString());"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"prefix date: \" + date.toString());"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        return new AddAppointmentCommand(index, date);"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":60}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    Path getSettingsFilePath();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":1,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":18,"author":{"gitId":"BigDoot"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"docBob.json\");"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    private Path settingsFilePath \u003d Paths.get(\"data\" , \"settings.json\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        setSettingsFilePath(newUserPrefs.getSettingsFilePath());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"    public Path getSettingsFilePath() {"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return settingsFilePath;"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    private void setSettingsFilePath(Path settingsFilePath) {"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        requireNonNull(settingsFilePath);"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"        this.settingsFilePath \u003d settingsFilePath;"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"        sb.append(\"\\nLocal settings file location : \" + settingsFilePath);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"nicholasnge":13,"-":87}},{"path":"src/main/java/seedu/address/model/medical/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_DISPLAY;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":" * Represents a Appointment of a Patient."},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"public class Appointment {"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_CONSTRAINTS_MIN_DATE \u003d \"Date must be in the future\";"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_CONSTRAINTS_DATE_FORMAT \u003d \"Date format: \""},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"            + \"DDMMYYYYhhmm or DDMMhhmm. If the year is omitted, the current year is\""},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"            + \"assumed.\";"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private Person person;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    private String zoomMeetingUrl;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    private LocalDateTime date;"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    public Appointment(Person person, LocalDateTime date) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        this.person \u003d person;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    public Appointment(LocalDateTime date) {"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    public Person getPerson() {"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        return person;"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    public String getZoomMeetingUrl() {"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        return zoomMeetingUrl;"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"    public LocalDateTime getDate() {"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        return date;"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        return person.hashCode() + date.hashCode();"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return getDateDisplay() + \" - \" + person.getName();"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    // for storage into JSON"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"    public String getDateStorage() {"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_STORAGE);"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"    // for displaying, doesnt have year"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"    public String getDateDisplay() {"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_DISPLAY);"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":70}},{"path":"src/main/java/seedu/address/model/medical/DateFormat.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"public class DateFormat {"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    public static final DateTimeFormatter DATE_FORMAT_STORAGE \u003d"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"            new DateTimeFormatterBuilder().appendPattern(\"d/M/yy H:mm\")"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"            .toFormatter();"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    public static final DateTimeFormatter DATE_FORMAT_DISPLAY \u003d"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"            new DateTimeFormatterBuilder().appendPattern(\"EEE, dd MMM, HH:mm\")"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"            .toFormatter();"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":20}},{"path":"src/main/java/seedu/address/model/medical/MedicalRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_DISPLAY;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":" * Represents a Appointment of a Patient."},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"public class MedicalRecord {"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    // attributes from appointment"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    private Person person;"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    private LocalDateTime date;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private String zoomMeetingUrl;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    private List\u003cSection\u003e sections;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord(Person person, LocalDateTime date, List\u003cString\u003e sections) {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        this.person \u003d person;"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        this.sections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        for (String section : sections) {"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"            this.sections.add(new Section(section));"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    //TODO REMOVE PERSON FROM MEDICAL RECORD"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord(LocalDateTime date, List\u003cSection\u003e sections) {"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        this.sections \u003d sections;"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord(Appointment appointment, List\u003cString\u003e sections) {"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        this.person \u003d appointment.getPerson();"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        this.date \u003d appointment.getDate();"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        this.zoomMeetingUrl \u003d appointment.getZoomMeetingUrl();"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        this.sections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        for (String section : sections) {"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"            this.sections.add(new Section(section));"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"    public Person getPerson() {"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return person;"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    public LocalDateTime getDate() {"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        return date;"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"    public String getZoomMeetingUrl() {"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        return zoomMeetingUrl;"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"    public List\u003cSection\u003e getSections() { return Collections.unmodifiableList(sections); }"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"    // for storage into JSON"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"    public String getDateStorage() {"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_STORAGE);"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    // for displaying, doesnt have year"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"    public String getDateDisplay() {"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"        return date.format(DATE_FORMAT_DISPLAY);"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":81}},{"path":"src/main/java/seedu/address/model/medical/Section.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.model.medical;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":" * Represents a Section of a Medical Record."},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":" */"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"public class Section {"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    public static final int MAX_TITLE_LENGTH \u003d 30;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Title must be less than \" + MAX_TITLE_LENGTH + \" characters long\";"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    private String title;"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    private String body;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    public Section(String title) {"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"        new Section(title, \"\");"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    public Section(String title, String body) {"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        this.title \u003d title;"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        this.body \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    public static boolean isValidTitleBody(String title, String body) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        return title.length() \u003c\u003d MAX_TITLE_LENGTH;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    public String getTitle() {"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        return title;"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    public String getBody() {"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        return body;"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":39}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.MedicalRecord;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    // Medical fields"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cMedicalRecord\u003e records \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"    public List\u003cAppointment\u003e getAppointments() {"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"        return Collections.unmodifiableList(appointments);"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"    public List\u003cMedicalRecord\u003e getRecords() {"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"        return Collections.unmodifiableList(records);"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"nicholasnge"},"content":"    public void addAppointment(Appointment appointment) {"},{"lineNumber":140,"author":{"gitId":"nicholasnge"},"content":"        this.appointments.add(appointment);"},{"lineNumber":141,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":143,"author":{"gitId":"nicholasnge"},"content":"    public void addMedicalRecord(MedicalRecord record) {"},{"lineNumber":144,"author":{"gitId":"nicholasnge"},"content":"        this.records.add(record);"},{"lineNumber":145,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":23,"-":123}},{"path":"src/main/java/seedu/address/storage/DriveStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.io.InputStreamReader;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.security.GeneralSecurityException;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.http.javanet.NetHttpTransport;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.Drive;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.DriveScopes;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.model.File;"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"import com.google.api.services.drive.model.FileList;"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"public class DriveStorage {"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    private static final String APPLICATION_NAME \u003d \"Google Drive API Java Quickstart\";"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    private static final String TOKENS_DIRECTORY_PATH \u003d \"tokens\";"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"     * Global instance of the scopes required by this quickstart."},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"     * If modifying these scopes, delete your previously saved tokens/ folder."},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    private static final List\u003cString\u003e SCOPES \u003d Collections.singletonList(DriveScopes.DRIVE_FILE);"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    private static final String CREDENTIALS_FILE_PATH \u003d \"/credentials.json\";"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     * Creates an authorized Credential object."},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     * @param httpTransport The network HTTP Transport."},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     * @return An authorized Credential object."},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"     * @throws IOException If the credentials.json file cannot be found."},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    private static Credential getCredentials(final NetHttpTransport httpTransport) throws IOException {"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        // Load client secrets."},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        InputStream in \u003d DriveStorage.class.getResourceAsStream(CREDENTIALS_FILE_PATH);"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"        if (in \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"            throw new FileNotFoundException(\"Resource not found: \" + CREDENTIALS_FILE_PATH);"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"                httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"                .setAccessType(\"offline\")"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"                .build();"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        LocalServerReceiver receiver \u003d new LocalServerReceiver.Builder().setPort(8888).build();"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"user\");"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"     * Build a new authorized API client service"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"    public static void run() throws IOException, GeneralSecurityException {"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"        // Build a new authorized API client service."},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"        Drive service \u003d new Drive.Builder(httpTransport, JSON_FACTORY, getCredentials(httpTransport))"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"                .build();"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"        // Print the names and IDs for up to 10 files."},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"        FileList result \u003d service.files().list()"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"                .setPageSize(10)"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"                .setFields(\"nextPageToken, files(id, name)\")"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"                .execute();"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"        List\u003cFile\u003e files \u003d result.getFiles();"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"        if (files \u003d\u003d null || files.isEmpty()) {"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(\"No files found.\");"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        } else {"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(\"Files:\");"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"            for (File file : files) {"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"                System.out.printf(\"%s (%s)\\n\", file.getName(), file.getId());"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":87}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"public class JsonAdaptedAppointment {"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    private final String dateString;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    @JsonCreator"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedAppointment(String dateString) {"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"        this.dateString \u003d dateString;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedAppointment(Appointment source) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        dateString \u003d source.getDateStorage();"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    @JsonValue"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    public String getDateString() {"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        return dateString;"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(dateString, DATE_FORMAT_STORAGE);"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"            return new Appointment(date);"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT);"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":51}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"                             @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"                             @JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        if (records !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"            this.records.addAll(records);"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        if (appointments !\u003d null) {"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"            this.appointments.addAll(appointments);"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"        records.addAll(source.getRecords().stream()"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"                .map(JsonAdaptedRecord::new)"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"        appointments.addAll(source.getAppointments().stream()"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"                .map(JsonAdaptedAppointment::new)"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":122,"author":{"gitId":"nicholasnge"},"content":"        Person person \u003d new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"},{"lineNumber":123,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":124,"author":{"gitId":"nicholasnge"},"content":"        // add the appointments"},{"lineNumber":125,"author":{"gitId":"nicholasnge"},"content":"        for (JsonAdaptedAppointment appt : appointments) {"},{"lineNumber":126,"author":{"gitId":"nicholasnge"},"content":"            person.addAppointment(appt.toModelType());"},{"lineNumber":127,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"nicholasnge"},"content":"        // add the medical records"},{"lineNumber":129,"author":{"gitId":"nicholasnge"},"content":"        for (JsonAdaptedRecord rec : records) {"},{"lineNumber":130,"author":{"gitId":"nicholasnge"},"content":"            person.addMedicalRecord(rec.toModelType());"},{"lineNumber":131,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"nicholasnge"},"content":"        return person;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":28,"-":107}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import static seedu.address.model.medical.DateFormat.DATE_FORMAT_STORAGE;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Appointment;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.MedicalRecord;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Section;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"public class JsonAdaptedRecord {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    private final String dateString;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private final List\u003cJsonAdaptedSection\u003e sections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    @JsonCreator"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedRecord(@JsonProperty(\"dateString\") String dateString,"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"                             @JsonProperty(\"sections\") List\u003cJsonAdaptedSection\u003e sections) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        this.dateString \u003d dateString;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        if (sections !\u003d null) {"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"            this.sections.addAll(sections);"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedRecord(MedicalRecord source) {"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        dateString \u003d source.getDateStorage();"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"        sections.addAll(source.getSections().stream()"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"                .map(JsonAdaptedSection::new)"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    public MedicalRecord toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        final LocalDateTime date;"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"            date \u003d LocalDateTime.parse(dateString, DATE_FORMAT_STORAGE);"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS_DATE_FORMAT);"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        final List\u003cSection\u003e recordSections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        for (JsonAdaptedSection section : sections) {"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"            recordSections.add(section.toModelType());"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        return new MedicalRecord(date, recordSections);"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":64}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedSection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.medical.Section;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"public class JsonAdaptedSection {"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    private final String title;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    private final String body;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    @JsonCreator"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedSection(@JsonProperty(\"title\") String title, @JsonProperty(\"body\") String body) {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        this.title \u003d title;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"        this.body \u003d body;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public JsonAdaptedSection(Section source) {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        title \u003d source.getTitle();"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        body \u003d source.getBody();"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    @JsonValue"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    public String getTitle() {"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        return title;"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    @JsonValue"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public String getBody() {"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        return body;"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    public Section toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        if (!Section.isValidTitleBody(title, body)) {"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        return new Section(title, body);"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":54}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitId":"BigDoot"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"BigDoot"},"content":"    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S2-CS2103T-W12-1/\""},{"lineNumber":23,"author":{"gitId":"BigDoot"},"content":"                                                + \"tp/blob/master/docs/UserGuide.md\";"},{"lineNumber":24,"author":{"gitId":"BigDoot"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the full user guide here: \" + USERGUIDE_URL + \"\\n\";"},{"lineNumber":25,"author":{"gitId":"BigDoot"},"content":"    public static final String COMMANDGUIDE_MESSAGE \u003d AddCommand.MESSAGE_USAGE + \"\\n\\n\" + DeleteCommand.MESSAGE_USAGE"},{"lineNumber":26,"author":{"gitId":"BigDoot"},"content":"                                                        + \"\\n\\n\" + ListCommand.MESSAGE_USAGE + \"\\n\\n\""},{"lineNumber":27,"author":{"gitId":"BigDoot"},"content":"                                                        + HelpCommand.MESSAGE_USAGE + \"\\n\\n\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":45,"author":{"gitId":"BigDoot"},"content":"        helpMessage.setText(HELP_MESSAGE + \"\\n\" + COMMANDGUIDE_MESSAGE);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":11,"-":99}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"BigDoot"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/bob_builder_32.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":88}},{"path":"src/main/resources/credentials.json","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"{\"installed\":{\"client_id\":\"186790329373-iscruru802cr782rnmun7s2i1hln8bac.apps.googleusercontent.com\",\"project_id\":\"quickstart2103-1615307438241\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_secret\":\"Qn1GiIfBnUdMAKTAC-fah0y1\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"]}}"}],"authorContributionMap":{"nicholasnge":1}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"BigDoot"},"content":"         title\u003d\"DocBob\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"BigDoot"},"content":"    \u003cImage url\u003d\"@/images/bob_builder_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"BigDoot":2,"-":58}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"BigDoot"},"content":"  \"addressBookFilePath\" : \"docBob.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"BigDoot"},"content":"  \"addressBookFilePath\" : \"docBob.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":10}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":12,"author":{"gitId":"BigDoot"},"content":"        assertNotNull(AppUtil.getImage(\"/images/bob_builder_32.png\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":35}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":47,"author":{"gitId":"BigDoot"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"docBob.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":161}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"//import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"//import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"//import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"//    }"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"//"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":"//    @Test"},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":"//    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":105,"author":{"gitId":"nicholasnge"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":106,"author":{"gitId":"nicholasnge"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":107,"author":{"gitId":"nicholasnge"},"content":"//        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":108,"author":{"gitId":"nicholasnge"},"content":"//    }"}],"authorContributionMap":{"nicholasnge":76,"-":32}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"BigDoot"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"docBob.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"BigDoot":1,"-":122}}]
