[{"path":".github/check-eof-newline.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":"#!/bin/bash"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# Checks that all text files end with a newline."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"ret\u003d0"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":8,"author":{"gitId":"-"},"content":"IFS\u003d\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    if [ `basename $filename` \u003d \"keystore\" ]; then"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        continue"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    fi"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        ret\u003d1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":"done"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"exit $ret"}],"authorContributionMap":{"-":18,"jay9645":5}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-2/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"* This is a **Software Engineering (SE) project by students**, which aims to **help insurance agents manage their huge numbers of clients through a desktop application** (called _ClientBook_)."},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"* Example usages:"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"  * Insurance agents can easily manage (_add_, _search_, _edit_, _delete_) their client\u0027s contacts in this application."},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"  * Insurance agents can add remarks or notes about things they need to remember about a particular client."},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"  * Insurance agents can include clients\u0027 portfolio ID in their clients\u0027 contact profile too."},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"* For the detailed documentation of this application, see our **[User Guide](https://ay2021s2-cs2103t-w15-2.github.io/tp/UserGuide.html)**."},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"* For the detailed documentation of this project, see our **[Developer Guide](https://ay2021s2-cs2103t-w15-2.github.io/tp/DeveloperGuide.html)**."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"* The project simulates an ongoing software project for a desktop application."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"**1. zip4j**"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"Used to implement the password protection of ClientBook."},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""}],"authorContributionMap":{"-":5,"jlxw48":10,"jay9645":8}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"    //zip4j used to create/unzip a password protected zip containing the data .json file."},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"    implementation group: \u0027net.lingala.zip4j\u0027, name: \u0027zip4j\u0027, version: \u00272.7.0\u0027"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"-":72,"jay9645":2}},{"path":"config/travis/check-eof-newline.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":"#!/bin/bash"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# Checks that all text files end with a newline."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"ret\u003d0"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":8,"author":{"gitId":"-"},"content":"IFS\u003d\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    if [ `basename $filename` \u003d \"keystore\" ]; then"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        continue"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    fi"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        ret\u003d1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":"done"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"exit $ret"}],"authorContributionMap":{"-":18,"jay9645":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"### Jason Tay"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"\u003cimg src\u003d\"images/jay9645.png\" width\u003d\"200px\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"[[github](https://github.com/jay9645)]"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"* Role: Developer"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"### Jeremy Lee"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"\u003cimg src\u003d\"images/jlxw48.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"[[github](http://github.com/jlxw48)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"* Role: Developer"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* Responsibilities: UI"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"### Ng Boon Hong"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"\u003cimg src\u003d\"images/nbh99.png\" width\u003d\"200px\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"[[github](http://github.com/NBH99)]"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* Responsibilities: Data"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"### Swa Yong Shen"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"\u003cimg src\u003d\"images/swayongshen.png\" width\u003d\"200px\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"[[github](http://github.com/swayongshen)]"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"### Wong Kok Ian"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"\u003cimg src\u003d\"images/wongkokian.png\" width\u003d\"200px\"\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"[[github](http://github.com/wongkokian)]"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Responsibilities: UI"}],"authorContributionMap":{"-":35,"jay9645":17}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"NBH99"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"NBH99"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"NBH99"},"content":"[`Ui.java`](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"NBH99"},"content":"[`Logic.java`](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"NBH99"},"content":"**API** : [`Model.java`](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"NBH99"},"content":"**API** : [`Storage.java`](https://github.com/AY2021S2-CS2103T-W15-2/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":244,"author":{"gitId":"NBH99"},"content":"* tech-savvy insurance agents"},{"lineNumber":245,"author":{"gitId":"NBH99"},"content":"* have to manage large number of client related information"},{"lineNumber":246,"author":{"gitId":"NBH99"},"content":"* mainly use laptops on the go"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"NBH99"},"content":"**Value proposition**:"},{"lineNumber":249,"author":{"gitId":"NBH99"},"content":"* manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":250,"author":{"gitId":"NBH99"},"content":"* a central avenue to store information about their clients"},{"lineNumber":251,"author":{"gitId":"NBH99"},"content":"* typing-based easier to use than the trackpads"},{"lineNumber":252,"author":{"gitId":"NBH99"},"content":"* do not allow the user to insert attachments or group policies in our application."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"},{"lineNumber":259,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":261,"author":{"gitId":"NBH99"},"content":"| `* * *`  | user                                       | add a new client               |                                                                        |"},{"lineNumber":262,"author":{"gitId":"NBH99"},"content":"| `* * *`  | user                                       | delete a client                | remove entries that I no longer need                                   |"},{"lineNumber":263,"author":{"gitId":"NBH99"},"content":"| `* * *`  | user                                       | find a client by name          | locate details of clients without having to go through the entire list |"},{"lineNumber":264,"author":{"gitId":"NBH99"},"content":"| `* * *`  | forgetful user                             | store many clients details     | remember them easily                                                   |"},{"lineNumber":265,"author":{"gitId":"NBH99"},"content":"| `* * *`  | first time user                            | find out how to use ClientBook | familiarise myself with the app                                        |"},{"lineNumber":266,"author":{"gitId":"jay9645"},"content":"| `* * *`  | insurance agent                            | filter clients by details      | find my clients who share the same insurance policy                   |"},{"lineNumber":267,"author":{"gitId":"NBH99"},"content":"| `* * *`  | insurance agent                            | link contact to portfolio      | access them easily                                                     |"},{"lineNumber":268,"author":{"gitId":"NBH99"},"content":"| `* * *`  | insurance agent                            | edit individual client details | update their particulars if they change                                |"},{"lineNumber":269,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |"},{"lineNumber":270,"author":{"gitId":"NBH99"},"content":"| `* *`    | impatient user                             | access specific client quickly | spend less time searching through my list                              | "},{"lineNumber":271,"author":{"gitId":"NBH99"},"content":"| `* *`    | disorganised user                          | display only properties queried| avoid cluttering the screen with unnecessary information               |"},{"lineNumber":272,"author":{"gitId":"jay9645"},"content":"| `* *`    | insurance agent                            | sort my clients by name        | see my clients in a more organized way                                 |"},{"lineNumber":273,"author":{"gitId":"jay9645"},"content":"| `* *`    | impatient user                             | access specific client quickly | spend less time searching through my list                              |"},{"lineNumber":274,"author":{"gitId":"jay9645"},"content":"| `* *`    | disorganised user                          | display only properties queried| avoid cluttering the screen with unnecessary information"},{"lineNumber":275,"author":{"gitId":"jay9645"},"content":"| `* *`    | insurance agent on the go                  | lock Clientbook with a password| prevent the leakage of my clients\u0027 information"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"NBH99"},"content":"(For all use cases below, the **System** is the `ClientBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"NBH99"},"content":"**Use case: Delete a client**"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"NBH99"},"content":"1.  User requests to list clients"},{"lineNumber":288,"author":{"gitId":"NBH99"},"content":"2.  ClientBook shows a list of clients"},{"lineNumber":289,"author":{"gitId":"NBH99"},"content":"3.  User requests to delete a specific client in the list"},{"lineNumber":290,"author":{"gitId":"NBH99"},"content":"4.  ClientBook deletes the client"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"NBH99"},"content":"    * 3a1. ClientBook shows an error message."},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"NBH99"},"content":"      Use case resumes at step 3."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"NBH99"},"content":"**Use case: Add a client**"},{"lineNumber":307,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":308,"author":{"gitId":"NBH99"},"content":"**MSS**"},{"lineNumber":309,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":310,"author":{"gitId":"NBH99"},"content":"1.  User requests to add a client"},{"lineNumber":311,"author":{"gitId":"NBH99"},"content":"2.  ClientBook adds the client."},{"lineNumber":312,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":313,"author":{"gitId":"NBH99"},"content":"    Use case ends."},{"lineNumber":314,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":315,"author":{"gitId":"NBH99"},"content":"**Extensions**"},{"lineNumber":316,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":317,"author":{"gitId":"NBH99"},"content":"* 1a. The user input does not follow the format required."},{"lineNumber":318,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":319,"author":{"gitId":"NBH99"},"content":"  * 1a1. ClientBook shows an error message."},{"lineNumber":320,"author":{"gitId":"NBH99"},"content":"    "},{"lineNumber":321,"author":{"gitId":"NBH99"},"content":"    Use case resumes at step 1."},{"lineNumber":322,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":323,"author":{"gitId":"NBH99"},"content":"**Use case: List all clients**"},{"lineNumber":324,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":325,"author":{"gitId":"NBH99"},"content":"**MSS**"},{"lineNumber":326,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":327,"author":{"gitId":"NBH99"},"content":"1.  User requests to list clients"},{"lineNumber":328,"author":{"gitId":"NBH99"},"content":"2.  ClientBook shows a list of clients"},{"lineNumber":329,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":330,"author":{"gitId":"NBH99"},"content":"    Use case ends."},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"NBH99"},"content":"**Extensions**"},{"lineNumber":333,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":334,"author":{"gitId":"NBH99"},"content":"* 2a. The list is empty."},{"lineNumber":335,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":336,"author":{"gitId":"NBH99"},"content":"  Use case ends."},{"lineNumber":337,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":338,"author":{"gitId":"NBH99"},"content":"**Use case: Edit a client**"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"NBH99"},"content":"1.  User requests to list clients"},{"lineNumber":343,"author":{"gitId":"NBH99"},"content":"2.  ClientBook shows a list of clients"},{"lineNumber":344,"author":{"gitId":"NBH99"},"content":"3.  User requests to edit a specific client in the list"},{"lineNumber":345,"author":{"gitId":"NBH99"},"content":"4.  ClientBook edits the client"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"NBH99"},"content":"    * 3a1. ClientBook shows an error message."},{"lineNumber":358,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":359,"author":{"gitId":"NBH99"},"content":"      Use case resumes at step 3."},{"lineNumber":360,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":361,"author":{"gitId":"NBH99"},"content":"**Use case: Find a client**"},{"lineNumber":362,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":363,"author":{"gitId":"NBH99"},"content":"**MSS**"},{"lineNumber":364,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":365,"author":{"gitId":"NBH99"},"content":"1.  User requests to find clients with keywords"},{"lineNumber":366,"author":{"gitId":"NBH99"},"content":"2.  ClientBook shows a list of clients that matches keywords"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"NBH99"},"content":"    Use case ends."},{"lineNumber":369,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":370,"author":{"gitId":"NBH99"},"content":"**Extensions**"},{"lineNumber":371,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":372,"author":{"gitId":"NBH99"},"content":"* 2a. The list of matched clients is empty."},{"lineNumber":373,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":374,"author":{"gitId":"NBH99"},"content":"  Use case ends."},{"lineNumber":375,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":376,"author":{"gitId":"NBH99"},"content":"**Use case: Filter list of clients**"},{"lineNumber":377,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":378,"author":{"gitId":"NBH99"},"content":"**MSS**"},{"lineNumber":379,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":380,"author":{"gitId":"NBH99"},"content":"1.  User requests to filter clients with details"},{"lineNumber":381,"author":{"gitId":"NBH99"},"content":"2.  ClientBook shows a list of clients that matches details"},{"lineNumber":382,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":383,"author":{"gitId":"NBH99"},"content":"    Use case ends."},{"lineNumber":384,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":385,"author":{"gitId":"NBH99"},"content":"**Extensions**"},{"lineNumber":386,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":387,"author":{"gitId":"NBH99"},"content":"* 2a. The list of matched clients is empty."},{"lineNumber":388,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":389,"author":{"gitId":"NBH99"},"content":"  Use case ends."},{"lineNumber":390,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":391,"author":{"gitId":"jay9645"},"content":"**Use case: Sort list of clients**"},{"lineNumber":392,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":393,"author":{"gitId":"jay9645"},"content":"**MSS**"},{"lineNumber":394,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":395,"author":{"gitId":"jay9645"},"content":"1.  User requests to sort clients with the specified direction"},{"lineNumber":396,"author":{"gitId":"jay9645"},"content":"2.  ClientBook shows the sorted list of clients."},{"lineNumber":397,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":398,"author":{"gitId":"jay9645"},"content":"    Use case ends."},{"lineNumber":399,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":400,"author":{"gitId":"jay9645"},"content":"**Extensions**"},{"lineNumber":401,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":402,"author":{"gitId":"jay9645"},"content":"* 2a. The list of matched clients is empty."},{"lineNumber":403,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":404,"author":{"gitId":"jay9645"},"content":"  Use case ends."},{"lineNumber":405,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":406,"author":{"gitId":"jay9645"},"content":"**Use case: Lock ClientBook**"},{"lineNumber":407,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":408,"author":{"gitId":"jay9645"},"content":"**MSS**"},{"lineNumber":409,"author":{"gitId":"jay9645"},"content":"1. User requests to lock ClientBook."},{"lineNumber":410,"author":{"gitId":"jay9645"},"content":"2. ClientBook is locked."},{"lineNumber":411,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":412,"author":{"gitId":"jay9645"},"content":"    Use case ends."},{"lineNumber":413,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":414,"author":{"gitId":"jay9645"},"content":"**Extensions**"},{"lineNumber":415,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":416,"author":{"gitId":"jay9645"},"content":"* 1a. ClientBook is already locked but user did not enter the current password."},{"lineNumber":417,"author":{"gitId":"jay9645"},"content":"    * 1a1. ClientBook shows an error message. Use case resumes at step 1."},{"lineNumber":418,"author":{"gitId":"jay9645"},"content":"* 1b. ClientBook is already locked and user entered the incorrect current password."},{"lineNumber":419,"author":{"gitId":"jay9645"},"content":"    * 1b1. ClientBook shows an error message. Use case resumes at step 1."},{"lineNumber":420,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":421,"author":{"gitId":"jay9645"},"content":"**Use case: Unlock ClientBook**"},{"lineNumber":422,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":423,"author":{"gitId":"jay9645"},"content":"**MSS**"},{"lineNumber":424,"author":{"gitId":"jay9645"},"content":"1. User requests to unlock ClientBook."},{"lineNumber":425,"author":{"gitId":"jay9645"},"content":"2. ClientBook is unlocked."},{"lineNumber":426,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":427,"author":{"gitId":"jay9645"},"content":"    Use case ends."},{"lineNumber":428,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":429,"author":{"gitId":"jay9645"},"content":"**Extensions**"},{"lineNumber":430,"author":{"gitId":"jay9645"},"content":"* 1a. User enters the incorrect current password that is used to lock ClientBook."},{"lineNumber":431,"author":{"gitId":"jay9645"},"content":"    * 1a1. ClientBook shows an error message. Use case resumes at step 1."},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":438,"author":{"gitId":"NBH99"},"content":"2.  Should be able to hold up to 1000 clients without a noticeable sluggishness in performance for typical usage."},{"lineNumber":439,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":440,"author":{"gitId":"NBH99"},"content":"4.  Should be able to have the client information stored in a file that can easily transfer/share between computers"},{"lineNumber":441,"author":{"gitId":"NBH99"},"content":"5.  Should be able to use ClientBook even if there is no internet around the vicinity."},{"lineNumber":442,"author":{"gitId":"NBH99"},"content":"6.  Should be able to have ClientBook stay on for a long period of time."},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":449,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":458,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":475,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":486,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":489,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":492,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"NBH99":104,"-":352,"jay9645":46}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"ClientBook is a desktop app for managing client contacts, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ClientBook can get your client management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"1. Download the latest `clientbook.jar`. (A release will be coming out soon)"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your ClientBook."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"   * **`add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 i/Policy_1022`** : Adds a client named `John Doe` to the ClientBook."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"   * **`delete 3`** : Deletes the 3rd contact shown in the current list."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"1. Refer to the [Features](#features) below for the full list of commands and their descriptions."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"- Viewing help : `help`"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"- Adding a client: `add`"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"- List all clients: `list`"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"- Locating clients by name: `find`"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"- Deleting a client : `delete`"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"- Sorting the list of clients : `sort`"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"- Exiting the program : `exit`"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"- Locking ClientBook: `lock`"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"- Unlocking ClientBook: `unlock`"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"- Saving the data"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"* Words in UPPER_CASE are the parameters to be supplied by the user."},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":" e.g. in `add n/NAME`, NAME is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"* Items in square brackets are optional."},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":" e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"* Items with …​ after them can be used multiple times including zero times."},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":" e.g. `[t/TAG]…​` can be used as   (i.e. 0 times), `t/basic`, `t/basic t/lifeinsurance` etc."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"* Parameters can be in any order."},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":" e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken."},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":" e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `exit` and `clear`) will be ignored."},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":" e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"Adds a client to ClientBook."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [i/POLICY_ID[\u003ePOLICY_URL]] [t/TAG]…​`"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"A person can have any number of tags and insurance policies (including 0)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":"* It is perfectly fine to not include the URL to the insurance policy document!"},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"* To include the URL, remember to use \u0027\u003e\u0027 to indicate that a particular insurance policy is linked to a URL, as shown in the second example below."},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"* (example of a client with insurance policy but no URL)`add n/John Doe p/98765432 e/johnd@example.com a/Orchard i/Policy_1273 t/basic`"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"* (example of a client with insurance policy and URL)`add n/Tom Tan p/91234567 e/tomt@example.com a/Orchard i/Policy_1274\u003ewww.myinsurancecompany.com/policy_1274 t/basic`"},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"* (example with no insurance policy and no tag)`add n/Betsy Crowe e/betsycrowe@example.com a/Kent Ridge`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":"### Listing all persons : `list [-ATTRIBUTE]`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":"Shows a list of all clients in ClientBook. An optional attribute option can be added to show a list with only the specified attribute."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"jay9645"},"content":"Format: `list [-ATTRIBUTE]`"},{"lineNumber":110,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":111,"author":{"gitId":"jay9645"},"content":"Examples: "},{"lineNumber":112,"author":{"gitId":"jay9645"},"content":"* `list` Shows a list of all clients and all their information"},{"lineNumber":113,"author":{"gitId":"jay9645"},"content":"* `list -policy` Shows a list of all clients and their policy number"},{"lineNumber":114,"author":{"gitId":"jay9645"},"content":"* `list -phone` Shows a list of all clients and their phone number"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"jay9645"},"content":"Edits an existing client in the ClientBook."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"jay9645"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [i/POLICY_NUMBER] [t/TAG]…​`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"jay9645"},"content":"* Edits the client at the specified INDEX. The index refers to the index number shown in the displayed client list. The index must be a positive integer 1, 2, 3, …​"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":125,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":129,"author":{"gitId":"jay9645"},"content":"*  `edit 2 n/Betsy Crower` Edits the name of the 2nd person to be `Betsy Crower`."},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"jay9645"},"content":"Finds and displays all clients whose field (name, phone, email, address, tags, insurance policy) contains any of the given keywords."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"jay9645"},"content":"![without policy URL](images/find_alex_david.png)"},{"lineNumber":136,"author":{"gitId":"jay9645"},"content":"![without policy URL](images/find_alex_\u0026_david.png)"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"jay9645"},"content":"Format: `find FLAG/KEYWORD [\u0026 MORE_KEYWORDS]`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"jay9645"},"content":"* The search is case-insensitive. e.g hans will match Hans."},{"lineNumber":141,"author":{"gitId":"jay9645"},"content":"* The order of the keywords does not matter."},{"lineNumber":142,"author":{"gitId":"jay9645"},"content":"* Only one `FLAG` can be used in each find command."},{"lineNumber":143,"author":{"gitId":"jay9645"},"content":"* The `FLAG` can only be from: `n`, `p`, `e`, `a`, `t` and `i`, representing name, phone, email, address, tags and insurance policies respectively."},{"lineNumber":144,"author":{"gitId":"jay9645"},"content":"* The delimiter `\u0026` between keywords is used to search using multiple keywords. e.g. `Aaron \u0026 Tan` will return all persons with either `Aaron` or `Tan` in their names."},{"lineNumber":145,"author":{"gitId":"jay9645"},"content":"* Without the use of delimiter `\u0026`, all keywords following the `FLAG` will be used in the search. e.g. `Aaron Tan` will only return persons with `Aaron Tan` in their names."},{"lineNumber":146,"author":{"gitId":"jay9645"},"content":"* Clients whose chosen field contains at least one keyword will be returned (i.e. OR search). e.g. Hans \u0026 Bo will return Hans Sum, Bo Yang."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":150,"author":{"gitId":"jay9645"},"content":"* `find n/John` returns `john` and `John Doe`"},{"lineNumber":151,"author":{"gitId":"jay9645"},"content":"* `find n/alex david` returns `Alex David`"},{"lineNumber":152,"author":{"gitId":"jay9645"},"content":"* `find n/alex \u0026 david` returns `Alex Yeoh`, `David Li`"},{"lineNumber":153,"author":{"gitId":"jay9645"},"content":"* `find a/orchard` returns `Alex Yeoh` whose address is `Orchard Road`\u003cbr\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"jay9645"},"content":"Deletes the specified client from ClientBook after listing or finding contacts."},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"jay9645"},"content":"* Deletes the client at the specified `INDEX`."},{"lineNumber":162,"author":{"gitId":"jay9645"},"content":"* The index refers to the index number shown in the displayed client list."},{"lineNumber":163,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book."},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":"### Viewing a contact\u0027s policies: `policy`"},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"Launches a popup window to show all the policies associated with the selected contact, if the selected contact has any policies."},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":173,"author":{"gitId":"jay9645"},"content":"![without policy URL](images/without_policy_URL.png)"},{"lineNumber":174,"author":{"gitId":"jay9645"},"content":"![with policy URL](images/with_policy_URL.png)"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"jay9645"},"content":"Format: `policy INDEX`"},{"lineNumber":177,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":178,"author":{"gitId":"jay9645"},"content":"* Selects the client at the specified `INDEX`."},{"lineNumber":179,"author":{"gitId":"jay9645"},"content":"* The index refers to the index number shown in the displayed client list."},{"lineNumber":180,"author":{"gitId":"jay9645"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":181,"author":{"gitId":"jay9645"},"content":"* Policy ID cannot contain \u0027\u003e\u0027 character!"},{"lineNumber":182,"author":{"gitId":"jay9645"},"content":"* Note that your URLs with should not contain \u0027\u003e\u0027 characters either! They are not valid URLs by the Internet\u0027s definition."},{"lineNumber":183,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":184,"author":{"gitId":"jay9645"},"content":"Examples:"},{"lineNumber":185,"author":{"gitId":"jay9645"},"content":"* `list` followed by `policy 2` displays the policies associated with the 2nd person in the address book."},{"lineNumber":186,"author":{"gitId":"jay9645"},"content":"* `find Betsy` followed by `policy 1` displays the policies associated with the 1st person in the results of the `find` command."},{"lineNumber":187,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":188,"author":{"gitId":"jay9645"},"content":"### Sorting the list of clients : `sort`"},{"lineNumber":189,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":190,"author":{"gitId":"jay9645"},"content":"Sorts the list of clients in ClientBook by their names in alphabetical order."},{"lineNumber":191,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":192,"author":{"gitId":"jay9645"},"content":"Format: `sort DIRECTION`"},{"lineNumber":193,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":194,"author":{"gitId":"jay9645"},"content":"* Sorts the list of clients according the specified `DIRECTION`."},{"lineNumber":195,"author":{"gitId":"jay9645"},"content":"* The specified `DIRECTION` can be `-a` for ascending order or `-d` for descending order."},{"lineNumber":196,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":197,"author":{"gitId":"jay9645"},"content":"Examples:"},{"lineNumber":198,"author":{"gitId":"jay9645"},"content":"* `sort -a` sorts the current list of clients in ascending order."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"jay9645"},"content":"### Locking ClientBook : `lock`"},{"lineNumber":208,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":209,"author":{"gitId":"jay9645"},"content":"Locks ClientBook."},{"lineNumber":210,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":211,"author":{"gitId":"jay9645"},"content":"Format: `lock [CURRENT_PASSWORD] [NEW_PASSWORD]`"},{"lineNumber":212,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":213,"author":{"gitId":"jay9645"},"content":"* Verifies the current password before locking ClientBook with the new password."},{"lineNumber":214,"author":{"gitId":"jay9645"},"content":"* The `CURRENT_PASSWORD` field can be omitted if ClientBook is not yet locked."},{"lineNumber":215,"author":{"gitId":"jay9645"},"content":"* When `CURRENT_PASSWORD` and `NEW_PASSWORD` fields are both omitted, ClientBook will attempt to lock itself using the last used password that is safely stored on your device."},{"lineNumber":216,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":217,"author":{"gitId":"jay9645"},"content":"### Unlocking ClientBook : `unlock`"},{"lineNumber":218,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":219,"author":{"gitId":"jay9645"},"content":"Unlocks ClientBook."},{"lineNumber":220,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":221,"author":{"gitId":"jay9645"},"content":"Format: `unlock CURRENT_PASSWORD`"},{"lineNumber":222,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":223,"author":{"gitId":"jay9645"},"content":"* Verifies the current password before unlocking ClientBook."},{"lineNumber":224,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":225,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"jay9645"},"content":"ClientBook saves its data in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"jay9645"},"content":"ClientBook saves its data as a JSON file `[JAR file location]/data/clientbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":235,"author":{"gitId":"jay9645"},"content":"If your changes to the data file makes its format invalid, ClientBook will discard all data and start with an empty data file at the next run."},{"lineNumber":236,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":247,"author":{"gitId":"jay9645"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ClientBook home folder."},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":254,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":255,"author":{"gitId":"jay9645"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [i/POLICY_ID] [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 i/Policy_1023 t/premium t/lifeinsurance`"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":257,"author":{"gitId":"jay9645"},"content":"**Policy** | `policy INDEX`\u003cbr\u003e e.g., `policy 4`"},{"lineNumber":258,"author":{"gitId":"jay9645"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [i/POLICY_NUMBER] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":259,"author":{"gitId":"jay9645"},"content":"**List** | `list [-ATTRIBUTE]`\u003cbr\u003e e.g., `list -policy`"},{"lineNumber":260,"author":{"gitId":"jay9645"},"content":"**Find** | `find FLAG/KEYWORD [\u0026 MORE_KEYWORDS]`\u003cbr\u003e e.g., `find a/Bedok \u0026 Clementi`"},{"lineNumber":261,"author":{"gitId":"jay9645"},"content":"**Sort** | `sort DIRECTION`"},{"lineNumber":262,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":263,"author":{"gitId":"jay9645"},"content":"**Exit** | `exit`"},{"lineNumber":264,"author":{"gitId":"jay9645"},"content":"**Lock** | `lock [CURRENT_PASSWORD] NEW_PASSWORD`"},{"lineNumber":265,"author":{"gitId":"jay9645"},"content":"**Unlock** | `unlock [CURRENT_PASSWORD]`"}],"authorContributionMap":{"-":134,"jay9645":131}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface ObservableList \u003c\u003cInterface\u003e\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ReadOnlyAddressBook"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Package Person {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Person"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Address"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Email"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Name"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Phone"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Class UniquePersonList"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Package Tag {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Class Tag"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"Package InsurancePolicy {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"Class InsurancePolicy"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF"},{"lineNumber":37,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Model .right.\u003e ObservableList"},{"lineNumber":43,"author":{"gitId":"-"},"content":"ModelManager o--\u003e \"1\" AddressBook"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ModelManager o-left-\u003e \"1\" UserPrefs"},{"lineNumber":45,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList"},{"lineNumber":48,"author":{"gitId":"-"},"content":"UniquePersonList o--\u003e \"*\" Person"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Person *--\u003e Name"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Person *--\u003e Phone"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Person *--\u003e Email"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Person *--\u003e Address"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"Person *--\u003e \"*\" InsurancePolicy"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"ModelManager -----\u003e\" ~* filtered list\" Person"},{"lineNumber":61,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"swayongshen":5,"-":56}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class StorageManager"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"Class Authentication"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"StorageManager .left.|\u003e Storage"},{"lineNumber":17,"author":{"gitId":"-"},"content":"StorageManager o-right-\u003e UserPrefsStorage"},{"lineNumber":18,"author":{"gitId":"-"},"content":"StorageManager o--\u003e AddressBookStorage"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"},{"lineNumber":21,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .left.|\u003e AddressBookStorage"},{"lineNumber":22,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"},{"lineNumber":23,"author":{"gitId":"-"},"content":"JsonSerializableAddressBookStorage .right.\u003e JsonSerializablePerson"},{"lineNumber":24,"author":{"gitId":"-"},"content":"JsonSerializablePerson .right.\u003e JsonAdaptedTag"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"JsonSerializablePerson .up.\u003e JsonAdaptedInsurancePolicy"},{"lineNumber":26,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"-":24,"jay9645":2}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"title: ClientBook"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W15-2/tp/actions)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"**ClientBook is a desktop application for managing your clients\u0027 contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"* If you are interested in using ClientBook, head over to the [**User Guide**](UserGuide.html)."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"* If you are interested about developing ClientBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":14,"jlxw48":5}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":37,"author":{"gitId":"-"},"content":" */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        Authentication authentication \u003d new Authentication(userPrefs.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        if (authentication.isExistsZip()) {"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"            //Delay for 1 second so that password prompt will be last message in terminal."},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"            Thread.sleep(2000);"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"            authentication.unlock();"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"        authentication.setShutDownHook();"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"        model \u003d initModelManager(storage, userPrefs, authentication);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, Authentication authentication) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"        return new ModelManager(initialData, userPrefs, authentication);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":134,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":162,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":180,"jay9645":14}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"     * Counts how many times the substring appears in the larger string."},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"     * Note that the code only counts non-overlapping matches."},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"     * A {@code null} or empty (\"\") String input returns {@code 0}."},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(null, *)       \u003d 0"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"\", *)         \u003d 0"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"abba\", null)  \u003d 0"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"abba\", \"\")    \u003d 0"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"abba\", \"a\")   \u003d 2"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"abba\", \"ab\")  \u003d 1"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"abba\", \"xxx\") \u003d 0"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"     * StringUtil.countMatches(\"ababa\", \"aba\") \u003d 1"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"     * \u003c/pre\u003e"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"     * @param string  the String to check, may be null"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"     * @param substring  the substring to count, may be null"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"     * @return the number of occurrences, 0 if either String is {@code null}"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"    public static int countMatches(String string, String substring) {"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"        if (string.isEmpty() || substring.isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"            return 0;"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        int count \u003d 0;"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"        int index \u003d 0;"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        while ((index \u003d string.indexOf(substring, index)) !\u003d -1) { // indexOf returns -1 when there are no more matches"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"            count++;"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"            index +\u003d substring.length();"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        return count;"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":68,"jay9645":32}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    private boolean isListModified;"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        this.isListModified \u003d false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        if (isListModified) {"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"            model.undoListModification();"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"            if (command instanceof ListCommand \u0026\u0026 ((ListCommand) command).isAttributeSpecified()) {"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"                this.isListModified \u003d true;"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"            } else {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":81,"jay9645":12}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE_POLICY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"            + \"[\" + PREFIX_INSURANCE_POLICY + \"POLICY_ID] \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"            + PREFIX_INSURANCE_POLICY + \"P12345 \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":3,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    /** Policy information should be shown to the user. */"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    private final boolean showPolicies;"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean showPolicies, boolean exit) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        this.showPolicies \u003d showPolicies;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        this(feedbackToUser, false, false, false);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"    public boolean isShowPolicies() {"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        return showPolicies;"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":69,"jay9645":10}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE_POLICY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"            + \"[\" + PREFIX_INSURANCE_POLICY + \" POLICY_ID] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone().get());"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail().get());"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress().get());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"        List\u003cInsurancePolicy\u003e updatedPolicies \u003d editPersonDescriptor.getPolicies().orElse(personToEdit.getPolicies());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedPolicies);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":137,"author":{"gitId":"swayongshen"},"content":"        private List\u003cInsurancePolicy\u003e policies;"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":144,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":151,"author":{"gitId":"swayongshen"},"content":"            setPolicies(toCopy.policies);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":158,"author":{"gitId":"swayongshen"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, policies);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":196,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":205,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"swayongshen"},"content":"        public void setPolicies(List\u003cInsurancePolicy\u003e policies) {"},{"lineNumber":211,"author":{"gitId":"swayongshen"},"content":"            this.policies \u003d policies;"},{"lineNumber":212,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":214,"author":{"gitId":"swayongshen"},"content":"        public Optional\u003cList\u003cInsurancePolicy\u003e\u003e getPolicies() {"},{"lineNumber":215,"author":{"gitId":"swayongshen"},"content":"            return Optional.ofNullable(policies);"},{"lineNumber":216,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":218,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":238,"author":{"gitId":"swayongshen"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":239,"author":{"gitId":"swayongshen"},"content":"                    \u0026\u0026 getPolicies().equals(e.getPolicies());"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":19,"-":220,"jay9645":3}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":18,"jay9645":1}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose chosen field contains any of \""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list\\n\""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"            + \"with index numbers.\\n\""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"            + \"Use a flag (n/, p/, e/, a/, t/, i/) to search by name, phone, email, address, tags or insurance \""},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"            + \"policies respectively.\\n\""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"            + \"Use \u0027\u0026\u0027 to find for multiple search terms.\\n\""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"            + \"Keywords cannot be empty.\\n\""},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"            + \"Parameters: FLAG/KEYWORD [\u0026 MORE_KEYWORDS]...\\n\""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"            + \"Example: \" + COMMAND_WORD + \" e/alice@mail.com \u0026 bob@mail.com\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":40,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":35,"jay9645":14}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":20,"jay9645":1}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":" * Lists all persons in the address book to the user. Attribute can be specified to show only specific attributes."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"            + \": Lists clients, along with specified attributes\\n\""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"            + \"Parameters: -ATTRIBUTE (must be policy, phone or email)\\n\""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"            + \"Example: \" + COMMAND_WORD + \" -policy\";"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    private final Optional\u003cAttribute\u003e attribute;"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"     * @param attribute attribute that list will show"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    public ListCommand(Attribute attribute) {"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        requireNonNull(attribute);"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        this.attribute \u003d Optional.of(attribute);"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    public ListCommand() {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        this.attribute \u003d Optional.empty();"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"    public boolean isAttributeSpecified() {"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"        return this.attribute.isPresent();"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        if (!this.isAttributeSpecified()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"            model.updatePersonListByAttribute(this.attribute.get());"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"            String attributeName \u003d \"\";"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"            switch (this.attribute.get()) {"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"            case EMAIL:"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"                attributeName \u003d \"email\";"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"                break;"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"            case PHONE:"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"                attributeName \u003d \"phone number\";"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"            case POLICY_ID:"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"                attributeName \u003d \"policy Ids\";"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"                break;"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"            case ADDRESS:"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"                attributeName \u003d \"address\";"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"                break;"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"            default:"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"                throw new CommandException(\"Could not list with filtered attribute\");"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"            String attributeSuccessMessage \u003d String.format(\"Listed all clients with %s attribute as filter.\","},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"                    attributeName);"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(attributeSuccessMessage);"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"                || (other instanceof ListCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 attribute.equals(((ListCommand) other).attribute)); // state check"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":21,"jay9645":61}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"public class LockCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"            + \": Locks ClientBook with a password.\\n\""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"            + \"Parameters: CURRENT_PASSWORD(if any) NEW_PASSWORD\\n\""},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"            + \"Example: \" + COMMAND_WORD + \" 12345\";"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_LOCK_SUCCESS_NEW_PASSWORD \u003d \"Locked ClientBook using new password.\";"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_LOCK_SUCCESS_OLD_PASSWORD \u003d \"Locked ClientBook using your previous password.\";"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_LOCK_SUCCESS_UPDATE_PASSWORD \u003d \"Successfully updated the password.\";"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_ALREADY_LOCKED_INCORRECT_PASSWORD \u003d \"ClientBook is already locked, please \""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"            + \"enter the current password\\nand a new password to change the password.\";"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_FAIL_TO_READ_PASSWORD_FILE \u003d \"Failed to read password file, please enter \""},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"            + \"a new password to lock ClientBook.\";"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_FAILED_TO_STORE_PASSWORD \u003d \"Failed to store password file.\";"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    private final Optional\u003cString\u003e currentPassword;"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    private final Optional\u003cString\u003e newPassword;"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"     * Instantiates a LockCommand object with the new password."},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"     * @param newPassword password used to lock the addressbook.json file into a zip file."},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    public LockCommand(String newPassword) {"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        this.currentPassword \u003d Optional.empty();"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        this.newPassword \u003d Optional.of(newPassword);"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"     * Instantiates a LockCommand object with the current password and new password."},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"     * @param currentPassword current password that is used to lock the zip file containing addressbook.json."},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"     * @param newPassword password used to lock the addressbook.json file into a zip file."},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"    public LockCommand(String currentPassword, String newPassword) {"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        this.currentPassword \u003d Optional.of(currentPassword);"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        this.newPassword \u003d Optional.of(newPassword);"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"     * Instantiates a LockCommand object with no passwords. The LockCommand will check for any previously used"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"     * password in the form of a password file."},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"    public LockCommand() {"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        this.currentPassword \u003d Optional.empty();"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        this.newPassword \u003d Optional.empty();"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        requireNonNull(model);"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        Authentication authentication \u003d model.getAuthentication();"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        //There is an existing password"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"        if (authentication.isPasswordPresent()) {"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"            //Verify that the current password entered by user is the same as the existing password."},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"            if (this.currentPassword.isEmpty() || !authentication.getPassword().equals(this.currentPassword.get())) {"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"                throw new CommandException(MESSAGE_ALREADY_LOCKED_INCORRECT_PASSWORD);"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"        //If newPassword is not entered, check for password in password file."},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"        if (this.newPassword.isEmpty()) {"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"            useOldPassword(authentication);"},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(MESSAGE_LOCK_SUCCESS_OLD_PASSWORD);"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"        //New password is entered, use this to lock the zip."},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"        setNewPassword(authentication);"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"        //Case of updating password, since current password and new password are present."},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"        if (this.currentPassword.isPresent()) {"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(MESSAGE_LOCK_SUCCESS_UPDATE_PASSWORD);"},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"        //Case of a new lock without current password."},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(MESSAGE_LOCK_SUCCESS_NEW_PASSWORD);"},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":96,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":"     * Attempts to read the user\u0027s previous password from a password file and set the password to the model."},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"    private void useOldPassword(Authentication authentication) throws CommandException {"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"            authentication.readPasswordFileAndSetPassword();"},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"        } catch (Exception e) {"},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":"            throw new CommandException(MESSAGE_FAIL_TO_READ_PASSWORD_FILE, e);"},{"lineNumber":106,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":109,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":110,"author":{"gitId":"jay9645"},"content":"    private void setNewPassword(Authentication authentication) throws CommandException {"},{"lineNumber":111,"author":{"gitId":"jay9645"},"content":"        //New password is entered, use this to lock the zip."},{"lineNumber":112,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"jay9645"},"content":"            authentication.setPassword(this.newPassword);"},{"lineNumber":114,"author":{"gitId":"jay9645"},"content":"        } catch (Exception e) {"},{"lineNumber":115,"author":{"gitId":"jay9645"},"content":"            System.err.println(e);"},{"lineNumber":116,"author":{"gitId":"jay9645"},"content":"            throw new CommandException(MESSAGE_FAILED_TO_STORE_PASSWORD, e);"},{"lineNumber":117,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":120,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":123,"author":{"gitId":"jay9645"},"content":"                || (other instanceof LockCommand // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 currentPassword.equals(((LockCommand) other).currentPassword)"},{"lineNumber":125,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 newPassword.equals(((LockCommand) other).newPassword)); // state check"},{"lineNumber":126,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":127}},{"path":"src/main/java/seedu/address/logic/commands/PolicyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":" * Displays the policies of the person identified using their displayed index in the address book."},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"public class PolicyCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    public static final String COMMAND_WORD \u003d \"policy\";"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"            + \": Finds all policies associated a particular client.\\n\""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"    private static final String NO_POLICIES \u003d \" has no policies now!\";"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"    public PolicyCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        Person personPoliciesToDisplay \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        if (!personPoliciesToDisplay.hasPolicies()) {"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"            String feedback \u003d personPoliciesToDisplay.getName() + NO_POLICIES;"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(feedback, false, true, false);"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        String policiesAndUrls \u003d personPoliciesToDisplay.getPersonNameAndAllPolicies();"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        return new CommandResult(policiesAndUrls, false, true, false);"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"                || (other instanceof PolicyCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 targetIndex.equals(((PolicyCommand) other).targetIndex)); // state check"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":58}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":" * Sort and list the clients in the ClientBook by name to the user."},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"public class SortCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public static final String DIRECTION_ASCENDING \u003d \"-a\";"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    public static final String DIRECTION_DESCENDING \u003d \"-d\";"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_SUCCESS_ASCENDING \u003d \"Sorted all clients in ascending order.\";"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_SUCCESS_DESCENDING \u003d \"Sorted all clients in descending order.\";"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all clients by names in the order of \""},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"            + \"the specified direction and displays them as a list with index numbers.\\n\""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"            + \"Parameters: DIRECTION (-a for ascending, -d for descending)\\n\""},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"            + \"Example: \" + COMMAND_WORD + \" -a\";;"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    private final String direction;"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    public SortCommand(String direction) {"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        this.direction \u003d direction;"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        Comparator\u003cPerson\u003e comparator \u003d new PersonNameComparator();"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        if (direction.equals(DIRECTION_DESCENDING)) {"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"            comparator \u003d comparator.reversed();"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        model.updateSortedPersonList(comparator);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        if (direction.equals(DIRECTION_ASCENDING)) {"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(MESSAGE_SUCCESS_ASCENDING);"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(MESSAGE_SUCCESS_DESCENDING);"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"                || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 direction.equals(((SortCommand) other).direction)); // state check"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"     * Comparator to compare the names of clients."},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"    public static class PersonNameComparator implements Comparator\u003cPerson\u003e {"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        @Override"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        public int compare(Person person, Person otherPerson) {"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"            return (person.getName().toString()).compareTo(otherPerson.getName().toString());"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":67}},{"path":"src/main/java/seedu/address/logic/commands/UnlockCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"public class UnlockCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"    public static final String COMMAND_WORD \u003d \"unlock\";"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"            + \": Unlocks ClientBook.\\n\""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"            + \"Parameters: CURRENT_PASSWORD\\n\""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"            + \"Example: \" + COMMAND_WORD + \" 12345\";"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_UNLOCK_SUCCESS \u003d \"Unlocked ClientBook.\";"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_ALREADY_UNLOCKED \u003d \"ClientBook is not locked.\";"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"You have entered the wrong password.\";"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    private final String currentPassword;"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"     * Instantiates an UnlockCommand object with the password that the user has entered."},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"     * @param currentPassword user entered password used to unlock the zip file."},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    public UnlockCommand(String currentPassword) {"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        this.currentPassword \u003d currentPassword;"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        Authentication authentication \u003d model.getAuthentication();"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"        if (!authentication.isPasswordPresent()) {"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"            return new CommandResult(MESSAGE_ALREADY_UNLOCKED);"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        if (!authentication.getPassword().equals(currentPassword)) {"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"            throw new CommandException(MESSAGE_INCORRECT_PASSWORD);"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"        authentication.removePassword();"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        return new CommandResult(MESSAGE_UNLOCK_SUCCESS);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"                || (other instanceof UnlockCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 currentPassword.equals(((UnlockCommand) other).currentPassword)); // state check"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":52}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE_POLICY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"                        PREFIX_INSURANCE_POLICY, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        List\u003cInsurancePolicy\u003e policyList \u003d ParserUtil.parsePolicies(argMultimap.getAllValues(PREFIX_INSURANCE_POLICY));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, policyList);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":7,"-":58,"jay9645":1}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.PolicyCommand;"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"            return new LockCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"            return new UnlockCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"        case PolicyCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"            return new PolicyCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":75,"jay9645":17}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"     * Returns all values of {@code prefix}, until the next prefix."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"        List\u003cString\u003e values \u003d argMultimap.get(prefix);"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        //Add all values up till the next prefix to the output."},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"        for (String value : values) {"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"            if (CliSyntax.isValidPrefix(value)) {"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"                break;"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"            output.add(value);"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        return output;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":16,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public static final Prefix PREFIX_INSURANCE_POLICY \u003d new Prefix(\"i/\");"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    public static final Prefix PREFIX_INSURANCE_POLICY_URL \u003d new Prefix(\"u/\");"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    public static final Prefix PREFIX_LIST_POLICY \u003d new Prefix(\"-policy\");"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * Checks if a given string is a valid prefix."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     * @param input the string to validate."},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"     * @return true if the string is a valid prefix."},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    public static boolean isValidPrefix(String input) {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        HashSet\u003cPrefix\u003e prefixes \u003d new HashSet\u003c\u003e(Arrays.asList(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"                PREFIX_TAG, PREFIX_INSURANCE_POLICY, PREFIX_INSURANCE_POLICY_URL));"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        return prefixes.contains(new Prefix(input));"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":13,"-":15,"jay9645":5}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE_POLICY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"                        PREFIX_TAG, PREFIX_INSURANCE_POLICY);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"        parsePoliciesForEdit(argMultimap.getAllValues(PREFIX_INSURANCE_POLICY))"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"                .ifPresent(editPersonDescriptor::setPolicies);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"     * Parses {@code Collection\u003cString\u003e policyId} into a {@code List\u003cInsurancePolicy\u003e} if {@code policies} is non-empty."},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"     * If {@code policies} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"     * {@code List\u003cInsurancePolicy\u003e} containing zero policies."},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"    private Optional\u003cList\u003cInsurancePolicy\u003e\u003e parsePoliciesForEdit(Collection\u003cString\u003e policyIds) throws ParseException {"},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"        assert policyIds !\u003d null;"},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"        if (policyIds.isEmpty()) {"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"            return Optional.empty();"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"        Collection\u003cString\u003e policyList \u003d policyIds.size() \u003d\u003d 1 \u0026\u0026 policyIds.contains(\"\")"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"                ? Collections.emptySet()"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"                : policyIds;"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":"        return Optional.of(ParserUtil.parsePolicies(policyList));"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":25,"-":81,"jay9645":2}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.InsurancePolicyContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    public static final String KEYWORDS_REGEX \u003d \"\\\\s*\u0026\\\\s*\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"        int flagCount \u003d StringUtil.countMatches(trimmedArgs, \"/\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        if (flagCount !\u003d 1) {"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"            throw new ParseException("},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        String flag \u003d trimmedArgs.substring(0, 2);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        String noFlagArgs \u003d trimmedArgs.substring(2).trim();"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(noFlagArgs.split(KEYWORDS_REGEX, -1));"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        for (String keyword : keywords) {"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"            if (keyword.isEmpty()) {"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"                throw new ParseException("},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        switch (flag) {"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"        case \"n/\":"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(keywords));"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"        case \"p/\":"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"            return new FindCommand(new PhoneContainsKeywordsPredicate(keywords));"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        case \"e/\":"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"            return new FindCommand(new EmailContainsKeywordsPredicate(keywords));"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        case \"a/\":"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"            return new FindCommand(new AddressContainsKeywordsPredicate(keywords));"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"        case \"t/\":"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"            return new FindCommand(new TagContainsKeywordsPredicate(keywords));"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"        case \"i/\":"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"            return new FindCommand(new InsurancePolicyContainsKeywordsPredicate(keywords));"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"        default:"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"            throw new ParseException("},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":31,"jay9645":49}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":" * Parses input arguments and creates a new ListCommand object"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"     * and returns a ListCommand object for execution."},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        requireNonNull(args);"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"        String[] splitArgs \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"            return new ListCommand();"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"            try {"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"                Attribute attribute \u003d ParserUtil.parseAttribute(splitArgs[0]);"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"                return new ListCommand(attribute);"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"            } catch (ParseException pe) {"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"                throw new ParseException("},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), pe);"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":38}},{"path":"src/main/java/seedu/address/logic/parser/LockCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"public class LockCommandParser implements Parser\u003cLockCommand\u003e {"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    public LockCommand parse(String args) throws ParseException {"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"        String[] passwords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"            return new LockCommand();"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"        if (passwords.length \u003e 2) {"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, LockCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        //Length 1: User only provided new password."},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        if (passwords.length \u003d\u003d 1) {"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"            return new LockCommand(passwords[0]);"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        //Length 2: With old and new password."},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        return new LockCommand(passwords[0], passwords[1]);"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":32}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"     * Parses {@code attribute string} into an {@code Attribute} and returns it. Leading and trailing whitespaces will"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"     * be trimmed."},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"    public static Attribute parseAttribute(String attribute) throws ParseException {"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        String trimmedAttribute \u003d attribute.trim();"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        switch (trimmedAttribute) {"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        case \"-policy\":"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"            return Attribute.POLICY_ID;"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        case \"-phone\":"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"            return Attribute.PHONE;"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        case \"-email\":"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"            return Attribute.EMAIL;"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        case \"-address\":"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"            return Attribute.ADDRESS;"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"        default:"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"            throw new ParseException(Attribute.MESSAGE_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":151,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"jay9645"},"content":"     * Parses a {@code String policy} into a {@code InsurancePolicy}."},{"lineNumber":153,"author":{"gitId":"jay9645"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":154,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"jay9645"},"content":"     * @throws ParseException if the given {@code policy} is invalid."},{"lineNumber":156,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"jay9645"},"content":"    public static InsurancePolicy parsePolicy(String policy) throws ParseException {"},{"lineNumber":158,"author":{"gitId":"jay9645"},"content":"        requireNonNull(policy);"},{"lineNumber":159,"author":{"gitId":"jay9645"},"content":"        String trimmedPolicy \u003d policy.trim();"},{"lineNumber":160,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":161,"author":{"gitId":"jay9645"},"content":"        if (!InsurancePolicy.isValidPolicyId(trimmedPolicy)) {"},{"lineNumber":162,"author":{"gitId":"jay9645"},"content":"            throw new ParseException(InsurancePolicy.MESSAGE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":165,"author":{"gitId":"jay9645"},"content":"        String[] idAndUrl \u003d trimmedPolicy.split(\"\u003e\", 2);"},{"lineNumber":166,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":167,"author":{"gitId":"jay9645"},"content":"        if (!InsurancePolicy.hasPolicyUrl(idAndUrl)) {"},{"lineNumber":168,"author":{"gitId":"jay9645"},"content":"            return new InsurancePolicy(idAndUrl[0]);"},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"        // Else contains URL too"},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":"        String policyId \u003d idAndUrl[0];"},{"lineNumber":173,"author":{"gitId":"jay9645"},"content":"        String policyUrl \u003d idAndUrl[1];"},{"lineNumber":174,"author":{"gitId":"jay9645"},"content":"        return new InsurancePolicy(policyId, policyUrl);"},{"lineNumber":175,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":177,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"swayongshen"},"content":"     * Parses {@code Collection\u003cString\u003e policies} into a {@code List\u003cInsurancePolicy\u003e}."},{"lineNumber":179,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"swayongshen"},"content":"    public static List\u003cInsurancePolicy\u003e parsePolicies(Collection\u003cString\u003e policies) throws ParseException {"},{"lineNumber":181,"author":{"gitId":"swayongshen"},"content":"        requireNonNull(policies);"},{"lineNumber":182,"author":{"gitId":"swayongshen"},"content":"        final List\u003cInsurancePolicy\u003e policyList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":183,"author":{"gitId":"jay9645"},"content":"        for (String policy : policies) {"},{"lineNumber":184,"author":{"gitId":"jay9645"},"content":"            requireNonNull(policy);"},{"lineNumber":185,"author":{"gitId":"jay9645"},"content":"            policyList.add(parsePolicy(policy));"},{"lineNumber":186,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"swayongshen"},"content":"        return policyList;"},{"lineNumber":188,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":13,"-":124,"jay9645":52}},{"path":"src/main/java/seedu/address/logic/parser/PolicyCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.PolicyCommand;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"public class PolicyCommandParser implements Parser\u003cPolicyCommand\u003e {"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public PolicyCommand parse(String args) throws ParseException {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"            return new PolicyCommand(index);"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        } catch (ParseException pe) {"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PolicyCommand.MESSAGE_USAGE), pe);"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":27}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"     * and returns a SortCommand object for execution."},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        String direction \u003d trimmedArgs.split(\"\\\\s+\")[0];"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        if (!direction.equals(SortCommand.DIRECTION_ASCENDING)"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 !direction.equals(SortCommand.DIRECTION_DESCENDING)) {"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        return new SortCommand(direction);"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":34}},{"path":"src/main/java/seedu/address/logic/parser/UnlockCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"public class UnlockCommandParser implements Parser\u003cUnlockCommand\u003e {"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"    public UnlockCommand parse(String args) throws ParseException {"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        String[] splitArgs \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"        if (splitArgs.length !\u003d 1 || trimmedArgs.length() \u003d\u003d 0) {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"                    UnlockCommand.MESSAGE_USAGE));"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        return new UnlockCommand(splitArgs[0]);"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":20}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"NBH99"},"content":"public class AddressBook implements ReadOnlyAddressBook, ModifiableAddressBook {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":121,"author":{"gitId":"NBH99"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"NBH99"},"content":"    public ObservableList\u003cPerson\u003e getModifiablePersonList() {"},{"lineNumber":123,"author":{"gitId":"NBH99"},"content":"        return persons.asModifiableObservableList();"},{"lineNumber":124,"author":{"gitId":"NBH99"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"NBH99":6,"-":119}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"     * Updates the Persons in person list to have only the particular given {@code attribute}."},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"     * @throws NullPointerException if {@code attribute} is null."},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"jay9645"},"content":"    void updatePersonListByAttribute(Attribute attributeType);"},{"lineNumber":96,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"     * Undoes the last modification done on the person list."},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":"     * If list has not been modified, this method does nothing."},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"    void undoListModification();"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"     * Returns an Authentication object needed to lock and unlock ClientBook."},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"jay9645"},"content":"    Authentication getAuthentication();"},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":108,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"jay9645"},"content":"     * Updates the comparator of the sorted person list to sort by the given {@code comparator}."},{"lineNumber":110,"author":{"gitId":"jay9645"},"content":"     * @throws NullPointerException if {@code comparator} is null."},{"lineNumber":111,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"jay9645"},"content":"    void updateSortedPersonList(Comparator\u003cPerson\u003e comparator);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":87,"jay9645":26}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    private List\u003cPerson\u003e backUpList;"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    private final Authentication authentication;"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    private final ObservableList\u003cPerson\u003e modifiedList;"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs and Authentication."},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, Authentication authentication) {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        super();"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        this.backUpList \u003d new ArrayList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        this.authentication \u003d authentication;"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        modifiedList \u003d this.addressBook.getModifiablePersonList();"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        this.backUpList \u003d new ArrayList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        modifiedList \u003d this.addressBook.getModifiablePersonList();"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        this.authentication \u003d new Authentication();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        this(new AddressBook(), new UserPrefs(), new Authentication());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":129,"author":{"gitId":"jay9645"},"content":"        this.backUpList \u003d new ArrayList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":136,"author":{"gitId":"jay9645"},"content":"        this.backUpList \u003d new ArrayList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":143,"author":{"gitId":"jay9645"},"content":"        this.backUpList \u003d new ArrayList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":164,"author":{"gitId":"jay9645"},"content":"    public void updatePersonListByAttribute(Attribute attributeType) {"},{"lineNumber":165,"author":{"gitId":"jay9645"},"content":"        List\u003cPerson\u003e tempPersonsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":166,"author":{"gitId":"jay9645"},"content":"        for (int i \u003d 0; i \u003c filteredPersons.size(); i++) {"},{"lineNumber":167,"author":{"gitId":"jay9645"},"content":"            Person person \u003d filteredPersons.get(i);"},{"lineNumber":168,"author":{"gitId":"jay9645"},"content":"            tempPersonsList.add(new Person(person, attributeType));"},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":"        modifiedList.setAll(tempPersonsList);"},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":173,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":174,"author":{"gitId":"jay9645"},"content":"    public void undoListModification() {"},{"lineNumber":175,"author":{"gitId":"jay9645"},"content":"        modifiedList.setAll(backUpList);"},{"lineNumber":176,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"jay9645"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Authenticator Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":198,"author":{"gitId":"jay9645"},"content":"    public Authentication getAuthentication() {"},{"lineNumber":199,"author":{"gitId":"jay9645"},"content":"        return this.authentication;"},{"lineNumber":200,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"jay9645"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":202,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":203,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":204,"author":{"gitId":"jay9645"},"content":"    public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"},{"lineNumber":205,"author":{"gitId":"jay9645"},"content":"        requireNonNull(comparator);"},{"lineNumber":206,"author":{"gitId":"jay9645"},"content":"        modifiedList.sort(comparator);"},{"lineNumber":207,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":149,"jay9645":59}},{"path":"src/main/java/seedu/address/model/ModifiableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NBH99"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":3,"author":{"gitId":"NBH99"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"NBH99"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":6,"author":{"gitId":"NBH99"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"NBH99"},"content":" * Modifiable view of an address book"},{"lineNumber":8,"author":{"gitId":"NBH99"},"content":" */"},{"lineNumber":9,"author":{"gitId":"NBH99"},"content":"public interface ModifiableAddressBook {"},{"lineNumber":10,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":11,"author":{"gitId":"NBH99"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"NBH99"},"content":"     * Returns an modifiable view of the persons list."},{"lineNumber":13,"author":{"gitId":"NBH99"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":14,"author":{"gitId":"NBH99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"NBH99"},"content":"    ObservableList\u003cPerson\u003e getModifiablePersonList();"},{"lineNumber":16,"author":{"gitId":"NBH99"},"content":""},{"lineNumber":17,"author":{"gitId":"NBH99"},"content":"}"}],"authorContributionMap":{"NBH99":17}},{"path":"src/main/java/seedu/address/model/attribute/Attribute.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.attribute;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":" * An enumeration of Attributes that a person object can have"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"public enum Attribute {"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"    POLICY_ID, EMAIL, ADDRESS, PHONE;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"            \"Attribute should be specified by -ATTRIBUTE, where ATTRIBUTE should be policy, phone, email or address\";"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":11}},{"path":"src/main/java/seedu/address/model/insurancepolicy/InsurancePolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package seedu.address.model.insurancepolicy;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":" * Represents an InsurancePolicy in the address book."},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":" * Guarantees: immutable;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"public class InsurancePolicy {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"PolicyIDs should not contain \u0027\u003e\u0027!. URLs should be \""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"            + \"preceded by \u0027\u003e\u0027 after the PolicyID.\";"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public final String policyId;"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    private String policyUrl;"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"     * Constructs an {@code InsurancePolicy} without URL."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * @param policyId the Id associated with the policy."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    public InsurancePolicy(String policyId) {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        requireNonNull(policyId);"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"        this.policyId \u003d policyId;"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"        this.policyUrl \u003d null;"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"     * Constructs an {@code InsurancePolicy} with URL."},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"     * @param policyId the Id associated with the policy."},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"     * @param url the URL to the policy document."},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    public InsurancePolicy(String policyId, String url) {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        this.policyId \u003d policyId;"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        this.policyUrl \u003d url;"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"     * Retrieves the {@code policyUrl} associated with this policy."},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"     * @return the {@code policyUrl} in {@code Optional\u003cString\u003e}."},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"    public Optional\u003cString\u003e getOptionalPolicyUrl() {"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        return Optional.ofNullable(policyUrl);"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"     * Checks if another object is the equal to this policy by comparing policy Id and policy URL."},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"     * @param other the other object."},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"     * @return true if the object is equal to this policy."},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        } else if (!(other instanceof InsurancePolicy)) {"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"            return false;"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        InsurancePolicy otherPolicy \u003d (InsurancePolicy) other;"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"            return policyId.equals(otherPolicy.policyId) \u0026\u0026 policyUrl.equals(otherPolicy.policyUrl);"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"            return policyId.equals(otherPolicy.policyId);"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"        return Objects.hash(policyUrl, policyId);"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"     * Format state as text for viewing."},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"        if (policyUrl \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"            return policyId + \": No URL!\";"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"        return policyId + \": \" + policyUrl;"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"     * Checks if input contains a valid policy ID without \u0027\u003e\u0027 character in the ID."},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"     * @param input policy input to check."},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"     * @return true if policy input contains a valid policy ID."},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"jay9645"},"content":"    public static boolean isValidPolicyId(String input) {"},{"lineNumber":96,"author":{"gitId":"jay9645"},"content":"        String[] splitByAngularBracket \u003d input.split(\"\u003e\", 2);"},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"        if (splitByAngularBracket.length \u003d\u003d 1) {"},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":"            // return true if length is 1, since no \u0027\u003e\u0027 was used, meaning no URL and valid policy ID."},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"            return true;"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"        // If input is of a correct format, then splitting by \u0027\u003e\u0027 would give us policy ID in the 0th index,"},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"        // and policy URL in the 1st index."},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":106,"author":{"gitId":"jay9645"},"content":"        // By definition, URLs should not contain angular brackets, as they are usually used as delimiters around"},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":"        // URLs in free text. Hence our choice to use the \u0027\u003e\u0027 character as delimiter here."},{"lineNumber":108,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":109,"author":{"gitId":"jay9645"},"content":"        // Thus, we want to check if the URL contains any \u0027\u003e\u0027 which was what the input should have been split by."},{"lineNumber":110,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":111,"author":{"gitId":"jay9645"},"content":"        String possibleUrl \u003d splitByAngularBracket[1];"},{"lineNumber":112,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":113,"author":{"gitId":"jay9645"},"content":"        for (int i \u003d 0; i \u003c possibleUrl.length(); i++) {"},{"lineNumber":114,"author":{"gitId":"jay9645"},"content":"            if (possibleUrl.charAt(i) \u003d\u003d \u0027\u003e\u0027) {"},{"lineNumber":115,"author":{"gitId":"jay9645"},"content":"                return false;"},{"lineNumber":116,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":119,"author":{"gitId":"jay9645"},"content":"        return true;"},{"lineNumber":120,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":122,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"jay9645"},"content":"     * Checks if a policy input by user contains a URL associated with the policy."},{"lineNumber":124,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"jay9645"},"content":"     * @param test policy input split by our delimiter \u0027\u003e\u0027."},{"lineNumber":126,"author":{"gitId":"jay9645"},"content":"     * @return true if input contains URL."},{"lineNumber":127,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"jay9645"},"content":"    public static boolean hasPolicyUrl(String[] test) {"},{"lineNumber":129,"author":{"gitId":"jay9645"},"content":"        return test.length \u003d\u003d 2;"},{"lineNumber":130,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":35,"jay9645":91,"jlxw48":5}},{"path":"src/main/java/seedu/address/model/person/AddressContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":" * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given."},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public boolean test(Person person) {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        return keywords.stream()"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"                .anyMatch(keyword -\u003e person.getAddress().get().value.toLowerCase().contains(keyword.toLowerCase()));"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":29}},{"path":"src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":" * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public boolean test(Person person) {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        return keywords.stream()"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"                .anyMatch(keyword -\u003e person.getEmail().get().value.toLowerCase().contains(keyword.toLowerCase()));"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":29}},{"path":"src/main/java/seedu/address/model/person/InsurancePolicyContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":" * Tests that a {@code Person}\u0027s {@code InsurancePolicy} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"public class InsurancePolicyContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    public InsurancePolicyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    static boolean checkPolicies(List\u003cInsurancePolicy\u003e policies, String keyword) {"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        boolean containsKeyword \u003d false;"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"        for (InsurancePolicy policy : policies) {"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"            if (policy.policyId.toLowerCase().contains(keyword.toLowerCase())) {"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"                containsKeyword \u003d true;"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"                break;"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        return containsKeyword;"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    public boolean test(Person person) {"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"        return keywords.stream()"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"                .anyMatch(keyword -\u003e checkPolicies(person.getPolicies(), keyword));"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"                || (other instanceof InsurancePolicyContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 keywords.equals(((InsurancePolicyContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":42}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"                .anyMatch(keyword -\u003e person.getName().fullName.toLowerCase().contains(keyword.toLowerCase()));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":28,"jay9645":1}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"    private final Optional\u003cPhone\u003e phone;"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"    private final Optional\u003cEmail\u003e email;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    private final Optional\u003cAddress\u003e address;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    private final List\u003cInsurancePolicy\u003e policies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"     * Every field is present and not null."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cInsurancePolicy\u003e policies) {"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        requireAllNonNull(name, phone, email, address, tags, policies);"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        this.phone \u003d Optional.of(phone);"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        this.email \u003d Optional.of(email);"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        this.address \u003d Optional.of(address);"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"        this.tags.addAll(tags);"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        this.policies.addAll(policies);"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"     * Temporary constructor to allow missing policies argument."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        this.phone \u003d Optional.of(phone);"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        this.email \u003d Optional.of(email);"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        this.address \u003d Optional.of(address);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"     * Creates a code{Person} with the specified code{attribute} using the input code{person}."},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"     * Other than name and tags, other unspecified field is empty."},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    public Person(Person person, Attribute attribute) {"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        requireAllNonNull(person, attribute);"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"        this.name \u003d person.name;"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        switch (attribute) {"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        case POLICY_ID:"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"            this.phone \u003d Optional.empty();"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"            this.email \u003d Optional.empty();"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"            this.address \u003d Optional.empty();"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"            this.policies.addAll(person.policies);"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        case PHONE:"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"            this.phone \u003d Optional.of(person.getPhone().get());"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"            this.email \u003d Optional.empty();"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"            this.address \u003d Optional.empty();"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"            break;"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"        case ADDRESS:"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"            this.phone \u003d Optional.empty();"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"            this.email \u003d Optional.empty();"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"            this.address \u003d Optional.of(person.getAddress().get());"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"        case EMAIL:"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"            this.phone \u003d Optional.empty();"},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"            this.email \u003d Optional.of(person.getEmail().get());"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"            this.address \u003d Optional.empty();"},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"            break;"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":"        default:"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"            this.phone \u003d Optional.empty();"},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"            this.email \u003d Optional.empty();"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"            this.address \u003d Optional.empty();"},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"        this.tags.addAll(person.tags);"},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":"    public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"    public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":"    public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":"     * Returns an immutable policy arraylist, which throws {@code UnsupportedOperationException}"},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"     * if modification is attempted."},{"lineNumber":122,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"swayongshen"},"content":"    public List\u003cInsurancePolicy\u003e getPolicies() {"},{"lineNumber":124,"author":{"gitId":"swayongshen"},"content":"        return Collections.unmodifiableList(policies);"},{"lineNumber":125,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":159,"author":{"gitId":"swayongshen"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())"},{"lineNumber":160,"author":{"gitId":"swayongshen"},"content":"                \u0026\u0026 otherPerson.getPolicies().equals(getPolicies());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":166,"author":{"gitId":"swayongshen"},"content":"        return Objects.hash(name, phone, email, address, tags, policies);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":"    public boolean hasPolicies() {"},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":"        return policies.size() \u003e 0;"},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":173,"author":{"gitId":"jay9645"},"content":"    public String getPersonNameAndAllPolicies() {"},{"lineNumber":174,"author":{"gitId":"jay9645"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":175,"author":{"gitId":"jay9645"},"content":"        builder.append(name).append(\"@\");"},{"lineNumber":176,"author":{"gitId":"jay9645"},"content":"        policies.forEach(string -\u003e builder.append(string).append(\"\\n\"));"},{"lineNumber":177,"author":{"gitId":"jay9645"},"content":"        return builder.substring(0, builder.length() - 1);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":183,"author":{"gitId":"jay9645"},"content":"        builder.append(getName());"},{"lineNumber":184,"author":{"gitId":"jay9645"},"content":"        if (this.phone.isPresent()) {"},{"lineNumber":185,"author":{"gitId":"jay9645"},"content":"            builder.append(\"; Phone: \").append(phone.get());"},{"lineNumber":186,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"jay9645"},"content":"        if (this.email.isPresent()) {"},{"lineNumber":188,"author":{"gitId":"jay9645"},"content":"            builder.append(\"; Email: \").append(email.get());"},{"lineNumber":189,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"jay9645"},"content":"        if (this.address.isPresent()) {"},{"lineNumber":191,"author":{"gitId":"jay9645"},"content":"            builder.append(\"; Address: \").append(address.get());"},{"lineNumber":192,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":200,"author":{"gitId":"swayongshen"},"content":"        List\u003cInsurancePolicy\u003e policies \u003d getPolicies();"},{"lineNumber":201,"author":{"gitId":"swayongshen"},"content":"        if (!policies.isEmpty()) {"},{"lineNumber":202,"author":{"gitId":"jay9645"},"content":"            builder.append(\"; Policies: \");"},{"lineNumber":203,"author":{"gitId":"jay9645"},"content":"            policies.forEach(policyString -\u003e builder.append(policyString).append(\", \"));"},{"lineNumber":204,"author":{"gitId":"jay9645"},"content":"            builder.deleteCharAt(builder.length() - 1).deleteCharAt(builder.length() - 1);"},{"lineNumber":205,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":27,"-":107,"jay9645":75}},{"path":"src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public boolean test(Person person) {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        return keywords.stream()"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"                .anyMatch(keyword -\u003e person.getPhone().get().value.contains(keyword));"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":29}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    static boolean checkTags(Set\u003cTag\u003e tags, String keyword) {"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"        boolean containsKeyword \u003d false;"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        for (Tag tag : tags) {"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"            if (tag.tagName.toLowerCase().contains(keyword.toLowerCase())) {"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"                containsKeyword \u003d true;"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"                break;"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        return containsKeyword;"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    public boolean test(Person person) {"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        return keywords.stream()"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"                .anyMatch(keyword -\u003e checkTags(person.getTags(), keyword));"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":43}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed."},{"lineNumber":21,"author":{"gitId":"-"},"content":" *"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitId":"-"},"content":" *"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Adds a person to the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the list."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":139,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"jay9645"},"content":"     * Returns the backing list as a modifiable {@code ObservableList}."},{"lineNumber":141,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"jay9645"},"content":"    public ObservableList\u003cPerson\u003e asModifiableObservableList() {"},{"lineNumber":143,"author":{"gitId":"jay9645"},"content":"        return internalList;"},{"lineNumber":144,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":137,"jay9645":8}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.JsonAdaptedInsurancePolicy;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"     * Returns a list of {@code InsurancePolicy} from the list of strings given."},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"    public static List\u003cInsurancePolicy\u003e getPolicyList(String... strings) {"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        return Arrays.stream(strings)"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"                .map(policyString -\u003e {"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"                    String[] policyIdAndUrl \u003d JsonAdaptedInsurancePolicy.policyIdAndUrlParser(policyString);"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"                    return new InsurancePolicy(policyIdAndUrl[0], policyIdAndUrl[1]);"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"                })"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"                .collect(Collectors.toList());"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":8,"-":60,"jay9645":7}},{"path":"src/main/java/seedu/address/storage/Authentication.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import java.security.MessageDigest;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"import java.util.logging.Logger;"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"import javax.crypto.Cipher;"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"import javax.crypto.SecretKey;"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"import javax.crypto.spec.SecretKeySpec;"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.ZipFile;"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.exception.ZipException;"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.model.ZipParameters;"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.model.enums.AesKeyStrength;"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.model.enums.CompressionLevel;"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.model.enums.CompressionMethod;"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"import net.lingala.zip4j.model.enums.EncryptionMethod;"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":" * Handles the encryption and decryption of the data .json file."},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"public class Authentication {"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"    private static final String ENCRYPTION_KEY \u003d \"wQhgIpxA2KAds5PF2bJc32\";"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    private static final String PASSWORD_FILE_NAME \u003d \"keystore\";"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    /** Path of the .json file containing the serialized address book */"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"    private final Path filePath;"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"    private Optional\u003cString\u003e password \u003d Optional.empty();"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"     * Instantiates an Authentication object with the path of the data .json file."},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"     * @param filePath path of the data .json file"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"    public Authentication(Path filePath) {"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"     * Instantiates Authentication object with the default path \"/data/addressbook.json\""},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"    public Authentication() {"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        this.filePath \u003d Paths.get(\"/data/addressbook.json\");"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        this.password \u003d Optional.empty();"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"     * Initiates a feedback loop to get the user\u0027s password to unlock the encrypted zip file."},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"    public void unlock() throws ZipException {"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        assert isExistsZip() : \"Zip must exist to call the unlock() method.\";"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"        //If there is zip but it\u0027s not locked, just unzip it."},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        if (!isExistsLockedZip()) {"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"            attemptUnzipUnprotected();"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"            Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"            while (true) {"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"                System.out.println(\"Please enter your password: \");"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"                String attemptPassword \u003d scanner.nextLine();"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"                if (attemptUnzip(attemptPassword)) {"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"                    this.password \u003d Optional.of(attemptPassword);"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"                    System.out.println(\"Password is verified. Launching ClientBook.\");"},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"                    break;"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"                } else {"},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"                    System.out.println(\"Password is incorrect, please try again.\");"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"     * Checks if the locked zip containing the data file exists."},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"     * @return true if the locked zip exists, false otherwise."},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"    public boolean isExistsZip() {"},{"lineNumber":95,"author":{"gitId":"jay9645"},"content":"        return Files.exists(Paths.get(this.getZipPath()));"},{"lineNumber":96,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":"     * Checks if the locked zip file containing the data .json file exists."},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"     * @return true if the zip file exists."},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"     * @throws ZipException if error occurs when checking if the zip file is encrypted."},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"    public boolean isExistsLockedZip() throws ZipException {"},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"        ZipFile dataZip \u003d new ZipFile(this.getZipPath());"},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":"        return isExistsZip() \u0026\u0026 dataZip.isEncrypted();"},{"lineNumber":106,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":108,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"jay9645"},"content":"     * Locks the data .json file in a password protected zip file and delete the original data .json file."},{"lineNumber":110,"author":{"gitId":"jay9645"},"content":"     * Assumes: data .json file exists."},{"lineNumber":111,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"jay9645"},"content":"    public void lock() throws ZipException {"},{"lineNumber":113,"author":{"gitId":"jay9645"},"content":"        ZipFile dataZip;"},{"lineNumber":114,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"jay9645"},"content":"            //If ClientBook is locked, encrypt the zip file using the password."},{"lineNumber":116,"author":{"gitId":"jay9645"},"content":"            if (this.password.isPresent()) {"},{"lineNumber":117,"author":{"gitId":"jay9645"},"content":"                dataZip \u003d new ZipFile(this.getZipPath(), this.password.get().toCharArray());"},{"lineNumber":118,"author":{"gitId":"jay9645"},"content":"                ZipParameters parameters \u003d new ZipParameters();"},{"lineNumber":119,"author":{"gitId":"jay9645"},"content":"                parameters.setEncryptFiles(true);"},{"lineNumber":120,"author":{"gitId":"jay9645"},"content":"                parameters.setEncryptionMethod(EncryptionMethod.AES);"},{"lineNumber":121,"author":{"gitId":"jay9645"},"content":"                parameters.setAesKeyStrength(AesKeyStrength.KEY_STRENGTH_256);"},{"lineNumber":122,"author":{"gitId":"jay9645"},"content":"                parameters.setCompressionLevel(CompressionLevel.NORMAL);"},{"lineNumber":123,"author":{"gitId":"jay9645"},"content":"                parameters.setCompressionMethod(CompressionMethod.DEFLATE);"},{"lineNumber":124,"author":{"gitId":"jay9645"},"content":"                dataZip.addFile(this.filePath.toString(), parameters);"},{"lineNumber":125,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":126,"author":{"gitId":"jay9645"},"content":"            //ClientBook is not locked, zip the data .json file without a password."},{"lineNumber":127,"author":{"gitId":"jay9645"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"jay9645"},"content":"                dataZip \u003d new ZipFile(this.getZipPath());"},{"lineNumber":129,"author":{"gitId":"jay9645"},"content":"                dataZip.addFile(this.filePath.toString());"},{"lineNumber":130,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"jay9645"},"content":"        } catch (ZipException e) {"},{"lineNumber":132,"author":{"gitId":"jay9645"},"content":"            logger.info(\"Failed to compress data .json file into a zip file\");"},{"lineNumber":133,"author":{"gitId":"jay9645"},"content":"            throw e;"},{"lineNumber":134,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":137,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"jay9645"},"content":"     * Sets a hook to lock the data .json file in the zip file when the application closes."},{"lineNumber":139,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"jay9645"},"content":"    public void setShutDownHook() {"},{"lineNumber":141,"author":{"gitId":"jay9645"},"content":"        Runtime.getRuntime().addShutdownHook(new Thread(() -\u003e {"},{"lineNumber":142,"author":{"gitId":"jay9645"},"content":"            try {"},{"lineNumber":143,"author":{"gitId":"jay9645"},"content":"                this.lock();"},{"lineNumber":144,"author":{"gitId":"jay9645"},"content":"                this.deleteJson();"},{"lineNumber":145,"author":{"gitId":"jay9645"},"content":"            } catch (ZipException e) {"},{"lineNumber":146,"author":{"gitId":"jay9645"},"content":"                e.printStackTrace();"},{"lineNumber":147,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"jay9645"},"content":"        }));"},{"lineNumber":149,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":151,"author":{"gitId":"jay9645"},"content":"    public String getPassword() {"},{"lineNumber":152,"author":{"gitId":"jay9645"},"content":"        return this.password.orElse(\"\");"},{"lineNumber":153,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":155,"author":{"gitId":"jay9645"},"content":"    public boolean isPasswordPresent() {"},{"lineNumber":156,"author":{"gitId":"jay9645"},"content":"        return this.password.isPresent();"},{"lineNumber":157,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":159,"author":{"gitId":"jay9645"},"content":"    public void setPassword(Optional\u003cString\u003e password) throws NoSuchPaddingException,"},{"lineNumber":160,"author":{"gitId":"jay9645"},"content":"            NoSuchAlgorithmException, IOException, BadPaddingException,"},{"lineNumber":161,"author":{"gitId":"jay9645"},"content":"            IllegalBlockSizeException, InvalidKeyException {"},{"lineNumber":162,"author":{"gitId":"jay9645"},"content":"        this.password \u003d password;"},{"lineNumber":163,"author":{"gitId":"jay9645"},"content":"        encryptAndStorePassword();"},{"lineNumber":164,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":166,"author":{"gitId":"jay9645"},"content":"    public void removePassword() {"},{"lineNumber":167,"author":{"gitId":"jay9645"},"content":"        this.password \u003d Optional.empty();"},{"lineNumber":168,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"     * Reads the password from the password file if any and set it to this.password."},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"jay9645"},"content":"    public void readPasswordFileAndSetPassword() throws IOException, IllegalBlockSizeException,"},{"lineNumber":174,"author":{"gitId":"jay9645"},"content":"            InvalidKeyException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {"},{"lineNumber":175,"author":{"gitId":"jay9645"},"content":"        //Decrypt the password file if it exists."},{"lineNumber":176,"author":{"gitId":"jay9645"},"content":"        File passwordFile \u003d new File(this.getPasswordFilePath());"},{"lineNumber":177,"author":{"gitId":"jay9645"},"content":"        if (!passwordFile.exists()) {"},{"lineNumber":178,"author":{"gitId":"jay9645"},"content":"            this.password \u003d Optional.empty();"},{"lineNumber":179,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"jay9645"},"content":"        byte[] encryptedPasswordBytes \u003d Files.readAllBytes(passwordFile.toPath());"},{"lineNumber":181,"author":{"gitId":"jay9645"},"content":"        this.password \u003d Optional.of(decryptPassword(encryptedPasswordBytes));"},{"lineNumber":182,"author":{"gitId":"jay9645"},"content":"        encryptAndStorePassword();"},{"lineNumber":183,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":185,"author":{"gitId":"jay9645"},"content":"    private void deleteJson() {"},{"lineNumber":186,"author":{"gitId":"jay9645"},"content":"        File dataJson \u003d new File(this.filePath.toString());"},{"lineNumber":187,"author":{"gitId":"jay9645"},"content":"        dataJson.delete();"},{"lineNumber":188,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":190,"author":{"gitId":"jay9645"},"content":"    private boolean attemptUnzip(String password) throws ZipException {"},{"lineNumber":191,"author":{"gitId":"jay9645"},"content":"        ZipFile dataZip \u003d new ZipFile(this.getZipPath());"},{"lineNumber":192,"author":{"gitId":"jay9645"},"content":"        //First check if zip file encrypted and set the password to be used."},{"lineNumber":193,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":194,"author":{"gitId":"jay9645"},"content":"            if (dataZip.isEncrypted()) {"},{"lineNumber":195,"author":{"gitId":"jay9645"},"content":"                dataZip.setPassword(password.toCharArray());"},{"lineNumber":196,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":197,"author":{"gitId":"jay9645"},"content":"        } catch (ZipException e) {"},{"lineNumber":198,"author":{"gitId":"jay9645"},"content":"            logger.info(\"Error attempting to check zip file at: \" + this.getZipPath());"},{"lineNumber":199,"author":{"gitId":"jay9645"},"content":"            throw e;"},{"lineNumber":200,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":202,"author":{"gitId":"jay9645"},"content":"        //Attempt to unzip the file using the provided password."},{"lineNumber":203,"author":{"gitId":"jay9645"},"content":"        try {"},{"lineNumber":204,"author":{"gitId":"jay9645"},"content":"            dataZip.extractAll(this.getFolderPath());"},{"lineNumber":205,"author":{"gitId":"jay9645"},"content":"            return true;"},{"lineNumber":206,"author":{"gitId":"jay9645"},"content":"        } catch (ZipException e) {"},{"lineNumber":207,"author":{"gitId":"jay9645"},"content":"            logger.info(\"Error when unzipping file at: \" + this.getZipPath());"},{"lineNumber":208,"author":{"gitId":"jay9645"},"content":"            return false;"},{"lineNumber":209,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":212,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"jay9645"},"content":"     * Attempts to unzip the unprotected addressbook.zip file."},{"lineNumber":214,"author":{"gitId":"jay9645"},"content":"     * @return true if unzip is successful"},{"lineNumber":215,"author":{"gitId":"jay9645"},"content":"     * @throws ZipException when trying to unzip the file."},{"lineNumber":216,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"jay9645"},"content":"    private boolean attemptUnzipUnprotected() throws ZipException {"},{"lineNumber":218,"author":{"gitId":"jay9645"},"content":"        return attemptUnzip(\"\");"},{"lineNumber":219,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":221,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"jay9645"},"content":"     * Gets the path of the .zip file containing the data .json file."},{"lineNumber":223,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"jay9645"},"content":"    private String getZipPath() {"},{"lineNumber":225,"author":{"gitId":"jay9645"},"content":"        String zipPath \u003d filePath.toString().replaceAll(\"\\\\.json$\", \".zip\");"},{"lineNumber":226,"author":{"gitId":"jay9645"},"content":"        return zipPath;"},{"lineNumber":227,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":229,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"jay9645"},"content":"     * Gets path of the folder containing the data .json file."},{"lineNumber":231,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"jay9645"},"content":"    private String getFolderPath() {"},{"lineNumber":233,"author":{"gitId":"jay9645"},"content":"        String folderPath \u003d this.filePath.getParent().toString();"},{"lineNumber":234,"author":{"gitId":"jay9645"},"content":"        return folderPath;"},{"lineNumber":235,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":237,"author":{"gitId":"jay9645"},"content":"    private String getPasswordFilePath() {"},{"lineNumber":238,"author":{"gitId":"jay9645"},"content":"        return this.getFolderPath() + \"/\" + PASSWORD_FILE_NAME;"},{"lineNumber":239,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":241,"author":{"gitId":"jay9645"},"content":"    private SecretKey getSecretKeyFromEncryptionKey() throws NoSuchAlgorithmException {"},{"lineNumber":242,"author":{"gitId":"jay9645"},"content":"        byte[] encodedKey \u003d ENCRYPTION_KEY.getBytes(StandardCharsets.UTF_8);"},{"lineNumber":243,"author":{"gitId":"jay9645"},"content":"        //Hash the encodedkey"},{"lineNumber":244,"author":{"gitId":"jay9645"},"content":"        byte[] encodedKeyDigest \u003d MessageDigest.getInstance(\"SHA-1\").digest(encodedKey);"},{"lineNumber":245,"author":{"gitId":"jay9645"},"content":"        //Get first 16 byte \u003d 128 bits to be used as key."},{"lineNumber":246,"author":{"gitId":"jay9645"},"content":"        encodedKeyDigest \u003d Arrays.copyOf(encodedKeyDigest, 16);"},{"lineNumber":247,"author":{"gitId":"jay9645"},"content":"        return new SecretKeySpec(encodedKeyDigest, \"AES\");"},{"lineNumber":248,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":250,"author":{"gitId":"jay9645"},"content":"    //@@authoer swayongshen-rused"},{"lineNumber":251,"author":{"gitId":"jay9645"},"content":"    //Resused from https://howtodoinjava.com/java/java-security/java-aes-encryption-example/"},{"lineNumber":252,"author":{"gitId":"jay9645"},"content":"    private void encryptAndStorePassword() throws IOException, NoSuchPaddingException,"},{"lineNumber":253,"author":{"gitId":"jay9645"},"content":"            NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException {"},{"lineNumber":254,"author":{"gitId":"jay9645"},"content":"        //Encrypt this.password using DES into a byte[]."},{"lineNumber":255,"author":{"gitId":"jay9645"},"content":"        SecretKey myKey \u003d getSecretKeyFromEncryptionKey();"},{"lineNumber":256,"author":{"gitId":"jay9645"},"content":"        Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":257,"author":{"gitId":"jay9645"},"content":"        cipher.init(Cipher.ENCRYPT_MODE, myKey);"},{"lineNumber":258,"author":{"gitId":"jay9645"},"content":"        byte[] passwordBytes \u003d this.getPassword().getBytes(StandardCharsets.UTF_8);"},{"lineNumber":259,"author":{"gitId":"jay9645"},"content":"        byte[] passwordEncrypted \u003d cipher.doFinal(passwordBytes);"},{"lineNumber":260,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":261,"author":{"gitId":"jay9645"},"content":"        //Write the encrypted password byte[] into the password file."},{"lineNumber":262,"author":{"gitId":"jay9645"},"content":"        File passwordFile \u003d new File(this.getPasswordFilePath());"},{"lineNumber":263,"author":{"gitId":"jay9645"},"content":"        FileUtil.createParentDirsOfFile(passwordFile.toPath());"},{"lineNumber":264,"author":{"gitId":"jay9645"},"content":"        FileOutputStream outputStream \u003d new FileOutputStream(passwordFile);"},{"lineNumber":265,"author":{"gitId":"jay9645"},"content":"        outputStream.write(passwordEncrypted);"},{"lineNumber":266,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":268,"author":{"gitId":"jay9645"},"content":"    //@@authoer swayongshen-rused"},{"lineNumber":269,"author":{"gitId":"jay9645"},"content":"    //Resused from https://howtodoinjava.com/java/java-security/java-aes-encryption-example/"},{"lineNumber":270,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":271,"author":{"gitId":"jay9645"},"content":"     * Decrypts the bytes of the encrypted password which was read from the password file."},{"lineNumber":272,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":273,"author":{"gitId":"jay9645"},"content":"    private String decryptPassword(byte[] encryptedPasswordBytes) throws NoSuchPaddingException,"},{"lineNumber":274,"author":{"gitId":"jay9645"},"content":"            NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {"},{"lineNumber":275,"author":{"gitId":"jay9645"},"content":"        Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5PADDING\");"},{"lineNumber":276,"author":{"gitId":"jay9645"},"content":"        SecretKey myKey \u003d this.getSecretKeyFromEncryptionKey();"},{"lineNumber":277,"author":{"gitId":"jay9645"},"content":"        cipher.init(Cipher.DECRYPT_MODE, myKey);"},{"lineNumber":278,"author":{"gitId":"jay9645"},"content":"        byte[] textDecrypted \u003d cipher.doFinal(encryptedPasswordBytes);"},{"lineNumber":279,"author":{"gitId":"jay9645"},"content":"        return new String(textDecrypted);"},{"lineNumber":280,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":282,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":283,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":283}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedInsurancePolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":" * Jackson-friendly version of {@link InsurancePolicy}."},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"public class JsonAdaptedInsurancePolicy {"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"    private static final String NO_URL \u003d \"no_url\";"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    private final String policyId;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    private final String policyUrl;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"     * Constructs a {@code JsonAdaptedInsurancePolicy} with the given {@code policyId}."},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    @JsonCreator"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    public JsonAdaptedInsurancePolicy(String policyAndUrlIfPresent) {"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"        String[] policyAndUrl \u003d policyIdAndUrlParser(policyAndUrlIfPresent);"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        this.policyId \u003d policyAndUrl[0];"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        this.policyUrl \u003d policyAndUrl[1];"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Converts a given {@code InsurancePolicy} into this class for Jackson use."},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    public JsonAdaptedInsurancePolicy(InsurancePolicy source) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        policyId \u003d source.policyId;"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        policyUrl \u003d source.getOptionalPolicyUrl().orElse(null);"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"     * Parses raw input from JSON file and returns in a format usable by {@code InsurancePolicy} constructor."},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"     * @param policyAndUrlIfPresent raw input form JSON file."},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"     * @return policy ID and policy URL (if any) stored in an array."},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    public static String[] policyIdAndUrlParser(String policyAndUrlIfPresent) {"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        String[] policyIdAndUrl \u003d policyAndUrlIfPresent.split(\"\u003e\", 2);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        if (policyIdAndUrl.length \u003d\u003d 1) {"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"            return new String[] {policyIdAndUrl[0], NO_URL};"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        policyIdAndUrl[1] \u003d definePolicyUrl(policyIdAndUrl[1]);"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        return policyIdAndUrl;"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"    private static String definePolicyUrl(String urlIfPresent) {"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        if (urlIfPresent.equals(NO_URL)) {"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"            return NO_URL;"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        return urlIfPresent;"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"    @JsonValue"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"    public String getPolicyInfo() {"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        return policyId + \"\u003e\" + policyUrl;"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"     * Converts this Jackson-friendly adapted InsurancePolicy object into the model\u0027s {@code InsurancePolicy} object."},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"    public InsurancePolicy toModelType() {"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        return new InsurancePolicy(policyId, policyUrl);"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":34,"jay9645":36,"jlxw48":2}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"    private final List\u003cJsonAdaptedInsurancePolicy\u003e policies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"            @JsonProperty(\"policies\") List\u003cJsonAdaptedInsurancePolicy\u003e policies) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"        if (policies !\u003d null) {"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"            this.policies.addAll(policies);"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"        phone \u003d source.getPhone().get().value;"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        email \u003d source.getEmail().get().value;"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        address \u003d source.getAddress().get().value;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        policies.addAll(source.getPolicies().stream()"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"                .map(JsonAdaptedInsurancePolicy::new)"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"        final List\u003cInsurancePolicy\u003e personPolicies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"        for (JsonAdaptedInsurancePolicy policy : policies) {"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"            personPolicies.add(policy.toModelType());"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"        final List\u003cInsurancePolicy\u003e modelPolicies \u003d new ArrayList\u003c\u003e(personPolicies);"},{"lineNumber":122,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":123,"author":{"gitId":"swayongshen"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelPolicies);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":19,"-":104,"jay9645":3}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    private PoliciesWindow policiesWindow;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        policiesWindow \u003d new PoliciesWindow();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":92,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":98,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":102,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"jay9645"},"content":"     * Opens a window to display all policies associated with selected client, or focuses on it if it\u0027s already opened."},{"lineNumber":154,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"jay9645"},"content":"    @FXML"},{"lineNumber":156,"author":{"gitId":"jay9645"},"content":"    public void showPolicies(String nameAndPolicies) {"},{"lineNumber":157,"author":{"gitId":"jay9645"},"content":"        String[] nameAndPoliciesSplit \u003d nameAndPolicies.split(\"@\", 2);"},{"lineNumber":158,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":159,"author":{"gitId":"jay9645"},"content":"        if (nameAndPoliciesSplit.length \u003d\u003d 1) {"},{"lineNumber":160,"author":{"gitId":"jay9645"},"content":"            policiesWindow.noPolicyToDisplay(nameAndPoliciesSplit[0]);"},{"lineNumber":161,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"jay9645"},"content":"            final String name \u003d nameAndPoliciesSplit[0];"},{"lineNumber":163,"author":{"gitId":"jay9645"},"content":"            final String allPolicies \u003d nameAndPoliciesSplit[1];"},{"lineNumber":164,"author":{"gitId":"jay9645"},"content":"            policiesWindow.setPoliciesToDisplay(name, allPolicies);"},{"lineNumber":165,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":167,"author":{"gitId":"jay9645"},"content":"        if (!policiesWindow.isShowing()) {"},{"lineNumber":168,"author":{"gitId":"jay9645"},"content":"            policiesWindow.show();"},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":"            policiesWindow.focus();"},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":202,"author":{"gitId":"jay9645"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser()); // TODO: make this output neater"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"jay9645"},"content":"            if (commandResult.isShowPolicies()) {"},{"lineNumber":210,"author":{"gitId":"jay9645"},"content":"                showPolicies(commandResult.getFeedbackToUser());"},{"lineNumber":211,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":195,"jay9645":29}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"    private Label insurancePolicies;"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"    private VBox gridPane;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"     * Creates a {@code PersonCard} with the given {@code Person} and index to display."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"        if (!person.getPolicies().isEmpty()) {"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"            insurancePolicies.setText(person.getPolicies().stream()"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"                .map(Object::toString)"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"                .collect(Collectors.joining(\"\\n\")));"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"            gridPane.getChildren().remove(insurancePolicies);"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"            gridPane.setMinHeight(gridPane.getMinHeight() - 20);"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        if (!person.getTags().isEmpty()) {"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"            person.getTags().stream()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        if (person.getPhone().isPresent()) {"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"            phone.setText(person.getPhone().get().value);"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"            gridPane.getChildren().remove(phone);"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"            gridPane.setMinHeight(gridPane.getMinHeight() - 20);"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"        if (person.getAddress().isPresent()) {"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"            address.setText(person.getAddress().get().value);"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"            gridPane.getChildren().remove(address);"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"            gridPane.setMinHeight(gridPane.getMinHeight() - 20);"},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"        if (person.getEmail().isPresent()) {"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":"            email.setText(person.getEmail().get().value);"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"            gridPane.getChildren().remove(email);"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"            gridPane.setMinHeight(gridPane.getMinHeight() - 20);"},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":5,"-":72,"jay9645":34}},{"path":"src/main/java/seedu/address/ui/PoliciesWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import javafx.geometry.Insets;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"public class PoliciesWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"    private static final String NO_POLICY_FEEDBACK \u003d \"This contact has no policies now!\";"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    private static final String NOT_URL \u003d \"No URL!\";"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(PoliciesWindow.class);"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    private static final String FXML \u003d \"PoliciesWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    private static final String COPY_URL_TEXT \u003d \"Copy URL!\";"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"    private VBox outerBox;"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"     * Creates a new PoliciesWindow."},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"     * @param root Stage to use as the root of the PoliciesWindow."},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"    public PoliciesWindow(Stage root) {"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        super(FXML, root);"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"     * Creates a new PoliciesWindow."},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"    public PoliciesWindow() {"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        this(new Stage());"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"     * Shows the policies window."},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"     * @throws IllegalStateException"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"     * \u003cul\u003e"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"     *     \u003cli\u003e"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"     *     \u003c/li\u003e"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"     *     \u003cli\u003e"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"     *     \u003c/li\u003e"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"     * \u003c/ul\u003e"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"    public void show() {"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"        logger.fine(\"Showing policies, if any, associated with chosen contact.\");"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        getRoot().show();"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"     * Returns true if the policies window is currently being shown."},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"    public boolean isShowing() {"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        return getRoot().isShowing();"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"     * Hides the policies window."},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"    public void hide() {"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"        getRoot().hide();"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"     * Focuses on the policies window."},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"    public void focus() {"},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"        getRoot().requestFocus();"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"     * Copies the URL to the policy to the clipboard."},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"    private void copyUrl(String urlToCopy) {"},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":95,"author":{"gitId":"jay9645"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":96,"author":{"gitId":"jay9645"},"content":"        url.putString(urlToCopy);"},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":"        clipboard.setContent(url);"},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"     * Formats a policy window for a contact with no policies."},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"     * @param noPolicyFeedback {@code String} to display indicating that contact has no policies."},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":"    public void noPolicyToDisplay(String noPolicyFeedback) {"},{"lineNumber":106,"author":{"gitId":"jay9645"},"content":"        HBox row \u003d new HBox();"},{"lineNumber":107,"author":{"gitId":"jay9645"},"content":"        row.getChildren().add(new Label(noPolicyFeedback));"},{"lineNumber":108,"author":{"gitId":"jay9645"},"content":"        outerBox.getChildren().clear();"},{"lineNumber":109,"author":{"gitId":"jay9645"},"content":"        outerBox.getChildren().add(row);"},{"lineNumber":110,"author":{"gitId":"jay9645"},"content":"        outerBox.setPadding(new Insets(25, 50, 25, 50));"},{"lineNumber":111,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":113,"author":{"gitId":"jay9645"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"jay9645"},"content":"     * Formats and sets up policies and their URLs for display in window."},{"lineNumber":115,"author":{"gitId":"jay9645"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"jay9645"},"content":"     * @param policiesToDisplay joined {@code String} of all policies associated with the chosen contact."},{"lineNumber":117,"author":{"gitId":"jay9645"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"jay9645"},"content":"    public void setPoliciesToDisplay(String name, String policiesToDisplay) {"},{"lineNumber":119,"author":{"gitId":"jay9645"},"content":"        // TODO: tidy up code"},{"lineNumber":120,"author":{"gitId":"jay9645"},"content":"        outerBox.getChildren().clear();"},{"lineNumber":121,"author":{"gitId":"jay9645"},"content":"        String[] split \u003d policiesToDisplay.split(\"\\n\");"},{"lineNumber":122,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":123,"author":{"gitId":"jay9645"},"content":"        getRoot().setTitle(name + \"\\\u0027s Policies\");"},{"lineNumber":124,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":125,"author":{"gitId":"jay9645"},"content":"        for (int i \u003d 0; i \u003c split.length; i++) {"},{"lineNumber":126,"author":{"gitId":"jay9645"},"content":"            HBox row \u003d new HBox(10);"},{"lineNumber":127,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":128,"author":{"gitId":"jay9645"},"content":"            String[] policyNumAndUrl \u003d split[i].split(\": \", 2);"},{"lineNumber":129,"author":{"gitId":"jay9645"},"content":"            final String possibleUrl \u003d policyNumAndUrl[1];"},{"lineNumber":130,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":131,"author":{"gitId":"jay9645"},"content":"            if (isUrl(possibleUrl)) {"},{"lineNumber":132,"author":{"gitId":"jay9645"},"content":"                Button rowButton \u003d new Button(COPY_URL_TEXT);"},{"lineNumber":133,"author":{"gitId":"jay9645"},"content":"                rowButton.setOnAction(e -\u003e copyUrl(possibleUrl));"},{"lineNumber":134,"author":{"gitId":"jay9645"},"content":"                row.setAlignment(Pos.CENTER);"},{"lineNumber":135,"author":{"gitId":"jay9645"},"content":"                row.getChildren().addAll(new Label(split[i]), rowButton);"},{"lineNumber":136,"author":{"gitId":"jay9645"},"content":"            } else {"},{"lineNumber":137,"author":{"gitId":"jay9645"},"content":"                row.getChildren().addAll(new Label(split[i]));"},{"lineNumber":138,"author":{"gitId":"jay9645"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"jay9645"},"content":"            outerBox.getChildren().add(row);"},{"lineNumber":140,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"jay9645"},"content":"        outerBox.setSpacing(10);"},{"lineNumber":142,"author":{"gitId":"jay9645"},"content":"        outerBox.setPadding(new Insets(25, 50, 25, 50));"},{"lineNumber":143,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":145,"author":{"gitId":"jay9645"},"content":"    private boolean hasPoliciesToDisplay(String[] split) {"},{"lineNumber":146,"author":{"gitId":"jay9645"},"content":"        return !split[0].equals(NO_POLICY_FEEDBACK);"},{"lineNumber":147,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":149,"author":{"gitId":"jay9645"},"content":"    private boolean isUrl(String possibleUrl) {"},{"lineNumber":150,"author":{"gitId":"jay9645"},"content":"        return !possibleUrl.equals(NOT_URL);"},{"lineNumber":151,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":152}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"         title\u003d\"ClientBook\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"\u003c!--          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Policies\"\u003e--\u003e"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"\u003c!--            \u003cMenuItem fx:id\u003d\"policiesMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#showPolicies\" text\u003d\"Help\" /\u003e--\u003e"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"\u003c!--          \u003c/Menu\u003e--\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"-":59,"jay9645":4}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    \u003cVBox fx:id\u003d\"gridPane\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"      \u003cLabel fx:id\u003d\"insurancePolicies\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$insurancePolicies\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"swayongshen":1,"-":35,"jay9645":1}},{"path":"src/main/resources/view/PoliciesWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Policies\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"    \u003cicons\u003e"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"    \u003c/icons\u003e"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"    \u003cscene\u003e"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"        \u003cScene\u003e"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"            \u003cVBox fx:id\u003d\"outerBox\" alignment\u003d\"CENTER\"\u003e"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"                \u003cchildren /\u003e"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"            \u003c/VBox\u003e"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"        \u003c/Scene\u003e"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    \u003c/scene\u003e"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"jay9645":19}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [\"#1111\u003eno_url\"]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ],"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [\"P#2222\u003ewww.youtube.com\"]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"    \"tagged\" : [ ],"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [ ]"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [ \"Pol_3333\u003eno_url\", \"Pol_3334\u003ewww.google.com\" ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"    \"tagged\" : [ ],"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [ ]"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"    \"tagged\" : [ ],"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"    \"tagged\" : [ ],"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"    \"policies\" : [ \"Policy_4444\u003eno_url\", \"Policy_4445\u003ewww.facebook.com\", \"Policy_4446\u003eno_url\","},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"      \"Policy_4447\u003ewww.yahoo.com\" ]"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":2,"-":39,"jay9645":13}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withPolicies().build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":133,"author":{"gitId":"jay9645"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new Authentication());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":1,"-":160,"jay9645":2}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import java.util.Comparator;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.attribute.Attribute;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":154,"author":{"gitId":"jay9645"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"jay9645"},"content":"        public void updatePersonListByAttribute(Attribute attributeType) {"},{"lineNumber":156,"author":{"gitId":"jay9645"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":159,"author":{"gitId":"jay9645"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"jay9645"},"content":"        public Authentication getAuthentication() {"},{"lineNumber":161,"author":{"gitId":"jay9645"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":164,"author":{"gitId":"jay9645"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"jay9645"},"content":"        public void undoListModification() {"},{"lineNumber":166,"author":{"gitId":"jay9645"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":169,"author":{"gitId":"jay9645"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"jay9645"},"content":"        public void updateSortedPersonList(Comparator\u003cPerson\u003e comparator) {"},{"lineNumber":171,"author":{"gitId":"jay9645"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"jay9645"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":194,"jay9645":23}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Authentication());"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new Authentication());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":30,"jay9645":3}},{"path":"src/test/java/seedu/address/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":49,"jay9645":5}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE_POLICY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    public static final String VALID_POLICY_ID \u003d \"P#1245\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"    public static final String POLICY_DESC \u003d \" \" + PREFIX_INSURANCE_POLICY + VALID_POLICY_ID;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"                .withPolicies(VALID_POLICY_ID).build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":5,"-":127}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":19,"jay9645":1}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        PhoneContainsKeywordsPredicate thirdPredicate \u003d"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"        // different search field -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        assertFalse(findFirstCommand.equals(findThirdCommand));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"n/\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz \u0026 Elle \u0026 Kunz\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\u0026\\\\s+\")));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":80,"jay9645":10}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":19,"jay9645":1}},{"path":"src/test/java/seedu/address/logic/commands/LockCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":" * {@code LockCommand}."},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"public class LockCommandTest {"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    private static final String DEFAULT_PASSWORD \u003d \"1234\";"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"    private static final String NEW_PASSWORD \u003d \"5678\";"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"LockTest\");"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"            new Authentication(TEST_DATA_FOLDER));"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    public void execute_newLock_success() throws CommandException {"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        LockCommand command \u003d new LockCommand(DEFAULT_PASSWORD);"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        command.execute(model);"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        assertEquals(DEFAULT_PASSWORD, model.getAuthentication().getPassword());"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"    public void execute_replacePassword_success() throws CommandException {"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        LockCommand setOldPassword \u003d new LockCommand(DEFAULT_PASSWORD);"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        setOldPassword.execute(model);"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        LockCommand replaceWithNewPassword \u003d new LockCommand(DEFAULT_PASSWORD, NEW_PASSWORD);"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"        replaceWithNewPassword.execute(model);"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        assertEquals(NEW_PASSWORD, model.getAuthentication().getPassword());"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"    public void execute_useSamePassword_success() throws CommandException {"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        LockCommand setOldPassword \u003d new LockCommand(DEFAULT_PASSWORD);"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        setOldPassword.execute(model);"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        model.getAuthentication().removePassword();"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        LockCommand restorePassword \u003d new LockCommand();"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        restorePassword.execute(model);"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        assertEquals(DEFAULT_PASSWORD, model.getAuthentication().getPassword());"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":63}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"public class SortCommandTest {"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"    public void execute_nameSortedInAscendingOrder() {"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        SortCommand sortCommand \u003d new SortCommand(SortCommand.DIRECTION_ASCENDING);"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"        Comparator\u003cPerson\u003e comparator \u003d new SortCommand.PersonNameComparator();"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        expectedModel.updateSortedPersonList(comparator);"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS_ASCENDING, expectedModel);"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    public void execute_nameSortedInDescendingOrder() {"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"        SortCommand sortCommand \u003d new SortCommand(SortCommand.DIRECTION_DESCENDING);"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        Comparator\u003cPerson\u003e comparator \u003d new SortCommand.PersonNameComparator();"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        comparator \u003d comparator.reversed();"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        expectedModel.updateSortedPersonList(comparator);"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS_DESCENDING, expectedModel);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":45}},{"path":"src/test/java/seedu/address/logic/commands/UnlockCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"import seedu.address.storage.Authentication;"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":" * {@code LockCommand}."},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":" */"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"public class UnlockCommandTest {"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"    private static final String DEFAULT_PASSWORD \u003d \"1234\";"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"    private static final String INCORRECT_PASSWORD \u003d \"5678\";"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"LockTest\");"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"            new Authentication(TEST_DATA_FOLDER));"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"    public void execute_unlock_success() throws CommandException, NoSuchPaddingException, NoSuchAlgorithmException,"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"            IOException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException {"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        model.getAuthentication().setPassword(Optional.of(DEFAULT_PASSWORD));"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"        UnlockCommand command \u003d new UnlockCommand(DEFAULT_PASSWORD);"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        command.execute(model);"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        assertEquals(\"\", model.getAuthentication().getPassword());"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"    public void execute_unlockWrongPassword_throwsCommandException() throws NoSuchPaddingException,"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"            NoSuchAlgorithmException, IOException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException {"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        model.getAuthentication().setPassword(Optional.of(DEFAULT_PASSWORD));"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        UnlockCommand command \u003d new UnlockCommand(INCORRECT_PASSWORD);"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        assertCommandFailure(command, model, UnlockCommand.MESSAGE_INCORRECT_PASSWORD);"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":54}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withPolicies().build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":1,"-":140}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \u0026 \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -policy\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -phone\") instanceof ListCommand);"},{"lineNumber":90,"author":{"gitId":"jay9645"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -address\") instanceof ListCommand);"},{"lineNumber":91,"author":{"gitId":"jay9645"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" -email\") instanceof ListCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":99,"jay9645":5}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"        assertParseFailure(parser, \"1 z/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":1,"-":210}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.InsurancePolicyContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"        FindCommand expectedNameFindCommand \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        FindCommand expectedPhoneFindCommand \u003d"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"                new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"12345\", \"98765\")));"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        FindCommand expectedEmailFindCommand \u003d"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"                new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"sam@mail.com\", \"bob@mail.com\")));"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        FindCommand expectedAddressFindCommand \u003d"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"                new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Bedok\", \"Tampines\")));"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        FindCommand expectedTagFindCommand \u003d"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friend\", \"family\")));"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        FindCommand expectedInsurancePolicyFindCommand \u003d"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"                new FindCommand(new InsurancePolicyContainsKeywordsPredicate(Arrays.asList(\"P12345\", \"P98765\")));"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"n/Alice \u0026 Bob\", expectedNameFindCommand);"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"p/12345 \u0026 98765\", expectedPhoneFindCommand);"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"e/sam@mail.com \u0026 bob@mail.com\", expectedEmailFindCommand);"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"a/Bedok \u0026 Tampines\", expectedAddressFindCommand);"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"t/friend \u0026 family\", expectedTagFindCommand);"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"i/P12345 \u0026 P98765\", expectedInsurancePolicyFindCommand);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"\\n n/ \\n Alice \\n \u0026 \\t Bob  \\t\", expectedNameFindCommand);"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"\\n p/ \\n 12345 \\n \u0026 \\t 98765  \\t\", expectedPhoneFindCommand);"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"\\n e/ \\n sam@mail.com \\n \u0026 \\t bob@mail.com  \\t\", expectedEmailFindCommand);"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"\\n a/ \\n Bedok \\n \u0026 \\t Tampines  \\t\", expectedAddressFindCommand);"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"\\n t/ \\n friend \\n \u0026 \\t family  \\t\", expectedTagFindCommand);"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"\\n i/ \\n P12345 \\n \u0026 \\t P98765  \\t\", expectedInsurancePolicyFindCommand);"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    public void parse_invalidFlag_throwsParseException() {"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        assertParseFailure(parser, \"address/Bedok \u0026 Tampines\","},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"    public void parse_emptyKeywords_throwParseException() {"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        assertParseFailure(parser, \"n/John \u0026 \u0026 Tom\","},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"    public void parse_multipleFlag_throwParseException() {"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"        assertParseFailure(parser, \"n/John p/98765432\","},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"    public void parse_noFlag_throwParseException() {"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"        assertParseFailure(parser, \"98765432\","},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":29,"jay9645":55}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    private static final String INVALID_POLICYID_NO_URL \u003d \"Policy_123\";"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    private static final String INVALID_POLICYID_URL \u003d \"Policy_12345\u003ewww.google.com\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"    private static final String VALID_POLICYID_NO_URL \u003d \"Policy_1234\";"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"    private static final String VALID_POLICYID_URL \u003d \"Policy_1235\u003ewww.google.com\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":196,"jay9645":4}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":"public class SortCommandParserTest {"},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"    public void parse_validArgs_returnsSortCommand() {"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"        // user want to sort in ascending order"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"-a\", new SortCommand(SortCommand.DIRECTION_ASCENDING));"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        // user want to sort in descending order"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        assertParseSuccess(parser, \"-d\", new SortCommand(SortCommand.DIRECTION_DESCENDING));"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":28}},{"path":"src/test/java/seedu/address/model/person/AddressContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"public class AddressContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"                new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        AddressContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"    public void test_addressContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        AddressContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"                new AddressContainsKeywordsPredicate(Collections.singletonList(\"Orchard\"));"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Orchard Road\").build()));"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Orchard\", \"Road\"));"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Orchard Road\").build()));"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Tampines\", \"Bedok\"));"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Bedok South\").build()));"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"oRChaRD\", \"rOaD\"));"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Orchard Road\").build()));"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Clementi Street\").build()));"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Outram\"));"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Jurong East\").build()));"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"        // Keywords match phone, email and name, but does not match address"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Alice\"));"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":79}},{"path":"src/test/java/seedu/address/model/person/EmailContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"public class EmailContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d new EmailContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"        EmailContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"    public void test_emailContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        EmailContainsKeywordsPredicate predicate \u003d"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice\"));"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alice@mail.com\").build()));"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        // Multiple keywords"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\", \"tan\"));"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alicetan@mail.com\").build()));"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        // Only one matching keyword"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\", \"carol\"));"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"bob@mail.com\").build()));"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        // Mixed-case keywords"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"tAN\"));"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"alicetan@mail.com\").build()));"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"    public void test_emailDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"        // Zero keywords"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"alice@mail.com\").build()));"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"        // Non-matching keyword"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"carol\"));"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"bob@mail.com\").build()));"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        // Keywords match phone, name and address, but does not match email"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Brice\", \"Main\", \"Street\"));"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Brice\").withPhone(\"12345\")"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"                .withEmail(\"rice@mail.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":77}},{"path":"src/test/java/seedu/address/model/person/InsurancePolicyContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"public class InsurancePolicyContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        InsurancePolicyContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"                new InsurancePolicyContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":"        InsurancePolicyContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"                new InsurancePolicyContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        InsurancePolicyContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"                new InsurancePolicyContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"    public void test_insurancePolicyContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        InsurancePolicyContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"                new InsurancePolicyContainsKeywordsPredicate(Collections.singletonList(\"P12345\"));"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPolicies(\"P12345\").build()));"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new InsurancePolicyContainsKeywordsPredicate(Arrays.asList(\"12\", \"345\"));"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPolicies(\"P12345\").build()));"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new InsurancePolicyContainsKeywordsPredicate(Arrays.asList(\"987\", \"P12\"));"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPolicies(\"P12345\").build()));"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new InsurancePolicyContainsKeywordsPredicate(Arrays.asList(\"p123\", \"P1234\"));"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPolicies(\"P12345\").build()));"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"    public void test_insurancePolicyDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"        InsurancePolicyContainsKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"                new InsurancePolicyContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPolicies(\"P12345\").build()));"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new InsurancePolicyContainsKeywordsPredicate(Arrays.asList(\"P98765\"));"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPolicies(\"P12345\").build()));"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"        // Keywords match phone, email and address, but does not match insurance policy"},{"lineNumber":76,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new InsurancePolicyContainsKeywordsPredicate("},{"lineNumber":77,"author":{"gitId":"jay9645"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPolicies(\"P98765\").build()));"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":81}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POLICY_ID;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"        // different policies -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPolicies(VALID_POLICY_ID).build();"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":5,"-":91}},{"path":"src/test/java/seedu/address/model/person/PhoneContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"public class PhoneContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"98765432\");"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"98765432\", \"12345678\");"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"    public void test_phoneContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"98765432\"));"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        // Multiple keywords"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"98765\", \"65432\"));"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        // Only one matching keyword"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"12345\", \"65432\"));"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"    public void test_phoneDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"        // Zero keywords"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"        // Non-matching keyword"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"12345\"));"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"98765432\").build()));"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"        // Keywords match name, email and address, but does not match phone"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"123456\")"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":73}},{"path":"src/test/java/seedu/address/model/person/TagContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jay9645"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":3,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"jay9645"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":6,"author":{"gitId":"jay9645"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"jay9645"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"jay9645"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":10,"author":{"gitId":"jay9645"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":12,"author":{"gitId":"jay9645"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":14,"author":{"gitId":"jay9645"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":16,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"jay9645"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"jay9645"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":21,"author":{"gitId":"jay9645"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"jay9645"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":24,"author":{"gitId":"jay9645"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":31,"author":{"gitId":"jay9645"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":34,"author":{"gitId":"jay9645"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"friend\"));"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"best\", \"friend\"));"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"bestfriend\").build()));"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friend\", \"family\"));"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"bestfriend\").build()));"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"fRIenD\", \"bEST\"));"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"bestfriend\").build()));"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\").build()));"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friend\"));"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"family\").build()));"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":""},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"        // Keywords match phone, email and address, but does not match tag"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"family\").build()));"},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"}"}],"authorContributionMap":{"jay9645":75}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().get().toString();"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().get().toString();"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().get().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"    private static final List\u003cJsonAdaptedInsurancePolicy\u003e VALID_POLICIES \u003d BENSON.getPolicies().stream()"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"            .map(JsonAdaptedInsurancePolicy::new)"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"                        VALID_TAGS, VALID_POLICIES);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"                VALID_POLICIES);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"                        VALID_POLICIES);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"                VALID_POLICIES);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"                        VALID_POLICIES);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"                VALID_POLICIES);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"                        VALID_POLICIES);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"                VALID_POLICIES);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":117,"author":{"gitId":"swayongshen"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,"},{"lineNumber":118,"author":{"gitId":"swayongshen"},"content":"                        VALID_POLICIES);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":21,"-":98,"jay9645":3}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        descriptor.setPhone(person.getPhone().get());"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        descriptor.setEmail(person.getEmail().get());"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"        descriptor.setAddress(person.getAddress().get());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"        descriptor.setPolicies(person.getPolicies());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"     * Parses the {@code policies} into a {@code List\u003cInsurancePolicy\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"     * that we are building."},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"    public EditPersonDescriptorBuilder withPolicies(String... policyIds) {"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"        List\u003cInsurancePolicy\u003e policyList \u003d Stream.of(policyIds).map(InsurancePolicy::new).collect(Collectors.toList());"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"        descriptor.setPolicies(policyList);"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"        return this;"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":13,"-":84,"jay9645":3}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    private List\u003cInsurancePolicy\u003e policies;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        policies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"        phone \u003d personToCopy.getPhone().get();"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"        email \u003d personToCopy.getEmail().get();"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"        address \u003d personToCopy.getAddress().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        policies \u003d new ArrayList\u003c\u003e(personToCopy.getPolicies());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"     * Sets the {@code policies} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"    public PersonBuilder withPolicies(String ... policies) {"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"        this.policies \u003d SampleDataUtil.getPolicyList(policies);"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"        return this;"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"        return new Person(name, phone, email, address, tags, policies);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":13,"-":92,"jay9645":5}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INSURANCE_POLICY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"import seedu.address.model.insurancepolicy.InsurancePolicy;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitId":"jay9645"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().get().value + \" \");"},{"lineNumber":38,"author":{"gitId":"jay9645"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().get().value + \" \");"},{"lineNumber":39,"author":{"gitId":"jay9645"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().get().value + \" \");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        person.getPolicies().stream().forEach("},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"            s -\u003e sb.append(PREFIX_INSURANCE_POLICY + s.policyId + \" \")"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        );"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"                sb.append(PREFIX_TAG).append(\" \");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        if (descriptor.getPolicies().isPresent()) {"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"            List\u003cInsurancePolicy\u003e policies \u003d descriptor.getPolicies().get();"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"            if (policies.isEmpty()) {"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"                sb.append(PREFIX_INSURANCE_POLICY);"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"            } else {"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"                policies.forEach(s -\u003e sb.append(PREFIX_INSURANCE_POLICY).append(s.policyId).append(\" \"));"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":15,"-":58,"jay9645":3}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POLICY_ID;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jay9645"},"content":"    public static final Person ALICE \u003d new PersonBuilder()"},{"lineNumber":28,"author":{"gitId":"jay9645"},"content":"            .withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\")"},{"lineNumber":30,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            .withTags(\"friends\")"},{"lineNumber":33,"author":{"gitId":"jay9645"},"content":"            .withPolicies(\"#1111\u003eno_url\")"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            .build();"},{"lineNumber":35,"author":{"gitId":"jay9645"},"content":"    public static final Person BENSON \u003d new PersonBuilder()"},{"lineNumber":36,"author":{"gitId":"jay9645"},"content":"            .withName(\"Benson Meier\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":40,"author":{"gitId":"jay9645"},"content":"            .withPolicies(\"P#2222\u003ewww.youtube.com\")"},{"lineNumber":41,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":42,"author":{"gitId":"jay9645"},"content":"    public static final Person CARL \u003d new PersonBuilder()"},{"lineNumber":43,"author":{"gitId":"jay9645"},"content":"            .withName(\"Carl Kurz\")"},{"lineNumber":44,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"95352563\")"},{"lineNumber":45,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"heinz@example.com\")"},{"lineNumber":46,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"wall street\")"},{"lineNumber":47,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":48,"author":{"gitId":"jay9645"},"content":"    public static final Person DANIEL \u003d new PersonBuilder()"},{"lineNumber":49,"author":{"gitId":"jay9645"},"content":"            .withName(\"Daniel Meier\")"},{"lineNumber":50,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"87652533\")"},{"lineNumber":51,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":52,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"10th street\")"},{"lineNumber":53,"author":{"gitId":"jay9645"},"content":"            .withTags(\"friends\")"},{"lineNumber":54,"author":{"gitId":"jay9645"},"content":"            .withPolicies(\"Pol_3333\u003eno_url\", \"Pol_3334\u003ewww.google.com\")"},{"lineNumber":55,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":56,"author":{"gitId":"jay9645"},"content":"    public static final Person ELLE \u003d new PersonBuilder()"},{"lineNumber":57,"author":{"gitId":"jay9645"},"content":"            .withName(\"Elle Meyer\")"},{"lineNumber":58,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"9482224\")"},{"lineNumber":59,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"werner@example.com\")"},{"lineNumber":60,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"michegan ave\")"},{"lineNumber":61,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":62,"author":{"gitId":"jay9645"},"content":"    public static final Person FIONA \u003d new PersonBuilder()"},{"lineNumber":63,"author":{"gitId":"jay9645"},"content":"            .withName(\"Fiona Kunz\")"},{"lineNumber":64,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"9482427\")"},{"lineNumber":65,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"lydia@example.com\")"},{"lineNumber":66,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"little tokyo\")"},{"lineNumber":67,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":68,"author":{"gitId":"jay9645"},"content":"    public static final Person GEORGE \u003d new PersonBuilder()"},{"lineNumber":69,"author":{"gitId":"jay9645"},"content":"            .withName(\"George Best\")"},{"lineNumber":70,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"9482442\")"},{"lineNumber":71,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"anna@example.com\")"},{"lineNumber":72,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"4th street\")"},{"lineNumber":73,"author":{"gitId":"jay9645"},"content":"            .withPolicies(\"Policy_4444\u003eno_url\", \"Policy_4445\u003ewww.facebook.com\", \"Policy_4446\u003eno_url\","},{"lineNumber":74,"author":{"gitId":"jay9645"},"content":"                    \"Policy_4447\u003ewww.yahoo.com\")"},{"lineNumber":75,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":78,"author":{"gitId":"jay9645"},"content":"    public static final Person HOON \u003d new PersonBuilder()"},{"lineNumber":79,"author":{"gitId":"jay9645"},"content":"            .withName(\"Hoon Meier\")"},{"lineNumber":80,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"8482424\")"},{"lineNumber":81,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"stefan@example.com\")"},{"lineNumber":82,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"little india\")"},{"lineNumber":83,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":84,"author":{"gitId":"jay9645"},"content":"    public static final Person IDA \u003d new PersonBuilder()"},{"lineNumber":85,"author":{"gitId":"jay9645"},"content":"            .withName(\"Ida Mueller\")"},{"lineNumber":86,"author":{"gitId":"jay9645"},"content":"            .withPhone(\"8482131\")"},{"lineNumber":87,"author":{"gitId":"jay9645"},"content":"            .withEmail(\"hans@example.com\")"},{"lineNumber":88,"author":{"gitId":"jay9645"},"content":"            .withAddress(\"chicago ave\")"},{"lineNumber":89,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":92,"author":{"gitId":"jay9645"},"content":"    public static final Person AMY \u003d new PersonBuilder()"},{"lineNumber":93,"author":{"gitId":"jay9645"},"content":"            .withName(VALID_NAME_AMY)"},{"lineNumber":94,"author":{"gitId":"jay9645"},"content":"            .withPhone(VALID_PHONE_AMY)"},{"lineNumber":95,"author":{"gitId":"jay9645"},"content":"            .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":96,"author":{"gitId":"jay9645"},"content":"            .withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":97,"author":{"gitId":"jay9645"},"content":"            .withTags(VALID_TAG_FRIEND)"},{"lineNumber":98,"author":{"gitId":"jay9645"},"content":"            .withPolicies(VALID_POLICY_ID)"},{"lineNumber":99,"author":{"gitId":"jay9645"},"content":"            .build();"},{"lineNumber":100,"author":{"gitId":"jay9645"},"content":"    public static final Person BOB \u003d new PersonBuilder()"},{"lineNumber":101,"author":{"gitId":"jay9645"},"content":"            .withName(VALID_NAME_BOB)"},{"lineNumber":102,"author":{"gitId":"jay9645"},"content":"            .withPhone(VALID_PHONE_BOB)"},{"lineNumber":103,"author":{"gitId":"jay9645"},"content":"            .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":104,"author":{"gitId":"jay9645"},"content":"            .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":105,"author":{"gitId":"jay9645"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":4,"-":53,"jay9645":69}}]
