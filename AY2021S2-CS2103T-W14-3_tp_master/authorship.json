[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W14-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-W14-3/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-02-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"Are you a CCA leader that has to keep track of multiple CCA members, tasks and upcoming deadlines but can\u0027t seem to remember everything? Well HEY MATEz is the solution for you!","lastModifiedDate":"2021-02-25"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"## About Us","lastModifiedDate":"2021-02-25"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"Refer to the [About Us](https://github.com/AY2021S2-CS2103T-W14-3/tp/blob/master/docs/AboutUs.md) section","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"## Developer Guide","lastModifiedDate":"2021-02-25"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"Refer to the [Developer Guide](https://github.com/AY2021S2-CS2103T-W14-3/tp/blob/master/docs/DeveloperGuide.md) section","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"## User Guide","lastModifiedDate":"2021-02-25"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"Refer to the [User Guide](https://github.com/AY2021S2-CS2103T-W14-3/tp/blob/master/docs/UserGuide.md) section","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"## Source Code","lastModifiedDate":"2021-02-25"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"This project is based off the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-02-25"}],"authorContributionMap":{"zatkiller":14,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"    archiveName \u003d \u0027HEYMATEz.jar\u0027","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"run {","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"zatkiller":3,"-":73}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"### Dylan Ghee Shao Kang","lastModifiedDate":"2021-02-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"\u003cimg src\u003d\"images/zatkiller.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[homepage](http://www.comp.nus.edu.sg/~damithch)]","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"[[github](https://github.com/zatkiller)]","lastModifiedDate":"2021-02-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"* Role: Software Developer","lastModifiedDate":"2021-02-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"### Chee Erynne","lastModifiedDate":"2021-02-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"\u003cimg src\u003d\"images/cheeerynne.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"[[github](https://github.com/cheeerynne)] [[portfolio](team/johndoe.md)]","lastModifiedDate":"2021-02-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"### Lim Jean Tong, Rachel","lastModifiedDate":"2021-02-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"\u003cimg src\u003d\"images/rachelljt.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"[[github](http://github.com/rachelljt)]","lastModifiedDate":"2021-02-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"### Tasha Marion Wan hui lin","lastModifiedDate":"2021-02-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"\u003cimg src\u003d\"images/tashawan23.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"[[github](https://github.com/tashawan23)]","lastModifiedDate":"2021-02-25"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"[[portfolio](team/tashawan.md)]","lastModifiedDate":"2021-02-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tashawan23":2,"rachelljt":7,"cheeerynne":3,"zatkiller":2,"-":35}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2020-06-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"zatkiller"},"content":"This section documents some of the noteworthy details on how certain features are implemented","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":135,"author":{"gitId":"zatkiller"},"content":"### Mark as completed / uncompleted features","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"zatkiller"},"content":"The implementation of the mark as completed and uncompleted features are facilitated by the `DoneTaskCommand` and `","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"zatkiller"},"content":"UndoTaskCommand` classes respectively, both of which extends from the Command abstract class.","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":140,"author":{"gitId":"zatkiller"},"content":"It is also facilitated by the following Parser Classes:","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"zatkiller"},"content":"* `DoneTaskCommandParser`","lastModifiedDate":"2021-03-23"},{"lineNumber":142,"author":{"gitId":"zatkiller"},"content":"* `UndoTaskCommandParser`","lastModifiedDate":"2021-03-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"zatkiller"},"content":"The above mentioned Parser classes all inherit the `#parse` method from the Parser interface.","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"zatkiller"},"content":"* `DoneTaskCommandParser#parse` - checks if the arguments passed to the current DoneCommand is valid and creates an DoneTaskCommand instance if it is.","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"zatkiller"},"content":"* `UndoTaskCommandParser#parse` - checks if the arguments passed to the current Undo Command is valid and creates an UndoTaskCommand instance if it is.","lastModifiedDate":"2021-03-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":150,"author":{"gitId":"zatkiller"},"content":"Subsequently, the created `DoneTaskCommand` / `UndoTaskCommand` object contains an `#execute` method which is responsible for","lastModifiedDate":"2021-03-23"},{"lineNumber":151,"author":{"gitId":"zatkiller"},"content":"updating the status of the Task to \"completed\" or \"uncompleted\". This is achieved by creating a new `Task` object with the","lastModifiedDate":"2021-03-23"},{"lineNumber":152,"author":{"gitId":"zatkiller"},"content":"same fields and values but updating the `TaskStatus` field according to the input.","lastModifiedDate":"2021-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":154,"author":{"gitId":"zatkiller"},"content":"Below is the usage scenario and how the mark the completed mechanism behaves.","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":156,"author":{"gitId":"zatkiller"},"content":"Assumptions:","lastModifiedDate":"2021-03-23"},{"lineNumber":157,"author":{"gitId":"zatkiller"},"content":"1. User has already launched the app","lastModifiedDate":"2021-03-23"},{"lineNumber":158,"author":{"gitId":"zatkiller"},"content":"2. HEY MATEz application has an existing task","lastModifiedDate":"2021-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":160,"author":{"gitId":"zatkiller"},"content":"Step 1. User executes the `done 1` command to mark the 1st task in the task list of HEY MATEz to be completed.  A","lastModifiedDate":"2021-03-23"},{"lineNumber":161,"author":{"gitId":"zatkiller"},"content":"`DoneTaskCommandParser` is created and it calls the `DoneTaskCommandParser#parse` on the arguments","lastModifiedDate":"2021-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":163,"author":{"gitId":"zatkiller"},"content":"Step 2. `DoneTaskCommandParser#parse` method will check on the validity of the arguments for a `DoneTaskCommand`. If it","lastModifiedDate":"2021-03-23"},{"lineNumber":164,"author":{"gitId":"zatkiller"},"content":"is valid,  it will call the create a new `DoneTaskCommand` by calling the constructor.","lastModifiedDate":"2021-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":166,"author":{"gitId":"zatkiller"},"content":"Step 4. The `DoneTaskCommand#execute` is then called by the `LogicManger`. The task with the same `Index` is retrieved and","lastModifiedDate":"2021-03-23"},{"lineNumber":167,"author":{"gitId":"zatkiller"},"content":"a copy of the task is created with the same attribute values. However. the `TaskStatus` value is updated to be \u0027completed\u0027","lastModifiedDate":"2021-03-23"},{"lineNumber":168,"author":{"gitId":"zatkiller"},"content":"in the `Model`.","lastModifiedDate":"2021-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":170,"author":{"gitId":"zatkiller"},"content":"Step 5. Once the execution is completed, the message `MESSAGE_DONE_TASK_SUCCESS` is used to return a new Command Result","lastModifiedDate":"2021-03-23"},{"lineNumber":171,"author":{"gitId":"zatkiller"},"content":"with the attached message.","lastModifiedDate":"2021-03-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":173,"author":{"gitId":"zatkiller"},"content":"Below is the sequence diagram:","lastModifiedDate":"2021-03-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":175,"author":{"gitId":"zatkiller"},"content":"\u003cimg src\u003d\"images/DoneTaskSequenceDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":177,"author":{"gitId":"zatkiller"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":179,"author":{"gitId":"zatkiller"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2021-03-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":181,"author":{"gitId":"zatkiller"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2021-03-24"},{"lineNumber":182,"author":{"gitId":"zatkiller"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2021-03-24"},{"lineNumber":183,"author":{"gitId":"zatkiller"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2021-03-24"},{"lineNumber":184,"author":{"gitId":"zatkiller"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2021-03-24"},{"lineNumber":185,"author":{"gitId":"zatkiller"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2021-03-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"zatkiller"},"content":"* CCA / Club head who is managing many members","lastModifiedDate":"2021-02-25"},{"lineNumber":196,"author":{"gitId":"zatkiller"},"content":"* Needs an efficient and organised method to assign tasks to these members.","lastModifiedDate":"2021-02-25"},{"lineNumber":197,"author":{"gitId":"zatkiller"},"content":"* Need to manage a significant number of members","lastModifiedDate":"2021-02-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"zatkiller"},"content":"**Value proposition**: Manage contacts faster than a typical mouse/GUI driven app","lastModifiedDate":"2021-02-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | user starting to use the app| add in the contacts of my CCA members | have a better overview of the members in my CCA and access their information easily|","lastModifiedDate":"2021-03-21"},{"lineNumber":211,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | forgetful CCA leader | can view who have been added into my contacts | I can retrieve their information and add the remaining members too |","lastModifiedDate":"2021-03-21"},{"lineNumber":212,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | CCA leader with many tasks to be done in the CCA | add tasks into the application | better manage the tasks |","lastModifiedDate":"2021-02-25"},{"lineNumber":213,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | CCA leader with tasks that are constantly changing in details | edit the details of the tasks accordingly | I can keep the task details updated |","lastModifiedDate":"2021-03-21"},{"lineNumber":214,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | CCA leader with tasks that are no longer relevant | can delete tasks that are either completed or unnecessary | I can keep the list organized and clear |","lastModifiedDate":"2021-03-21"},{"lineNumber":215,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | CCA leader with projects and tasks piling up | view a list of tasks that is to be completed by members of the CCA  | I am updated with what needs to be done |","lastModifiedDate":"2021-03-21"},{"lineNumber":216,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | CCA leader who has members leaving the CCA | be able to remove details of the user from that application | better manage my members |","lastModifiedDate":"2021-03-21"},{"lineNumber":217,"author":{"gitId":"zatkiller"},"content":"| `* * *`  | CCA leader whose members’ details have changed | be able to edit the details of the user in the application | keep my contacts up-to-date |","lastModifiedDate":"2021-03-21"},{"lineNumber":218,"author":{"gitId":"zatkiller"},"content":"| `* * *` | CCA leader with many deadlines to meet | set deadlines for specific tasks to ensure that I am clear about the deadlines | track the deadline of tasks |","lastModifiedDate":"2021-03-21"},{"lineNumber":219,"author":{"gitId":"zatkiller"},"content":"| `* * *` | CCA leader with tasks to distribute | be able to assign tasks to students in the application | track the distribution of tasks |","lastModifiedDate":"2021-03-21"},{"lineNumber":220,"author":{"gitId":"zatkiller"},"content":"| `* * `  | CCA leader with tasks that are being completed every other week | mark tasks as ‘done’  | track completed tasks |","lastModifiedDate":"2021-03-21"},{"lineNumber":221,"author":{"gitId":"zatkiller"},"content":"| `* * `  | CCA leader | change the assignee of a task | easily update the member assigned to the task |","lastModifiedDate":"2021-03-21"},{"lineNumber":222,"author":{"gitId":"zatkiller"},"content":"| `* * `  | CCA leader | assign a priority to a task | see which tasks need to be completed first |","lastModifiedDate":"2021-03-21"},{"lineNumber":223,"author":{"gitId":"zatkiller"},"content":"| `* * `  | CCA leader who has many tasks to supervise | search for tasks which are of a certain priority | better manage tasks of different priorities |","lastModifiedDate":"2021-03-21"},{"lineNumber":224,"author":{"gitId":"zatkiller"},"content":"| `* * `  | CCA leader whose members have different roles | assign roles to the members in the application | now who has a certain role |","lastModifiedDate":"2021-03-21"},{"lineNumber":225,"author":{"gitId":"zatkiller"},"content":"| `* * `  | CCA leader whose members have different roles | edit the roles to the members in the application  | update the member roles when there is a change in roles |","lastModifiedDate":"2021-03-21"},{"lineNumber":226,"author":{"gitId":"zatkiller"},"content":"| `* `  | CCA leader who is very forgetful | be notified if I have accidentally added duplicate items/tasks | I will not add repeated tasks. |","lastModifiedDate":"2021-03-21"},{"lineNumber":227,"author":{"gitId":"zatkiller"},"content":"| `* `  | CCA leader who has a lot of tasks to delegate | search for tasks which contain a particular word  | find tasks more efficiently |","lastModifiedDate":"2021-03-21"},{"lineNumber":228,"author":{"gitId":"zatkiller"},"content":"| `* `  | forgetful CCA leader who has forgotten which tasks have not been assigned | be able to get a list of tasks that have not been assigned | distribute tasks more efficiently |","lastModifiedDate":"2021-03-21"},{"lineNumber":229,"author":{"gitId":"zatkiller"},"content":"| `* `  | CCA leader | be able to get a list of tasks that have not be completed | check on the progress of the tasks |","lastModifiedDate":"2021-03-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"zatkiller"},"content":"(For all use cases below, the **System** is the `HEY MATEz` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-02-25"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"zatkiller"},"content":"**Use case: Add a member**","lastModifiedDate":"2021-02-25"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"zatkiller"},"content":"1.  User requests to add a member","lastModifiedDate":"2021-02-25"},{"lineNumber":242,"author":{"gitId":"zatkiller"},"content":"2.  HEY MATEz adds the member to the list of members","lastModifiedDate":"2021-02-25"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"cheeerynne"},"content":"* 1a. Member already exists (Matching Name) in the list","lastModifiedDate":"2021-03-23"},{"lineNumber":249,"author":{"gitId":"cheeerynne"},"content":"    * 1a1. HEY MATEz shows an error message","lastModifiedDate":"2021-03-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"zatkiller"},"content":"**Use case: View members**","lastModifiedDate":"2021-02-25"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"zatkiller"},"content":"**MSS**","lastModifiedDate":"2021-02-25"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"zatkiller"},"content":"1.  User requests to view the members","lastModifiedDate":"2021-02-25"},{"lineNumber":258,"author":{"gitId":"zatkiller"},"content":"2.  HEY MATEz lists the members in the list and their contact details","lastModifiedDate":"2021-02-25"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"zatkiller"},"content":"    Use case ends.","lastModifiedDate":"2021-02-25"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":262,"author":{"gitId":"zatkiller"},"content":"**Use case: Delete member**","lastModifiedDate":"2021-02-25"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":264,"author":{"gitId":"zatkiller"},"content":"**MSS**","lastModifiedDate":"2021-02-25"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":266,"author":{"gitId":"zatkiller"},"content":"1.  User requests to delete a member using the member\u0027s name","lastModifiedDate":"2021-02-25"},{"lineNumber":267,"author":{"gitId":"cheeerynne"},"content":"2.  HEY MATEz searches for the member ","lastModifiedDate":"2021-03-23"},{"lineNumber":268,"author":{"gitId":"cheeerynne"},"content":"3.  HEY MATEz deletes the member from the list","lastModifiedDate":"2021-03-23"},{"lineNumber":269,"author":{"gitId":"tashawan23"},"content":"    ","lastModifiedDate":"2021-03-25"},{"lineNumber":270,"author":{"gitId":"cheeerynne"},"content":"    Use case ends. ","lastModifiedDate":"2021-03-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":272,"author":{"gitId":"zatkiller"},"content":"**Extensions**","lastModifiedDate":"2021-02-25"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":274,"author":{"gitId":"tashawan23"},"content":"* 2a. Member does not exist in the list of members","lastModifiedDate":"2021-03-23"},{"lineNumber":275,"author":{"gitId":"tashawan23"},"content":"    * 2a1. HEY MATEz shows an error message","lastModifiedDate":"2021-03-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":277,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":279,"author":{"gitId":"cheeerynne"},"content":"**Use case: Edit member\u0027s details**","lastModifiedDate":"2021-03-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":281,"author":{"gitId":"tashawan23"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":283,"author":{"gitId":"cheeerynne"},"content":"1.  User requests to edit the details of a member using the member\u0027s name","lastModifiedDate":"2021-03-23"},{"lineNumber":284,"author":{"gitId":"cheeerynne"},"content":"2.  HEY MATEz searches for the member ","lastModifiedDate":"2021-03-23"},{"lineNumber":285,"author":{"gitId":"cheeerynne"},"content":"3.  HEY MATEz edits the corresponding member with the new details ","lastModifiedDate":"2021-03-23"},{"lineNumber":286,"author":{"gitId":"tashawan23"},"content":"    ","lastModifiedDate":"2021-03-23"},{"lineNumber":287,"author":{"gitId":"tashawan23"},"content":"    Use case ends. ","lastModifiedDate":"2021-03-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":289,"author":{"gitId":"tashawan23"},"content":"**Extensions**","lastModifiedDate":"2021-03-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":291,"author":{"gitId":"cheeerynne"},"content":"* 2a. Member does not exist in the list of members","lastModifiedDate":"2021-03-23"},{"lineNumber":292,"author":{"gitId":"tashawan23"},"content":"    * 2a1. HEY MATEz shows an error message","lastModifiedDate":"2021-03-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":294,"author":{"gitId":"tashawan23"},"content":"  Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":296,"author":{"gitId":"cheeerynne"},"content":"**Use case: Find members using keywords**","lastModifiedDate":"2021-03-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":298,"author":{"gitId":"tashawan23"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":299,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":300,"author":{"gitId":"cheeerynne"},"content":"1.  User requests to find members using the keywords specified","lastModifiedDate":"2021-03-23"},{"lineNumber":301,"author":{"gitId":"cheeerynne"},"content":"2.  HEY MATEz searches through each member\u0027s details ","lastModifiedDate":"2021-03-23"},{"lineNumber":302,"author":{"gitId":"cheeerynne"},"content":"3.  HEY MATEz lists members whose details matches any of the keywords ","lastModifiedDate":"2021-03-23"},{"lineNumber":303,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":304,"author":{"gitId":"cheeerynne"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":306,"author":{"gitId":"cheeerynne"},"content":"**Use case: Add a task**","lastModifiedDate":"2021-03-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":310,"author":{"gitId":"cheeerynne"},"content":"1.  User requests to add a task","lastModifiedDate":"2021-03-23"},{"lineNumber":311,"author":{"gitId":"cheeerynne"},"content":"2.  HEY MATEz adds the task to the task board","lastModifiedDate":"2021-03-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":315,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-02-25"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":317,"author":{"gitId":"cheeerynne"},"content":"* 2a. Task already exists (Matching Title) in the list","lastModifiedDate":"2021-03-23"},{"lineNumber":318,"author":{"gitId":"zatkiller"},"content":"    * 2a1. HEY MATEz shows an error message","lastModifiedDate":"2021-02-25"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":320,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2021-02-25"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"cheeerynne"},"content":"**Use case: View Tasks**","lastModifiedDate":"2021-03-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":324,"author":{"gitId":"cheeerynne"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":326,"author":{"gitId":"cheeerynne"},"content":"1.  User requests to view the list of tasks","lastModifiedDate":"2021-03-23"},{"lineNumber":327,"author":{"gitId":"cheeerynne"},"content":"2.  HEY MATEz lists the tasks along with the description","lastModifiedDate":"2021-03-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":329,"author":{"gitId":"cheeerynne"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":330,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":331,"author":{"gitId":"rachelljt"},"content":"**Use case: Delete Task**","lastModifiedDate":"2021-03-23"},{"lineNumber":332,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":333,"author":{"gitId":"rachelljt"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":334,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":335,"author":{"gitId":"tashawan23"},"content":"Similar to deleting a member but user specifies task index instead of name","lastModifiedDate":"2021-03-25"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":338,"author":{"gitId":"rachelljt"},"content":"**Extensions**","lastModifiedDate":"2021-03-23"},{"lineNumber":339,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":340,"author":{"gitId":"rachelljt"},"content":"* 2a. Task index does not exist in the list of tasks","lastModifiedDate":"2021-03-23"},{"lineNumber":341,"author":{"gitId":"rachelljt"},"content":"    * 2a1. HEY MATEz shows an error message","lastModifiedDate":"2021-03-23"},{"lineNumber":342,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":343,"author":{"gitId":"rachelljt"},"content":"  Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":344,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":345,"author":{"gitId":"cheeerynne"},"content":"**Use case: Edit a task**","lastModifiedDate":"2021-03-23"},{"lineNumber":346,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":347,"author":{"gitId":"rachelljt"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":348,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":349,"author":{"gitId":"tashawan23"},"content":"Similar tp editing a member except that user specifies task index instead of name","lastModifiedDate":"2021-03-25"},{"lineNumber":350,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":351,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":352,"author":{"gitId":"cheeerynne"},"content":"**Extensions**","lastModifiedDate":"2021-03-23"},{"lineNumber":353,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":354,"author":{"gitId":"cheeerynne"},"content":"* 1a. Task does not exist (Task index out of bounds)","lastModifiedDate":"2021-03-23"},{"lineNumber":355,"author":{"gitId":"cheeerynne"},"content":"    * 1a1. HEY MATEz shows an error message","lastModifiedDate":"2021-03-23"},{"lineNumber":356,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":357,"author":{"gitId":"rachelljt"},"content":"  Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":358,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":359,"author":{"gitId":"cheeerynne"},"content":"**Use case: Find tasks using keywords**","lastModifiedDate":"2021-03-23"},{"lineNumber":360,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":361,"author":{"gitId":"cheeerynne"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":362,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":363,"author":{"gitId":"tashawan23"},"content":"Similar to finding members with keywords except that HEY MATEz ","lastModifiedDate":"2021-03-25"},{"lineNumber":364,"author":{"gitId":"tashawan23"},"content":"lists tasks with its title or description matching any of the keywords","lastModifiedDate":"2021-03-25"},{"lineNumber":365,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":366,"author":{"gitId":"tashawan23"},"content":"**Use case: Find tasks with deadline before a specified date**","lastModifiedDate":"2021-03-25"},{"lineNumber":367,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":368,"author":{"gitId":"tashawan23"},"content":"**MSS**","lastModifiedDate":"2021-03-25"},{"lineNumber":369,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":370,"author":{"gitId":"tashawan23"},"content":"1. User requests to find tasks with deadline before their specified date","lastModifiedDate":"2021-03-25"},{"lineNumber":371,"author":{"gitId":"tashawan23"},"content":"2. HEY MATEz searches through tasks\u0027 deadline ","lastModifiedDate":"2021-03-25"},{"lineNumber":372,"author":{"gitId":"tashawan23"},"content":"3. HEY MATEz lists tasks with deadlines before the specified date","lastModifiedDate":"2021-03-25"},{"lineNumber":373,"author":{"gitId":"rachelljt"},"content":"   ","lastModifiedDate":"2021-03-23"},{"lineNumber":374,"author":{"gitId":"rachelljt"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":375,"author":{"gitId":"rachelljt"},"content":"   ","lastModifiedDate":"2021-03-23"},{"lineNumber":376,"author":{"gitId":"tashawan23"},"content":"    ","lastModifiedDate":"2021-03-25"},{"lineNumber":377,"author":{"gitId":"zatkiller"},"content":"**Use case: Find tasks using Priority**","lastModifiedDate":"2021-03-24"},{"lineNumber":378,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":379,"author":{"gitId":"zatkiller"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":380,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":381,"author":{"gitId":"zatkiller"},"content":"1.  User requests to find tasks using the input (A priority value)","lastModifiedDate":"2021-03-24"},{"lineNumber":382,"author":{"gitId":"zatkiller"},"content":"2.  HEY MATEz searches through each tasks\u0027 priority","lastModifiedDate":"2021-03-24"},{"lineNumber":383,"author":{"gitId":"zatkiller"},"content":"3.  HEY MATEz lists tasks with a matching priority.","lastModifiedDate":"2021-03-24"},{"lineNumber":384,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":385,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":386,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":387,"author":{"gitId":"zatkiller"},"content":"Extensions","lastModifiedDate":"2021-03-24"},{"lineNumber":388,"author":{"gitId":"zatkiller"},"content":"* 1a. The input value by the user is not a valid priority value","lastModifiedDate":"2021-03-24"},{"lineNumber":389,"author":{"gitId":"zatkiller"},"content":"    * 1a1. HEY MATEz shows an error message telling the user to choose from a list of predefined values","lastModifiedDate":"2021-03-24"},{"lineNumber":390,"author":{"gitId":"zatkiller"},"content":"* 1b. The input format for findPriority is incorrect","lastModifiedDate":"2021-03-24"},{"lineNumber":391,"author":{"gitId":"zatkiller"},"content":"    * 1b1. HEY MATEz shows an error message","lastModifiedDate":"2021-03-24"},{"lineNumber":392,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":393,"author":{"gitId":"zatkiller"},"content":"    Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":394,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":395,"author":{"gitId":"zatkiller"},"content":"**Use case: Mark a Task as Completed**","lastModifiedDate":"2021-03-24"},{"lineNumber":396,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":397,"author":{"gitId":"zatkiller"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":398,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":399,"author":{"gitId":"zatkiller"},"content":"1.  User requests to mark a task as completed using the task\u0027s index","lastModifiedDate":"2021-03-24"},{"lineNumber":400,"author":{"gitId":"zatkiller"},"content":"2.  HEY MATEz searches for the task index and changes the status of the task in the list to be completed","lastModifiedDate":"2021-03-24"},{"lineNumber":401,"author":{"gitId":"zatkiller"},"content":"    ","lastModifiedDate":"2021-03-24"},{"lineNumber":402,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":403,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":404,"author":{"gitId":"zatkiller"},"content":"**Extensions**","lastModifiedDate":"2021-03-24"},{"lineNumber":405,"author":{"gitId":"zatkiller"},"content":"* 1a. The index specified by the user does not exist","lastModifiedDate":"2021-03-24"},{"lineNumber":406,"author":{"gitId":"zatkiller"},"content":"    * 1a1. HEY MATEz shows an error message indicating the index is invalid","lastModifiedDate":"2021-03-24"},{"lineNumber":407,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":408,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":409,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":410,"author":{"gitId":"zatkiller"},"content":"**Use case: Mark a Task as Uncompleted**","lastModifiedDate":"2021-03-24"},{"lineNumber":411,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":412,"author":{"gitId":"zatkiller"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":413,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":414,"author":{"gitId":"zatkiller"},"content":"1.  User requests to mark a task as uncompleted using the task\u0027s index","lastModifiedDate":"2021-03-24"},{"lineNumber":415,"author":{"gitId":"zatkiller"},"content":"2.  HEY MATEz searches for the task index and changes the status of the task in the list to be uncompleted","lastModifiedDate":"2021-03-24"},{"lineNumber":416,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":417,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":418,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":419,"author":{"gitId":"zatkiller"},"content":"**Extensions**","lastModifiedDate":"2021-03-24"},{"lineNumber":420,"author":{"gitId":"zatkiller"},"content":"* 1a. The index specified by the user does not exist","lastModifiedDate":"2021-03-24"},{"lineNumber":421,"author":{"gitId":"zatkiller"},"content":"    * 1a1. HEY MATEz shows an error message indicating the index is invalid ","lastModifiedDate":"2021-03-24"},{"lineNumber":422,"author":{"gitId":"zatkiller"},"content":"      ","lastModifiedDate":"2021-03-24"},{"lineNumber":423,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":424,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":425,"author":{"gitId":"zatkiller"},"content":"**Use case: Delete Task**","lastModifiedDate":"2021-03-24"},{"lineNumber":426,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":427,"author":{"gitId":"zatkiller"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":428,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":429,"author":{"gitId":"tashawan23"},"content":"Similar to deleting a member except that user specifies task index instead of name","lastModifiedDate":"2021-03-25"},{"lineNumber":430,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":431,"author":{"gitId":"zatkiller"},"content":"**Extensions**","lastModifiedDate":"2021-03-24"},{"lineNumber":432,"author":{"gitId":"zatkiller"},"content":"* 1a. The index specified by the user does not exist","lastModifiedDate":"2021-03-24"},{"lineNumber":433,"author":{"gitId":"zatkiller"},"content":"    * 1a1. HEY MATEz shows an error message indicating the index is invalid","lastModifiedDate":"2021-03-24"},{"lineNumber":434,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":435,"author":{"gitId":"tashawan23"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":436,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":437,"author":{"gitId":"rachelljt"},"content":"**Use case: View Uncompleted Tasks**","lastModifiedDate":"2021-03-23"},{"lineNumber":438,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":439,"author":{"gitId":"rachelljt"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":440,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":441,"author":{"gitId":"rachelljt"},"content":"1.  User requests to view the list of uncompleted tasks","lastModifiedDate":"2021-03-23"},{"lineNumber":442,"author":{"gitId":"rachelljt"},"content":"2.  HEY MATEz lists the uncompleted tasks along with the description","lastModifiedDate":"2021-03-23"},{"lineNumber":443,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":444,"author":{"gitId":"rachelljt"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":445,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"zatkiller"},"content":"2. Data should be persistent after closing and reopening the app","lastModifiedDate":"2021-02-25"},{"lineNumber":449,"author":{"gitId":"zatkiller"},"content":"3. App should be run locally on the user\u0027s computer","lastModifiedDate":"2021-02-25"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"zatkiller"},"content":"* **CCA Leader**: A person who has a position in a CCA which requires supervising or managing other member","lastModifiedDate":"2021-02-25"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tashawan23":38,"rachelljt":29,"cheeerynne":37,"zatkiller":123,"-":282}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"## Introduction","lastModifiedDate":"2021-02-25"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"HEY MATEz is a desktop application that allows CCA leaders to track members of","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"a CCA and tasks that have to be carried out in the CCA. It is","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"a Command Line Interface (CLI) application while still retaining a Graphical User Interface (GUI)","lastModifiedDate":"2021-02-25"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"as this application is catered to students who are used to typing on the keyboard frequently.","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"1. Download the latest `heymatez.jar` from [here](https://github.com/AY2021S2-CS2103T-W14-3/tp/releases).","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your Hey Matez.","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2021-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"   * **`viewMembers`** : Lists all members.","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"   * **`addTask`**`Wash dishes -d Wash all dishes from dinner -b 2020-01-01` : Adds a task named `Wash dishes` to the Hey Matez.","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"   * **`deleteTask`**`3` : Deletes the 3rd task shown in the current list.","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"   * **`clear`** : Deletes all tasks and members.","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"-------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"  e.g. in `addTask -n NAME`, `NAME` is a parameter which can be used as `addTask -n John Doe`.","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"  e.g `-d DESCRIPTION [-p PRIORITY]` can be used as `-d Meeting -p high` or as `-d Meeting`.","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"  e.g. if the command specifies `-n NAME -p PHONE_NUMBER`, `-p PHONE_NUMBER -n NAME` is also acceptable.","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"  ","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"  e.g. if you specify `-p 12341234 -p 56785678`, only `-p 56785678` will be taken.","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-03-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"addTask\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"### 1. Add Task: `addTask`","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"Adds a task, with its description and deadline to the list.","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"Format: `addTask TITLE -d DESCRIPTION -b DEADLINE -s STATUS -p PRIORITY`","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"* The status and priority fields are optional.","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"* If status field is not provided, the Task will be assigned a default status value of uncompleted.","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"* Status field can only take on the values completed or uncompleted","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"* If priority field is not provided, the Task will be assigned a default priority of unassigned.","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"* Priority field can only take on the values high, medium or low if a value is specified by the user","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"Examples: `addTask assignment -d Math quiz 2 -b 2021-04-04 -s completed -p high`","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"deleteTask\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"cheeerynne"},"content":"### 2. Delete Task: `deleteTask`","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"tashawan23"},"content":"Deletes a task from the list.","lastModifiedDate":"2021-02-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":89,"author":{"gitId":"cheeerynne"},"content":"Format: `deleteTask INDEX`","lastModifiedDate":"2021-02-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":91,"author":{"gitId":"cheeerynne"},"content":"Examples: `deleteTask 1`","lastModifiedDate":"2021-02-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"viewTasks\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"### 3. View Tasks: `viewTasks`","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"rachelljt"},"content":"Views the list of tasks that the user has added into the application","lastModifiedDate":"2021-02-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":97,"author":{"gitId":"rachelljt"},"content":"Format: `viewTasks`","lastModifiedDate":"2021-02-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":99,"author":{"gitId":"rachelljt"},"content":"Examples: `viewTasks`","lastModifiedDate":"2021-02-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"editTask\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"### 4. Edit Task: `editTask`","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"Edit task details","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"Format: `editTask INDEX -n NEW TITLE -d NEW DESCRIPTION -b NEW DEADLINE -s NEW STATUS -p NEW PRIORITY`","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"Examples: `editTask 1 -n Plan meeting -d Plan board meeting -b 2021-04-04 -s high -p high`","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"zatkiller"},"content":"* The fields NEW TITLE, NEW DESCRIPTION, NEW DEADLINE, NEW STATUS, NEW PRIORITY are all optional","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"zatkiller"},"content":"* Edits the Task at the specified index IN LIST.","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-03-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"doneTask\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"zatkiller"},"content":"### 5. Mark Task as Completed: `done`","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"cheeerynne"},"content":"Change the status of a task from uncompleted to completed","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"cheeerynne"},"content":"Format: `done INDEX`","lastModifiedDate":"2021-03-23"},{"lineNumber":120,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":121,"author":{"gitId":"cheeerynne"},"content":"Examples: `done 1`","lastModifiedDate":"2021-03-23"},{"lineNumber":122,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"undoTask\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"zatkiller"},"content":"### 6. Mark Task as Uncompleted: `undo`","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":126,"author":{"gitId":"cheeerynne"},"content":"Change the status of a task from completed to uncompleted","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":128,"author":{"gitId":"cheeerynne"},"content":"Format: `undo INDEX`","lastModifiedDate":"2021-03-23"},{"lineNumber":129,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"cheeerynne"},"content":"Examples: `undo 1`","lastModifiedDate":"2021-03-23"},{"lineNumber":131,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"findTask\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":133,"author":{"gitId":"cheeerynne"},"content":"### 7. Find Tasks by Keywords: `findTasks`","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":135,"author":{"gitId":"cheeerynne"},"content":"Find all tasks containing any of the specified keywords in its title or description","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"cheeerynne"},"content":"Format: `findTasks KEYWORD MORE_KEYWORDS`","lastModifiedDate":"2021-03-23"},{"lineNumber":138,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":139,"author":{"gitId":"cheeerynne"},"content":"Examples: `findTasks Meeting Proposal Draft`","lastModifiedDate":"2021-03-23"},{"lineNumber":140,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":142,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"findBefore\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"### 8. Find Tasks due before certain date: `findBefore`","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"Find all tasks with deadline before the specified date","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"Format: `findBefore DATE`","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"tashawan23"},"content":"Examples: `findBefore 2021-05-04`","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"findPriority\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"tashawan23"},"content":"### 9. Find Tasks by Priority: `findPriority`","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":154,"author":{"gitId":"zatkiller"},"content":"Find all tasks containing the specified priority","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"zatkiller"},"content":"Note: The valid input values for `findPriority`: high, medium, low and unassigned (Case sensitive)","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"zatkiller"},"content":"Format: `findPriority PRIORITY`","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"zatkiller"},"content":"Examples: `findPriority high`","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"findUncompleted\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"tashawan23"},"content":"### 10. View List of Uncompleted Tasks: `viewUncompletedTasks`","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":165,"author":{"gitId":"cheeerynne"},"content":"View the list of uncompleted tasks","lastModifiedDate":"2021-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":167,"author":{"gitId":"cheeerynne"},"content":"Format: `viewUncompletedTasks`","lastModifiedDate":"2021-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":169,"author":{"gitId":"cheeerynne"},"content":"Examples: `viewUncompletedTasks`","lastModifiedDate":"2021-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":171,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"addMember\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"### 11. Add Member: `addMember`","lastModifiedDate":"2021-03-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":174,"author":{"gitId":"rachelljt"},"content":"Adds a member and his/ her contract number to contact list","lastModifiedDate":"2021-02-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":176,"author":{"gitId":"tashawan23"},"content":"Format: `addMember NAME -p PHONE NUMBER -e EMAIL -r ROLE`","lastModifiedDate":"2021-03-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":178,"author":{"gitId":"tashawan23"},"content":"Examples: `addMember Dylan -p 64529356 -e test@test.com -r Member`","lastModifiedDate":"2021-03-21"},{"lineNumber":179,"author":{"gitId":"tashawan23"},"content":"* The field ROLE is optional","lastModifiedDate":"2021-03-22"},{"lineNumber":180,"author":{"gitId":"tashawan23"},"content":"* If role field is not specified, person will be assigned a default role of member.","lastModifiedDate":"2021-03-22"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":182,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"deleteMember\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":183,"author":{"gitId":"tashawan23"},"content":"### 12. Delete Member: `deleteMember`","lastModifiedDate":"2021-03-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":185,"author":{"gitId":"tashawan23"},"content":"Delete a member and his/ her contact details from the contact list","lastModifiedDate":"2021-03-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":187,"author":{"gitId":"zatkiller"},"content":"Format: `deleteMember NAME`","lastModifiedDate":"2021-02-25"},{"lineNumber":188,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":189,"author":{"gitId":"zatkiller"},"content":"Examples: `deleteMember Rachel`","lastModifiedDate":"2021-02-25"},{"lineNumber":190,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":191,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"viewMembers\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":192,"author":{"gitId":"tashawan23"},"content":"### 13. View Member: `viewMembers`","lastModifiedDate":"2021-03-24"},{"lineNumber":193,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":194,"author":{"gitId":"zatkiller"},"content":"View the list of members the user has added","lastModifiedDate":"2021-02-25"},{"lineNumber":195,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":196,"author":{"gitId":"zatkiller"},"content":"Format: `viewMembers `","lastModifiedDate":"2021-02-25"},{"lineNumber":197,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":198,"author":{"gitId":"zatkiller"},"content":"Examples: `viewMembers `","lastModifiedDate":"2021-02-25"},{"lineNumber":199,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-02-25"},{"lineNumber":200,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"editMember\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":201,"author":{"gitId":"tashawan23"},"content":"### 14. Edit Member: `editMember`","lastModifiedDate":"2021-03-24"},{"lineNumber":202,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":203,"author":{"gitId":"tashawan23"},"content":"Format: `editMember NAME IN LIST -n NEW NAME -p NEW PHONE NUMBER -e NEW EMAIL -r ROLE`","lastModifiedDate":"2021-03-21"},{"lineNumber":204,"author":{"gitId":"cheeerynne"},"content":"* Edits the person at the specified NAME IN LIST.","lastModifiedDate":"2021-03-16"},{"lineNumber":205,"author":{"gitId":"tashawan23"},"content":"* The fields NEW NAME, NEW PHONE NUMBER, NEW EMAIL, NEW ROLE are all optional","lastModifiedDate":"2021-03-22"},{"lineNumber":206,"author":{"gitId":"cheeerynne"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2021-03-16"},{"lineNumber":207,"author":{"gitId":"cheeerynne"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2021-03-16"},{"lineNumber":208,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":209,"author":{"gitId":"tashawan23"},"content":"Examples: `editMember Alice -n Alice Lim -p 95231156 -e tasha@test.com -r Events head`","lastModifiedDate":"2021-03-21"},{"lineNumber":210,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":211,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"findmember\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":212,"author":{"gitId":"tashawan23"},"content":"### 15. Find Members by Keywords: `findMembers`","lastModifiedDate":"2021-03-24"},{"lineNumber":213,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":214,"author":{"gitId":"cheeerynne"},"content":"Find all members whose details contain any of the specified keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":215,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":216,"author":{"gitId":"cheeerynne"},"content":"Format: `findMembers KEYWORD MORE_KEYWORDS`","lastModifiedDate":"2021-03-23"},{"lineNumber":217,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":218,"author":{"gitId":"cheeerynne"},"content":"Examples: `findMembers Rachel 98562154 john@gmail.com`","lastModifiedDate":"2021-03-23"},{"lineNumber":219,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":220,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"clear\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":221,"author":{"gitId":"zatkiller"},"content":"### 16. Clear all data in application: `clear`","lastModifiedDate":"2021-03-24"},{"lineNumber":222,"author":{"gitId":"zatkiller"},"content":"Clears all entries from the application.","lastModifiedDate":"2021-03-24"},{"lineNumber":223,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":224,"author":{"gitId":"zatkiller"},"content":"Format: clear","lastModifiedDate":"2021-03-24"},{"lineNumber":225,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":226,"author":{"gitId":"zatkiller"},"content":"Examples: `clear`","lastModifiedDate":"2021-03-24"},{"lineNumber":227,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":228,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"exit\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":229,"author":{"gitId":"zatkiller"},"content":"### 17. Exiting the progam: `exit`","lastModifiedDate":"2021-03-24"},{"lineNumber":230,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2021-03-24"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":232,"author":{"gitId":"zatkiller"},"content":"Format: exit","lastModifiedDate":"2021-03-24"},{"lineNumber":233,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":234,"author":{"gitId":"zatkiller"},"content":"Examples: `exit`","lastModifiedDate":"2021-03-24"},{"lineNumber":235,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":236,"author":{"gitId":"zatkiller"},"content":"\u003ca name\u003d\"help\"\u003e\u003c/a\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":237,"author":{"gitId":"zatkiller"},"content":"### 18. View Help: `help`","lastModifiedDate":"2021-03-24"},{"lineNumber":238,"author":{"gitId":"zatkiller"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2021-03-24"},{"lineNumber":239,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":240,"author":{"gitId":"zatkiller"},"content":"Format: help","lastModifiedDate":"2021-03-24"},{"lineNumber":241,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":242,"author":{"gitId":"zatkiller"},"content":"Examples: `help`","lastModifiedDate":"2021-03-24"},{"lineNumber":243,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":245,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2021-03-24"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":247,"author":{"gitId":"zatkiller"},"content":"Hey Matez data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-03-24"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":249,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-03-24"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":251,"author":{"gitId":"zatkiller"},"content":"HEY MATEz data are saved as a JSON file `[JAR file location]/data/heymatez.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-03-24"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":253,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-03-24"},{"lineNumber":254,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-03-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":258,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-24"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":260,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2021-03-24"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":262,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":263,"author":{"gitId":"zatkiller"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HEY Matz home folder.","lastModifiedDate":"2021-03-24"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":265,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-24"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":267,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2021-03-24"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2021-03-24"},{"lineNumber":270,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2021-03-24"},{"lineNumber":271,"author":{"gitId":"zatkiller"},"content":"**Add Member** | `addMember NAME -p PHONE NUMBER -e EMAIL -r ROLE` \u003cbr\u003e e.g., `addMember Dylan -p 64529356 -e test@test.com -r Member`","lastModifiedDate":"2021-03-24"},{"lineNumber":272,"author":{"gitId":"zatkiller"},"content":"**Delete Member** | `deleteMember NAME` \u003cbr\u003e e.g., `deleteMember Rachel`","lastModifiedDate":"2021-03-24"},{"lineNumber":273,"author":{"gitId":"zatkiller"},"content":"**View Members** | `viewMembers`\u003cbr\u003e e.g., `viewMembers`","lastModifiedDate":"2021-03-24"},{"lineNumber":274,"author":{"gitId":"zatkiller"},"content":"**Edit Member** | `editMember NAME IN LIST -n NEW NAME -p NEW PHONE NUMBER -e NEW EMAIL -r ROLE​`\u003cbr\u003e e.g.,`editMember Alice -n Alice Lim -p 95231156 -e tasha@test.com -r Events head`","lastModifiedDate":"2021-03-24"},{"lineNumber":275,"author":{"gitId":"zatkiller"},"content":"**Find Members** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `findMembers Rachel 98562154 john@gmail.com`","lastModifiedDate":"2021-03-24"},{"lineNumber":276,"author":{"gitId":"zatkiller"},"content":"**Add Task** | `addTask TITLE -d DESCRIPTION -b DEADLINE -s STATUS -p PRIORITY` \u003cbr\u003e e.g., `addTask assignment -d Math quiz 2 -b 2021-04-04 -s completed -p high`","lastModifiedDate":"2021-03-24"},{"lineNumber":277,"author":{"gitId":"zatkiller"},"content":"**Delete Task** | `deleteTask INDEX` \u003cbr\u003e e.g., `deleteTask 1`","lastModifiedDate":"2021-03-24"},{"lineNumber":278,"author":{"gitId":"zatkiller"},"content":"**View Tasks** | `viewTasks`\u003cbr\u003e e.g., `viewTasks`","lastModifiedDate":"2021-03-24"},{"lineNumber":279,"author":{"gitId":"zatkiller"},"content":"**Edit Task** | `editTask INDEX -n NEW TITLE -d NEW DESCRIPTION -b NEW DEADLINE -s NEW STATUS -p NEW PRIORITY`\u003cbr\u003e e.g.,`editTask 1 -n Plan meeting -d Plan board meeting -b 2021-04-04 -s high -p high`","lastModifiedDate":"2021-03-25"},{"lineNumber":280,"author":{"gitId":"zatkiller"},"content":"**Mark Task as Completed** | `done INDEX`\u003cbr\u003e e.g., `done 1`","lastModifiedDate":"2021-03-24"},{"lineNumber":281,"author":{"gitId":"zatkiller"},"content":"**Mark Task as Uncompleted** | `undo INDEX`\u003cbr\u003e e.g., `undo 1`","lastModifiedDate":"2021-03-24"},{"lineNumber":282,"author":{"gitId":"zatkiller"},"content":"**Find Tasks by Keywords** | `findTasks KEYWORD MORE_KEYWORDS`\u003cbr\u003e e.g., `findTasks Meeting Proposal Draft`","lastModifiedDate":"2021-03-24"},{"lineNumber":283,"author":{"gitId":"zatkiller"},"content":"**Find Tasks by Priority** | `findPriority PRIORITY`\u003cbr\u003e e.g., `findPriority HIGH`","lastModifiedDate":"2021-03-24"},{"lineNumber":284,"author":{"gitId":"zatkiller"},"content":"**Find Tasks by Deadline** | `findBefore DATE`\u003cbr\u003e e.g., `findBefore 2021-04-05`","lastModifiedDate":"2021-03-24"},{"lineNumber":285,"author":{"gitId":"zatkiller"},"content":"**View Uncompleted Tasks** | `viewUncompletedTasks`\u003cbr\u003e e.g., `viewUncompletedTasks`","lastModifiedDate":"2021-03-24"},{"lineNumber":286,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2021-03-24"},{"lineNumber":287,"author":{"gitId":"zatkiller"},"content":"**Clear Data** | `clear`","lastModifiedDate":"2021-03-24"},{"lineNumber":288,"author":{"gitId":"zatkiller"},"content":"**Exit Program** | `exit`","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"tashawan23":30,"rachelljt":4,"cheeerynne":39,"zatkiller":107,"-":108}},{"path":"docs/diagrams/DoneTaskSeqeuenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"@startuml","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"!include style.puml","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"participant \":DoneTaskCommandParser\" as DoneTaskCommandParser LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"participant \"d:DoneTaskCommand\" as DoneTaskCommand LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"end box","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"end box","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"[-\u003e LogicManager : execute(\"done 1\")","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"activate LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"done1 1\")","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"activate AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"create DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"AddressBookParser -\u003e DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"activate DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommandParser --\u003e AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"deactivate DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"AddressBookParser -\u003e DoneTaskCommandParser : parse(\"done 1\")","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"activate DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"create DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommandParser -\u003e DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"activate DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommand --\u003e DoneTaskCommandParser : d","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"deactivate DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"deactivate DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"destroy DoneTaskCommandParser","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"deactivate AddressBookParser","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"LogicManager -\u003e DoneTaskCommand : execute()","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"activate DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommand -\u003e DoneTaskCommand : createDoneTask()","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"activate DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommand --\u003e DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"deactivate DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommand -\u003e Model : setTask()","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"activate Model","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"Model --\u003e DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"deactivate Model","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"create CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommand -\u003e CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"activate CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"CommandResult --\u003e DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"deactivate CommandResult","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"DoneTaskCommand --\u003e LogicManager : result","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"deactivate DoneTaskCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"[\u003c--LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"deactivate LogicManager","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"@enduml","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"zatkiller":75}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"ecp -\u003e ec ++: index, editMemberDescriptor","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"cheeerynne":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"title: HEY MATEz","lastModifiedDate":"2021-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W14-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-W14-3/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-03-02"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W14-3/tp/branch/master/graph/badge.svg?token\u003dOWR3AXGjau)](https://codecov.io/gh/AY2021S2-CS2103T-W14-3/tp)","lastModifiedDate":"2021-03-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"**HEY MATEz is a desktop application for managing your CCA member contact details and tasks to be completed.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-03-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"* If you are interested in using HEY MATEz, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-03-02"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"* If you are interested about developing HEY MATEz, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-03-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"zatkiller":6,"-":13}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \"","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"zatkiller"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/heymatez.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2021-03-24"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"zatkiller":1,"-":393}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base.","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it.","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"cheeerynne"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editMemberDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"cheeerynne":1,"-":249}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public static final Version VERSION \u003d new Version(1, 2, 0, true);","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zatkiller":1,"-":182}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    private static final String LOG_FILE \u003d \"HEYMATEz.log\";","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zatkiller":1,"-":111}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_NAME \u003d \"The member name provided is invalid\";","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d members listed!\";","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tashawan23":2,"cheeerynne":2,"-":10}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tashawan23":4,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"        return model.getFilteredTaskList();","lastModifiedDate":"2021-03-09"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tashawan23":6,"-":80}},{"path":"src/main/java/seedu/address/logic/commands/AddMemberCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"public class AddMemberCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    public static final String COMMAND_WORD \u003d \"addMember\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"            + \"NAME \"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \" PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \" EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_ROLE + \" ROLE \"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"            + \"Example: \" + COMMAND_WORD","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            + \" John Doe \"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \" 98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_EMAIL + \" johnd@example.com \"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_ROLE + \" Vice president\";","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public AddMemberCommand(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"                || (other instanceof AddMemberCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"                \u0026\u0026 toAdd.equals(((AddMemberCommand) other).toAdd));","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tashawan23":4,"zatkiller":8,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/AddTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":" * Adds a person to the address book.","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    public static final String COMMAND_WORD \u003d \"addTask\";","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new task to dashboard.\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"            + \"TITLE \"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_DESCRIPTION + \" DESCRIPTION \"","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_DEADLINE + \" DEADLINE\"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_STATUS + \" TASK STATUS \"","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_PRIORITY + \" PRIORITY \\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"            + \"Plan board meeting \"","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_DESCRIPTION + \" Draft meeting agenda and proposal for board meeting \"","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_DEADLINE + \"2021-05-02\"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_STATUS + \" completed \"","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_PRIORITY + \" high \";","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\";","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"A task with the same name already exists in the task board! \"","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"            + \"Pick another name!\";","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    private final Task toAddTask;","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"    public AddTaskCommand(Task task) {","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(task);","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        toAddTask \u003d task;","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        if (model.hasTask(toAddTask)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        model.addTask(toAddTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddTask));","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof AddTaskCommand // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 toAddTask.equals(((AddTaskCommand) other).toAddTask));","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":51,"zatkiller":15}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"HEY MATEz has been cleared!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zatkiller":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMemberCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"public class DeleteMemberCommand extends Command {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"    public static final String COMMAND_WORD \u003d \"deleteMember\";","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"            + \": Deletes the person identified by the name used in the displayed person list.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"            + \"Parameters: NAME (must be a valid name)\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"            + \"Example: \" + COMMAND_WORD + \" John\";","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Member: %1$s\";","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"    private final Name name;","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"    public DeleteMemberCommand(Name name) {","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"        Person personToDelete \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"        for (Person person : lastShownList) {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d person.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"            if (name.equals(currentName)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"                personToDelete \u003d person;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"cheeerynne"},"content":"        if (personToDelete \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"cheeerynne"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"                || (other instanceof DeleteMemberCommand // instanceof handles nulls","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"                \u0026\u0026 name.equals(((DeleteMemberCommand) other).name)); // state check","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"cheeerynne":24,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":" * Deletes a task identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    public static final String COMMAND_WORD \u003d \"deleteTask\";","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"            + \": Deletes the task identified by the index number used in the displayed task list.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"    public DeleteTaskCommand(Index targetIndex) {","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"        model.deleteTask(taskToDelete);","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"                || (other instanceof DeleteTaskCommand // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"rachelljt"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"rachelljt":53}},{"path":"src/main/java/seedu/address/logic/commands/DoneTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import java.util.List;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":" * Represents a DoneTaskCommand","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":" * Changes the status of existing task in HEY MATEz to completed","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"public class DoneTaskCommand extends Command {","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    public static final String COMMAND_WORD \u003d \"done\";","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the status of the task to be completed\"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            + \"by the index number used in the displayed task board. \\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Task is marked as completed!\";","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_TASK_ALREADY_MARKED_DONE \u003d \"Task is already marked completed!\";","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    private final Index index;","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"     * @param index of the task in the filtered task list to mark as completed","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    public DoneTaskCommand(Index index) {","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        Task taskToMarkDone \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        Task doneTask \u003d createDoneTask(taskToMarkDone);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"        assert doneTask !\u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        model.setTask(taskToMarkDone, doneTask);","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        return new CommandResult(MESSAGE_DONE_TASK_SUCCESS);","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToUndo}","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"     * @params taskToUndo task to be marked as completed","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"     * @return A Task with the updated completed status","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"    public static Task createDoneTask(Task taskToDone) throws CommandException {","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"        assert taskToDone !\u003d null;","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        Title updatedTitle \u003d taskToDone.getTitle();","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"        Description updatedDescription \u003d taskToDone.getDescription();","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"        Deadline updatedDeadline \u003d taskToDone.getDeadline();","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"        TaskStatus current \u003d taskToDone.getTaskStatus();","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"        if (current \u003d\u003d TaskStatus.COMPLETED) {","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"            throw new CommandException(MESSAGE_TASK_ALREADY_MARKED_DONE);","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"        TaskStatus updatedStatus \u003d TaskStatus.COMPLETED;","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"        return new Task(updatedTitle, updatedDescription, updatedDeadline, updatedStatus);","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"            return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"        if (!(other instanceof DoneTaskCommand)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"            return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"        // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand e \u003d (DoneTaskCommand) other;","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"        System.out.println(index);","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"        System.out.println(e.index);","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        return index.equals(e.index);","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"tashawan23":7,"zatkiller":99}},{"path":"src/main/java/seedu/address/logic/commands/EditMemberCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"public class EditMemberCommand extends Command {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"    public static final String COMMAND_WORD \u003d \"editMember\";","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"            + \"by the name used in the displayed person list. \"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"            + \"Existing details will be overwritten by the input details.\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"            + \"Parameters: NAME_IN_LIST \"","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"            + \"[\" + PREFIX_NEW_NAME + \" NEW_NAME] \"","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"            + \"[\" + PREFIX_PHONE + \" NEW_PHONE] \"","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \" EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"            + \"[\" + PREFIX_ROLE + \" ROLE] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"            + \"Example: \" + COMMAND_WORD + \" John \"","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"            + PREFIX_NEW_NAME + \" John Lim \"","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \" 91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_EMAIL + \" johndoe@example.com\"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"            + PREFIX_ROLE + \" Assistant treasurer\";","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"cheeerynne"},"content":"    private final Name name;","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"cheeerynne"},"content":"    private final EditMemberDescriptor editMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"     * @param name of the person in the filtered person list to edit","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"     * @param editMemberDescriptor details to edit the person with","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberCommand(Name name, EditMemberDescriptor editMemberDescriptor) {","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"        requireNonNull(editMemberDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"        this.editMemberDescriptor \u003d new EditMemberDescriptor(editMemberDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"cheeerynne"},"content":"        Person personToEdit \u003d null;","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"        for (Person person : lastShownList) {","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d person.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"cheeerynne"},"content":"            if (name.equals(currentName)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"cheeerynne"},"content":"                personToEdit \u003d person;","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"cheeerynne"},"content":"        if (personToEdit \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"cheeerynne"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"cheeerynne"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editMemberDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"cheeerynne"},"content":"    private static Person createEditedPerson(Person personToEdit, EditMemberDescriptor editMemberDescriptor) {","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"cheeerynne"},"content":"        Name updatedName \u003d editMemberDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"cheeerynne"},"content":"        Phone updatedPhone \u003d editMemberDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"cheeerynne"},"content":"        Email updatedEmail \u003d editMemberDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"        Role updatedRole \u003d editMemberDescriptor.getRole().orElse(personToEdit.getRole());","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedRole);","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"cheeerynne"},"content":"        if (!(other instanceof EditMemberCommand)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand e \u003d (EditMemberCommand) other;","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"cheeerynne"},"content":"        return name.equals(e.name)","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"cheeerynne"},"content":"                \u0026\u0026 editMemberDescriptor.equals(e.editMemberDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"cheeerynne"},"content":"    public static class EditMemberDescriptor {","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"        private Role role;","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"cheeerynne"},"content":"        public EditMemberDescriptor() {}","lastModifiedDate":"2021-03-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"cheeerynne"},"content":"        public EditMemberDescriptor(EditMemberDescriptor toCopy) {","lastModifiedDate":"2021-03-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"            setRole(toCopy.role);","lastModifiedDate":"2021-03-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"tashawan23"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, role);","lastModifiedDate":"2021-03-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"tashawan23"},"content":"        public void setRole(Role role) {","lastModifiedDate":"2021-03-21"},{"lineNumber":180,"author":{"gitId":"tashawan23"},"content":"            this.role \u003d role;","lastModifiedDate":"2021-03-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":183,"author":{"gitId":"tashawan23"},"content":"        public Optional\u003cRole\u003e getRole() {","lastModifiedDate":"2021-03-21"},{"lineNumber":184,"author":{"gitId":"tashawan23"},"content":"            return Optional.ofNullable(role);","lastModifiedDate":"2021-03-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":196,"author":{"gitId":"cheeerynne"},"content":"            if (!(other instanceof EditMemberDescriptor)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":201,"author":{"gitId":"cheeerynne"},"content":"            EditMemberDescriptor e \u003d (EditMemberDescriptor) other;","lastModifiedDate":"2021-03-16"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2021-03-21"},{"lineNumber":206,"author":{"gitId":"tashawan23"},"content":"                    \u0026\u0026 getRole().equals(e.getRole());","lastModifiedDate":"2021-03-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"tashawan23":15,"cheeerynne":44,"-":150}},{"path":"src/main/java/seedu/address/logic/commands/EditTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":" * Edits the details of an existing task in HEY MATEz.","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"public class EditTaskCommand extends Command {","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"    public static final String COMMAND_WORD \u003d \"editTask\";","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \"","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"            + \"by the index number used in the displayed task board. \"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"            + \"[\" + PREFIX_TITLE + \" TITLE] \"","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \" DESCRIPTION] \"","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"            + \"[\" + PREFIX_DEADLINE + \" DEADLINE] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"            + \"[\" + PREFIX_STATUS + \" STATUS] \"","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"            + \"[\" + PREFIX_PRIORITY + \" PRIORITY] \"","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_TITLE + \" Plan open house meeting \"","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"            + PREFIX_STATUS + \" completed\";","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"    private final Index index;","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"    private final EditTaskCommand.EditTaskDescriptor editTaskDescriptor;","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"     * @param index of the task in the filtered task list to edit","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"     * @param editTaskDescriptor details to edit the task with","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"    public EditTaskCommand(Index index, EditTaskCommand.EditTaskDescriptor editTaskDescriptor) {","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(editTaskDescriptor);","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"        this.editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor(editTaskDescriptor);","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"        model.setTask(taskToEdit, editedTask);","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToEdit}","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"     * edited with {@code editTaskDescriptor}.","lastModifiedDate":"2021-03-11"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"    private static Task createEditedTask(Task taskToEdit, EditTaskCommand.EditTaskDescriptor editTaskDescriptor) {","lastModifiedDate":"2021-03-11"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"        assert taskToEdit !\u003d null;","lastModifiedDate":"2021-03-11"},{"lineNumber":86,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":87,"author":{"gitId":"tashawan23"},"content":"        Title updatedTitle \u003d editTaskDescriptor.getTitle().orElse(taskToEdit.getTitle());","lastModifiedDate":"2021-03-11"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());","lastModifiedDate":"2021-03-11"},{"lineNumber":89,"author":{"gitId":"tashawan23"},"content":"        Deadline updatedDeadline \u003d editTaskDescriptor.getDeadline().orElse(taskToEdit.getDeadline());","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"        TaskStatus updatedStatus \u003d editTaskDescriptor.getStatus().orElse(taskToEdit.getTaskStatus());","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"        return new Task(updatedTitle, updatedDescription, updatedDeadline, updatedStatus, updatedPriority);","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"            return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"        if (!(other instanceof EditTaskCommand)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"            return false;","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"        // state check","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand e \u003d (EditTaskCommand) other;","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"        System.out.println(index);","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"        System.out.println(e.index);","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"    public static class EditTaskDescriptor {","lastModifiedDate":"2021-03-11"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"        private Title title;","lastModifiedDate":"2021-03-11"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"        private Description description;","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":"        private TaskStatus status;","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"        private Deadline deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"zatkiller"},"content":"        private Priority priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"        public EditTaskDescriptor() {}","lastModifiedDate":"2021-03-11"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"        /**","lastModifiedDate":"2021-03-11"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-11"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"         */","lastModifiedDate":"2021-03-11"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"        public EditTaskDescriptor(EditTaskCommand.EditTaskDescriptor toCopy) {","lastModifiedDate":"2021-03-11"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"            setTitle(toCopy.title);","lastModifiedDate":"2021-03-11"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-03-11"},{"lineNumber":135,"author":{"gitId":"zatkiller"},"content":"            setStatus(toCopy.status);","lastModifiedDate":"2021-03-20"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"            setDeadline(toCopy.deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"zatkiller"},"content":"            setPriority(toCopy.priority);","lastModifiedDate":"2021-03-22"},{"lineNumber":138,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":139,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":140,"author":{"gitId":"tashawan23"},"content":"        /**","lastModifiedDate":"2021-03-11"},{"lineNumber":141,"author":{"gitId":"tashawan23"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-11"},{"lineNumber":142,"author":{"gitId":"tashawan23"},"content":"         */","lastModifiedDate":"2021-03-11"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-11"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"            return CollectionUtil.isAnyNonNull(title, description, status, deadline, priority);","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"        public void setTitle(Title title) {","lastModifiedDate":"2021-03-11"},{"lineNumber":148,"author":{"gitId":"tashawan23"},"content":"            this.title \u003d title;","lastModifiedDate":"2021-03-11"},{"lineNumber":149,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":150,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":151,"author":{"gitId":"tashawan23"},"content":"        public Optional\u003cTitle\u003e getTitle() {","lastModifiedDate":"2021-03-11"},{"lineNumber":152,"author":{"gitId":"tashawan23"},"content":"            return Optional.ofNullable(title);","lastModifiedDate":"2021-03-11"},{"lineNumber":153,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":154,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":155,"author":{"gitId":"tashawan23"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2021-03-11"},{"lineNumber":156,"author":{"gitId":"tashawan23"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-03-11"},{"lineNumber":157,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":158,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":159,"author":{"gitId":"tashawan23"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2021-03-11"},{"lineNumber":160,"author":{"gitId":"tashawan23"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-03-11"},{"lineNumber":161,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":162,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":163,"author":{"gitId":"zatkiller"},"content":"        public void setStatus(TaskStatus status) {","lastModifiedDate":"2021-03-20"},{"lineNumber":164,"author":{"gitId":"zatkiller"},"content":"            this.status \u003d status;","lastModifiedDate":"2021-03-20"},{"lineNumber":165,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":166,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":167,"author":{"gitId":"zatkiller"},"content":"        public Optional\u003cTaskStatus\u003e getStatus() {","lastModifiedDate":"2021-03-20"},{"lineNumber":168,"author":{"gitId":"zatkiller"},"content":"            return Optional.ofNullable(status);","lastModifiedDate":"2021-03-20"},{"lineNumber":169,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":170,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"        public void setDeadline(Deadline date) {","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"            this.deadline \u003d date;","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":174,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":175,"author":{"gitId":"tashawan23"},"content":"        public Optional\u003cDeadline\u003e getDeadline() {","lastModifiedDate":"2021-03-21"},{"lineNumber":176,"author":{"gitId":"tashawan23"},"content":"            return Optional.ofNullable(deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":177,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":178,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":179,"author":{"gitId":"zatkiller"},"content":"        public void setPriority(Priority priority) {","lastModifiedDate":"2021-03-22"},{"lineNumber":180,"author":{"gitId":"zatkiller"},"content":"            this.priority \u003d priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":181,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":182,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":183,"author":{"gitId":"zatkiller"},"content":"        public Optional\u003cPriority\u003e getPriority() {","lastModifiedDate":"2021-03-22"},{"lineNumber":184,"author":{"gitId":"zatkiller"},"content":"            return Optional.ofNullable(priority);","lastModifiedDate":"2021-03-22"},{"lineNumber":185,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":186,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":187,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":188,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":189,"author":{"gitId":"tashawan23"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":190,"author":{"gitId":"tashawan23"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":191,"author":{"gitId":"tashawan23"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-11"},{"lineNumber":192,"author":{"gitId":"tashawan23"},"content":"                return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":193,"author":{"gitId":"tashawan23"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":194,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":195,"author":{"gitId":"tashawan23"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":196,"author":{"gitId":"tashawan23"},"content":"            if (!(other instanceof EditTaskCommand.EditTaskDescriptor)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":197,"author":{"gitId":"tashawan23"},"content":"                return false;","lastModifiedDate":"2021-03-11"},{"lineNumber":198,"author":{"gitId":"tashawan23"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":199,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":200,"author":{"gitId":"tashawan23"},"content":"            // state check","lastModifiedDate":"2021-03-11"},{"lineNumber":201,"author":{"gitId":"tashawan23"},"content":"            EditTaskCommand.EditTaskDescriptor e \u003d (EditTaskCommand.EditTaskDescriptor) other;","lastModifiedDate":"2021-03-11"},{"lineNumber":202,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":203,"author":{"gitId":"tashawan23"},"content":"            return getTitle().equals(e.getTitle())","lastModifiedDate":"2021-03-11"},{"lineNumber":204,"author":{"gitId":"zatkiller"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())","lastModifiedDate":"2021-03-21"},{"lineNumber":205,"author":{"gitId":"tashawan23"},"content":"                    \u0026\u0026 getStatus().equals(e.getStatus())","lastModifiedDate":"2021-03-23"},{"lineNumber":206,"author":{"gitId":"tashawan23"},"content":"                    \u0026\u0026 getDeadline().equals(e.getDeadline())","lastModifiedDate":"2021-03-23"},{"lineNumber":207,"author":{"gitId":"tashawan23"},"content":"                    \u0026\u0026 getPriority().equals(e.getPriority());","lastModifiedDate":"2021-03-23"},{"lineNumber":208,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":209,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":210,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"tashawan23":180,"zatkiller":30}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting HEY MATEz as requested ...\";","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"zatkiller":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindByPriorityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.PriorityContainsKeywordPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":" * Represents a FindByPriorityCommand","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":" * It displays tasks that are only of the specified priority value","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"public class FindByPriorityCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    public static final String COMMAND_WORD \u003d \"findPriority\";","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks with the specified priority \"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"            + \"and displays them as a list with index numbers\\n \"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"            + \"Parameters: PRIORITY VALUE Example: \"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"            + COMMAND_WORD + \"high\";","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    private final PriorityContainsKeywordPredicate predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    public FindByPriorityCommand(PriorityContainsKeywordPredicate predicate) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        model.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"                || (other instanceof FindByPriorityCommand // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"                \u0026\u0026 predicate.equals(((FindByPriorityCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zatkiller":43}},{"path":"src/main/java/seedu/address/logic/commands/FindMembersCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.DetailsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":" * Finds and lists all persons in HEY MATEz whose details contains any of the argument keywords.","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"public class FindMembersCommand extends Command {","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"    public static final String COMMAND_WORD \u003d \"findMembers\";","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all members whose details contain any of \"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice 97574218 rachel@example.com\";","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"    private final DetailsContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"    public FindMembersCommand(DetailsContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"                || (other instanceof FindMembersCommand // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"                \u0026\u0026 predicate.equals(((FindMembersCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"cheeerynne":10,"-":32}},{"path":"src/main/java/seedu/address/logic/commands/FindTasksBeforeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.DeadlineBeforeDatePredicate;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"public class FindTasksBeforeCommand extends Command {","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"    public static final String COMMAND_WORD \u003d \"findBefore\";","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"            + \": Finds all tasks with deadline before the specified date \"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"            + \" and displays them as a list with index numbers.\\n \"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"            + \"Parameters: DEADLINE \\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2021-03-26\";","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    private final DeadlineBeforeDatePredicate predicate;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    public FindTasksBeforeCommand(DeadlineBeforeDatePredicate predicate) {","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"        model.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof FindTasksBeforeCommand // instanceof handles nulls","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 predicate.equals(((FindTasksBeforeCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"tashawan23":38}},{"path":"src/main/java/seedu/address/logic/commands/FindTasksCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":" * Finds and lists all tasks in HEY MATEz with its title or description containing any of the argument keywords.","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"public class FindTasksCommand extends Command {","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"    public static final String COMMAND_WORD \u003d \"findTasks\";","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks with its title or description \"","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"            + \"containing the specified keywords (case-insensitive) and displays them as a list with \"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"            + \"index numbers.\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"            + \"Example: \" + COMMAND_WORD + \" plan meeting proposal\";","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"    private final TaskContainsKeywordPredicate predicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"    public FindTasksCommand(TaskContainsKeywordPredicate predicate) {","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        model.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"                || (other instanceof FindTasksCommand // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"                \u0026\u0026 predicate.equals(((FindTasksCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":42}},{"path":"src/main/java/seedu/address/logic/commands/UndoTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import java.util.List;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":" * Represents an Undo Task Command","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":" * Changes the status of existing task in HEY MATEz to uncompleted","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"public class UndoTaskCommand extends Command {","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the status of the task to uncompleted\"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            + \"by the index number used in the displayed task board. \\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_UNDO_TASK_SUCCESS \u003d \"Task: marked as uncompleted!\";","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_TASK_ALREADY_MARKED_UNCOMPLETED \u003d \"Task is already marked as uncompleted!\";","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"    private final Index index;","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     * @param index of the task in the filtered task list to marked as uncompleted","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public UndoTaskCommand(Index index) {","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        Task taskToMarkUndo \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        Task undoTask \u003d createUndoTask(taskToMarkUndo);","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        assert undoTask !\u003d null;","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        model.setTask(taskToMarkUndo, undoTask);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        return new CommandResult(MESSAGE_UNDO_TASK_SUCCESS);","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"     * Creates and returns a {@code Task} with the details of {@code taskToUndo}","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"     * @params taskToUndo task to be marked as uncompleted","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"     * @return A Task with the updated uncompleted status","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"    private static Task createUndoTask(Task taskToUndo) throws CommandException {","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        assert taskToUndo !\u003d null;","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"        Title updatedTitle \u003d taskToUndo.getTitle();","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"        Description updatedDescription \u003d taskToUndo.getDescription();","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"        Deadline updatedDeadline \u003d taskToUndo.getDeadline();","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        TaskStatus current \u003d taskToUndo.getTaskStatus();","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        if (current \u003d\u003d TaskStatus.UNCOMPLETED) {","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"            throw new CommandException(MESSAGE_TASK_ALREADY_MARKED_UNCOMPLETED);","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"        TaskStatus updatedStatus \u003d TaskStatus.UNCOMPLETED;","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"        return new Task(updatedTitle, updatedDescription, updatedDeadline, updatedStatus);","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"            return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"        if (!(other instanceof UndoTaskCommand)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"            return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"        // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand e \u003d (UndoTaskCommand) other;","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"        System.out.println(index);","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        System.out.println(e.index);","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"        return index.equals(e.index);","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"tashawan23":7,"zatkiller":100}},{"path":"src/main/java/seedu/address/logic/commands/ViewMembersCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"public class ViewMembersCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    public static final String COMMAND_WORD \u003d \"viewMembers\";","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all members in this CCA!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"zatkiller":3,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/ViewTasksCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"public class ViewTasksCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"    public static final String COMMAND_WORD \u003d \"viewTasks\";","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Tasks\";","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"rachelljt":21}},{"path":"src/main/java/seedu/address/logic/commands/ViewUncompletedTasksCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_UNCOMPLETED_TASKS;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"public class ViewUncompletedTasksCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"    public static final String COMMAND_WORD \u003d \"viewUncompletedTasks\";","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Uncompleted Tasks\";","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_UNCOMPLETED_TASKS);","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"rachelljt":21}},{"path":"src/main/java/seedu/address/logic/parser/AddMemberCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.AddMemberCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new AddCMemberommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"public class AddMemberCommandParser implements Parser\u003cAddMemberCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMemberCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"     * and returns an AddMemberCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    public AddMemberCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PHONE, PREFIX_EMAIL)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getPreamble());","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        Person person \u003d new Person(name, phone, email);","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        Role role;","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_ROLE)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"            role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"            person \u003d new Person(name, phone, email, role);","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        return new AddMemberCommand(person);","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"tashawan23":9,"zatkiller":10,"-":38}},{"path":"src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.AddTaskCommand;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new AddTaskCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTaskCommand","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"     * and returns an AddTaskCommand object for execution.","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"    public AddTaskCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_STATUS, PREFIX_PRIORITY);","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"            assert arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DEADLINE)","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"                    : \"You must input a task description and deadline!\";","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"        Title title;","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"            title \u003d ParserUtil.parseTitle(argMultimap.getPreamble());","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Title.MESSAGE_CONSTRAINTS), pe);","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        Description description;","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Description.MESSAGE_CONSTRAINTS),","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"                    pe);","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        Deadline deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"            deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Deadline.MESSAGE_CONSTRAINTS), pe);","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        Task task \u003d new Task(title, description, deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"        TaskStatus status \u003d null;","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_STATUS)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"            try {","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"                status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskStatus.MESSAGE_CONSTRAINTS),","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"                        pe);","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"            task \u003d new Task(title, description, deadline, status);","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        Priority priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"            try {","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Priority.MESSAGE_CONSTRAINTS),","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"                        pe);","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"            task \u003d status !\u003d null","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"                    ? new Task(title, description, deadline, status, priority)","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"                    : new Task(title, description, deadline, priority);","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"        return new AddTaskCommand(task);","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":66,"zatkiller":36}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.AddMemberCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.AddTaskCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.DeleteMemberCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.DoneTaskCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.EditMemberCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.EditTaskCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.FindByPriorityCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.FindMembersCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.FindTasksBeforeCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.FindTasksCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.UndoTaskCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.ViewMembersCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.ViewTasksCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.ViewUncompletedTasksCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"        case AddMemberCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"            return new AddMemberCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"        case AddTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"            return new AddTaskCommandParser().parse(arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"        case EditMemberCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"            return new EditMemberCommandParser().parse(arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        case EditTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"            return new EditTaskCommandParser().parse(arguments);","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"        case DeleteMemberCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"            return new DeleteMemberCommandParser().parse(arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        case DeleteTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"            return new DeleteTaskCommandParser().parse(arguments);","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"        case DoneTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"            return new DoneTaskCommandParser().parse(arguments);","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        case UndoTaskCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"            return new UndoTaskCommandParser().parse(arguments);","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"cheeerynne"},"content":"        case FindMembersCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"cheeerynne"},"content":"            return new FindMemberCommandParser().parse(arguments);","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        case FindByPriorityCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"            return new FindByPriorityCommandParser().parse(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"cheeerynne"},"content":"        case FindTasksCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"cheeerynne"},"content":"            return new FindTasksCommandParser().parse(arguments);","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"        case FindTasksBeforeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"            return new FindTasksBeforeCommandParser().parse(arguments);","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"cheeerynne"},"content":"        case ViewMembersCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"cheeerynne"},"content":"            return new ViewMembersCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"        case ViewTasksCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"            return new ViewTasksCommand();","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"rachelljt"},"content":"        case ViewUncompletedTasksCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"rachelljt"},"content":"            return new ViewUncompletedTasksCommand();","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tashawan23":24,"rachelljt":2,"cheeerynne":11,"zatkiller":14,"-":63}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"zatkiller":1,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"tashawan23":1,"-":148}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"    /* Prefix definitions for member*/","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"    public static final Prefix PREFIX_NEW_NAME \u003d new Prefix(\"-n \");","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"-p \");","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"-e \");","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"-r \");","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    /* Prefix definitions for task */","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"-n \");","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"-d \");","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"-s \");","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"-b \");","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"-p \");","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"tashawan23":5,"cheeerynne":2,"zatkiller":4,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMemberCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.DeleteMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new DeleteMemberCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"public class DeleteMemberCommandParser implements Parser\u003cDeleteMemberCommand\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMemberCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"     * and returns a DeleteMemberCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"    public DeleteMemberCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"            Name name \u003d ParserUtil.parseName(args);","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"            return new DeleteMemberCommand(name);","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMemberCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"cheeerynne":7,"zatkiller":3,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new DeleteTaskCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     * and returns a DeleteTaskCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"            return new DeleteTaskCommand(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"rachelljt":5,"zatkiller":3,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/DoneTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.DoneTaskCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new DoneTaskCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"     * and returns an DoneTaskCommand object for execution.","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public DoneTaskCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        Index index;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        try {","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        return new DoneTaskCommand(index);","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"zatkiller":35}},{"path":"src/main/java/seedu/address/logic/parser/EditMemberCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new EditMemberCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"public class EditMemberCommandParser implements Parser\u003cEditMemberCommand\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the EditMemberCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"     * and returns an EditMemberCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NEW_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        Name name;","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"            name \u003d ParserUtil.parseName(argMultimap.getPreamble());","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"                    EditMemberCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor editMemberDescriptor \u003d new EditMemberDescriptor();","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"        if (argMultimap.getValue(PREFIX_NEW_NAME).isPresent()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"            editMemberDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NEW_NAME).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"            editMemberDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"            editMemberDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"            editMemberDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"        if (!editMemberDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"            throw new ParseException(EditMemberCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"        return new EditMemberCommand(name, editMemberDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"tashawan23":5,"cheeerynne":18,"zatkiller":3,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.EditTaskCommand;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new EditTaskCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the EditTaskCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"     * and returns an EditTaskCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    public EditTaskCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_STATUS, PREFIX_DEADLINE,","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"                        PREFIX_PRIORITY);","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        Index index;","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"            editTaskDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"            editTaskDescriptor.setDescription(ParserUtil.parseDescription(argMultimap","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"                    .getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"            editTaskDescriptor.setStatus(ParserUtil.parseStatus(argMultimap","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"                    .getValue(PREFIX_STATUS).get()));","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"        if (argMultimap.getValue(PREFIX_DEADLINE).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"            editTaskDescriptor.setDeadline(ParserUtil.parseDeadline(argMultimap","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"                    .getValue(PREFIX_DEADLINE).get()));","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"            editTaskDescriptor.setPriority(ParserUtil.parsePriority(argMultimap","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"                    .getValue(PREFIX_PRIORITY).get()));","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"        if (!editTaskDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"        return new EditTaskCommand(index, editTaskDescriptor);","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"tashawan23":46,"zatkiller":22}},{"path":"src/main/java/seedu/address/logic/parser/FindByPriorityCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.FindByPriorityCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.PriorityContainsKeywordPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new FindByPriorityCommand object","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"public class FindByPriorityCommandParser implements Parser\u003cFindByPriorityCommand\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the FindByPriorityCommand","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"     * and returns a FindByPriorityCommand object for execution.","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    public FindByPriorityCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        String[] parsedArgs \u003d trimmedArgs.split(\" \");","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        if (parsedArgs.length !\u003d 1 || parsedArgs[0].equals(\"\")) {","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"                    FindByPriorityCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        String keyword \u003d parsedArgs[0];","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        if (!Priority.isValidValue(keyword)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(String.format(Priority.MESSAGE_CANNOT_FIND_PRIORITY,","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                    FindByPriorityCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        String[] nameKeywords \u003d {keyword};","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        return new FindByPriorityCommand(new PriorityContainsKeywordPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zatkiller":43}},{"path":"src/main/java/seedu/address/logic/parser/FindMemberCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.FindMembersCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.DetailsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new FindMemberCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"public class FindMemberCommandParser implements Parser\u003cFindMembersCommand\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the FindMemberCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     * and returns a FindMemberCommand object for execution.","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"    public FindMembersCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMembersCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        return new FindMembersCommand(new DetailsContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"cheeerynne":6,"zatkiller":3,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/FindTasksBeforeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.FindTasksBeforeCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.DeadlineBeforeDatePredicate;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":" * Parses input arguments and creates a new FindTasksBeforeCommand object","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"public class FindTasksBeforeCommandParser implements Parser\u003cFindTasksBeforeCommand\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"     * Parses the given {@code String} deadine in the context of the FindTasksBeforeCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"     * and returns a FindTasksBefore Command object for execution.","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    public FindTasksBeforeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTasksBeforeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        if (!Deadline.isValidDeadline(trimmedArgs)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Deadline.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        return new FindTasksBeforeCommand(new DeadlineBeforeDatePredicate(trimmedArgs));","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"tashawan23":29,"zatkiller":3}},{"path":"src/main/java/seedu/address/logic/parser/FindTasksCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.FindTasksCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":" * Parses input arguments and creates a new FindTasksCommand object","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"public class FindTasksCommandParser implements Parser\u003cFindTasksCommand\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTasksCommand","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"     * and returns a FindTasksCommand object for execution.","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"    public FindTasksCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTasksCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        return new FindTasksCommand(new TaskContainsKeywordPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":32}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"        System.out.println(trimmedIndex);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"tashawan23"},"content":"     * Parses a {@code String role} into an {@code Role}.","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the given {@code role} is invalid.","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"    public static Role parseRole(String role) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(role);","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"        String trimmedRole \u003d role.trim();","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"        if (!Role.isValidRole(trimmedRole)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"        return new Role(trimmedRole);","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"     * Parses a {@code String title} into a {@code title}.","lastModifiedDate":"2021-03-09"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the given {@code title} is invalid.","lastModifiedDate":"2021-03-09"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":137,"author":{"gitId":"tashawan23"},"content":"    public static Title parseTitle(String title) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":138,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(title);","lastModifiedDate":"2021-03-09"},{"lineNumber":139,"author":{"gitId":"tashawan23"},"content":"        String trimmedTitle \u003d title.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":140,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":142,"author":{"gitId":"tashawan23"},"content":"            assert Title.isValidTitle(trimmedTitle) : \"You have to input a task Title\";","lastModifiedDate":"2021-03-23"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":149,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":150,"author":{"gitId":"tashawan23"},"content":"        return new Title(trimmedTitle);","lastModifiedDate":"2021-03-09"},{"lineNumber":151,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":152,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":153,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":154,"author":{"gitId":"tashawan23"},"content":"     * Parses a {@code String description} into a {@code Description}.","lastModifiedDate":"2021-03-09"},{"lineNumber":155,"author":{"gitId":"tashawan23"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":156,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":157,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the given {@code description} is invalid.","lastModifiedDate":"2021-03-09"},{"lineNumber":158,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":159,"author":{"gitId":"tashawan23"},"content":"    public static Description parseDescription(String description) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":160,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-09"},{"lineNumber":161,"author":{"gitId":"tashawan23"},"content":"        String trimmedDesc \u003d description.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":162,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":163,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":164,"author":{"gitId":"tashawan23"},"content":"            assert Description.isValidDescription(trimmedDesc) : \"You have to input a task description\";","lastModifiedDate":"2021-03-23"},{"lineNumber":165,"author":{"gitId":"tashawan23"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":166,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":167,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":168,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":169,"author":{"gitId":"tashawan23"},"content":"        if (!Description.isValidDescription(trimmedDesc)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-09"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"        return new Description(trimmedDesc);","lastModifiedDate":"2021-03-09"},{"lineNumber":173,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":174,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":175,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"zatkiller"},"content":"     * Parses a {@code String status} into a {@code TaskStatus}.","lastModifiedDate":"2021-03-20"},{"lineNumber":177,"author":{"gitId":"zatkiller"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-20"},{"lineNumber":178,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":179,"author":{"gitId":"zatkiller"},"content":"     * @throws ParseException if the given {@code status} is invalid.","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"zatkiller"},"content":"    public static TaskStatus parseStatus(String status) throws ParseException {","lastModifiedDate":"2021-03-20"},{"lineNumber":182,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(status);","lastModifiedDate":"2021-03-20"},{"lineNumber":183,"author":{"gitId":"zatkiller"},"content":"        String trimmedStatus \u003d status.trim();","lastModifiedDate":"2021-03-20"},{"lineNumber":184,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":185,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":186,"author":{"gitId":"tashawan23"},"content":"            assert TaskStatus.isValidValue(trimmedStatus) : \"You have to input a valid status\";","lastModifiedDate":"2021-03-23"},{"lineNumber":187,"author":{"gitId":"tashawan23"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":188,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(TaskStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":189,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":190,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":191,"author":{"gitId":"zatkiller"},"content":"        if (!TaskStatus.isValidValue(trimmedStatus)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":192,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(TaskStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-20"},{"lineNumber":193,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":194,"author":{"gitId":"zatkiller"},"content":"        return TaskStatus.valueOf(status.toUpperCase());","lastModifiedDate":"2021-03-20"},{"lineNumber":195,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":196,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":197,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":198,"author":{"gitId":"tashawan23"},"content":"     * Parses a {@code String deadline} into a {@code Deadline}.","lastModifiedDate":"2021-03-21"},{"lineNumber":199,"author":{"gitId":"tashawan23"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-21"},{"lineNumber":200,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":201,"author":{"gitId":"tashawan23"},"content":"     * @throws ParseException if the given {@code deadline} is invalid.","lastModifiedDate":"2021-03-21"},{"lineNumber":202,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":203,"author":{"gitId":"tashawan23"},"content":"    public static Deadline parseDeadline(String deadline) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":204,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":205,"author":{"gitId":"tashawan23"},"content":"        String trimmedDeadline \u003d deadline.trim();","lastModifiedDate":"2021-03-21"},{"lineNumber":206,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":207,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":208,"author":{"gitId":"tashawan23"},"content":"            assert Deadline.isValidDeadline(trimmedDeadline) : \"You have to input a valid deadline!\";","lastModifiedDate":"2021-03-23"},{"lineNumber":209,"author":{"gitId":"tashawan23"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2021-03-23"},{"lineNumber":210,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":211,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":212,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":213,"author":{"gitId":"tashawan23"},"content":"        if (!Deadline.isValidDeadline(trimmedDeadline)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":214,"author":{"gitId":"tashawan23"},"content":"            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":215,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":216,"author":{"gitId":"tashawan23"},"content":"        return new Deadline(deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":217,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":218,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":219,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":220,"author":{"gitId":"zatkiller"},"content":"     * Parses a {@code String priorty} into a {@code Priority}.","lastModifiedDate":"2021-03-22"},{"lineNumber":221,"author":{"gitId":"zatkiller"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-22"},{"lineNumber":222,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":223,"author":{"gitId":"zatkiller"},"content":"     * @throws ParseException if the given {@code priority} is invalid.","lastModifiedDate":"2021-03-22"},{"lineNumber":224,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":225,"author":{"gitId":"zatkiller"},"content":"    public static Priority parsePriority(String priority) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":226,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(priority);","lastModifiedDate":"2021-03-22"},{"lineNumber":227,"author":{"gitId":"zatkiller"},"content":"        String trimmedPriority \u003d priority.trim();","lastModifiedDate":"2021-03-22"},{"lineNumber":228,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":229,"author":{"gitId":"zatkiller"},"content":"        if (Priority.isUnassigned(trimmedPriority)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":230,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(Priority.MESSAGE_CANNOT_SPECIFY_UNASSIGNED);","lastModifiedDate":"2021-03-22"},{"lineNumber":231,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":232,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":233,"author":{"gitId":"zatkiller"},"content":"        if (!Priority.isValidValue(trimmedPriority)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":234,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":235,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":236,"author":{"gitId":"zatkiller"},"content":"        return Priority.valueOf(priority.toUpperCase());","lastModifiedDate":"2021-03-22"},{"lineNumber":237,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"tashawan23":93,"zatkiller":37,"-":108}},{"path":"src/main/java/seedu/address/logic/parser/UndoTaskCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.UndoTaskCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"public class UndoTaskCommandParser implements Parser\u003cUndoTaskCommand\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"     * Parses the given {@code String} of arguments in the context of the UndoTaskCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"     * and returns an UndoTaskCommand object for execution.","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    public UndoTaskCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"        Index index;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        try {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoTaskCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        return new UndoTaskCommand(index);","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"zatkiller":33}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TaskList;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"        setTasks(newData.getTaskList());","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"     * Replaces the contents of the task list with {@code tasks}.","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"        this.tasks.setTasks(tasks);","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"     * Returns true if a task with the same identity as {@code task} exists in HEY MATEz.","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"tashawan23"},"content":"    public boolean hasTask(Task task) {","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(task);","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"        return tasks.contains(task);","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"     * Adds a task to HEY MATEz.","lastModifiedDate":"2021-03-09"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"        tasks.addTask(t);","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":125,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"     * Replaces the given task {@code target} in the list with {@code editedTask}.","lastModifiedDate":"2021-03-09"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"     * {@code target} must exist in HEY MATEz.","lastModifiedDate":"2021-03-09"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"    public void setTask(Task target, Task editedTask) {","lastModifiedDate":"2021-03-09"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"        tasks.setTask(target, editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":136,"author":{"gitId":"rachelljt"},"content":"     * Removes {@code key} from this {@code TaskList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":137,"author":{"gitId":"rachelljt"},"content":"     * {@code key} must exist in the task list.","lastModifiedDate":"2021-03-14"},{"lineNumber":138,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"rachelljt"},"content":"    public void removeTask(Task key) {","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"rachelljt"},"content":"        tasks.remove(key);","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"        return tasks.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-09"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-03-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2021-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2021-03-11"},{"lineNumber":163,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)","lastModifiedDate":"2021-03-11"},{"lineNumber":164,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 tasks.equals(((AddressBook) other).tasks));","lastModifiedDate":"2021-03-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2021-03-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tashawan23":42,"rachelljt":8,"-":122}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_UNCOMPLETED_TASKS \u003d task -\u003e task.getTaskStatus().equals(TaskStatus.UNCOMPLETED);","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"     * Adds the given task.","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"    void addTask(Task newTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"     * Replaces the given task {@code target} with {@code editedTask}.","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"     * {@code target} must exist in HEY MATEz.","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"    void setTask(Task target, Task editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"    boolean hasTask(Task task);","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"rachelljt"},"content":"     * Deletes the given task.","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"rachelljt"},"content":"     * The task must exist in the address book.","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"rachelljt"},"content":"    void deleteTask(Task target);","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"    /** Returns an unmodifiable view of the filtered task list */","lastModifiedDate":"2021-03-09"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();","lastModifiedDate":"2021-03-09"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-09"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tashawan23":28,"rachelljt":8,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"        addressBook.addTask(task);","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":125,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"    public void setTask(Task target, Task editedTask) {","lastModifiedDate":"2021-03-09"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"        requireAllNonNull(target, editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"        addressBook.setTask(target, editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"    public boolean hasTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":135,"author":{"gitId":"tashawan23"},"content":"        return addressBook.hasTask(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":137,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"rachelljt"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"rachelljt"},"content":"    public void deleteTask(Task target) {","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"rachelljt"},"content":"        addressBook.removeTask(target);","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":158,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":159,"author":{"gitId":"tashawan23"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":160,"author":{"gitId":"tashawan23"},"content":"        return filteredTasks;","lastModifiedDate":"2021-03-11"},{"lineNumber":161,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":162,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":169,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"tashawan23"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {","lastModifiedDate":"2021-03-09"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-09"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"        filteredTasks.setPredicate(predicate);","lastModifiedDate":"2021-03-09"},{"lineNumber":173,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":174,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tashawan23":37,"rachelljt":5,"-":152}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    ObservableList\u003cTask\u003e getTaskList();","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tashawan23":2,"-":17}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"heymatez.json\");","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"zatkiller":1,"-":86}},{"path":"src/main/java/seedu/address/model/person/DetailsContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import java.util.List;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":" * Tests that a {@code Person}\u0027s details matches any of the keywords given.","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"public class DetailsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"    public DetailsContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAllFields(), keyword));","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"                || (other instanceof DetailsContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"                \u0026\u0026 keywords.equals(((DetailsContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":30}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    private final Role role;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    public Person(Name name, Phone phone, Email email, Role role) {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        requireAllNonNull(name, phone, email);","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"     * Overloaded constructor which sets role to member as default","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"    public Person(Name name, Phone phone, Email email) {","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        requireAllNonNull(name, phone, email);","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        this.role \u003d new Role(\"Member\");","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"    public Role getRole() {","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        return role;","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"    public String getAllFields() {","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"        builder.append(name.fullName).append(\" \")","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"                .append(phone.value).append(\" \")","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"                .append(email.value).append(\" \")","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"                .append(role.memberRole);","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"cheeerynne"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 otherPerson.getRole().equals(getRole());","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"        return Objects.hash(name, phone, email, role);","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"                .append(\"; Role:\")","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"                .append(getRole());","lastModifiedDate":"2021-03-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tashawan23":18,"cheeerynne":8,"zatkiller":1,"-":95}},{"path":"src/main/java/seedu/address/model/person/Role.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":" * Represents a Person\u0027s role in HEY matez.","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"public class Role {","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"            \"Member roles can take any values, and it should not be blank \";","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    //public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"    public final String memberRole;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"     * Constructs a {@code Role}.","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"     * @param role A valid member role.","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    public Role(String role) {","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(role);","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"        memberRole \u003d role;","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"     * Returns true if a given string is a valid member role.","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"    public static boolean isValidRole(String test) {","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"    public String toString() {","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"        return memberRole;","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof Role // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 memberRole.equals(((Role) other).memberRole)); // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"        return memberRole.hashCode();","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"tashawan23":53}},{"path":"src/main/java/seedu/address/model/task/Deadline.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"public class Deadline {","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"            \"Deadlines should be in the format YYYY-MM-DD\";","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    public final LocalDate date;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    public final String dateString;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public final String unformattedDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"     * Constructs a {@code Deadline}.","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"     * @param date A valid date.","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"    public Deadline(String date) {","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"        this.unformattedDate \u003d date;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"        this.dateString \u003d this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    public String getUnformattedDate() {","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        return unformattedDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"        return this.date;","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"     * Returns true if a given string is a valid deadline.","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    public static boolean isValidDeadline(String test) {","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"            LocalDate.parse(test);","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"            return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"    public String toString() {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof Deadline // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 dateString.equals(((Deadline) other).dateString)); // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"tashawan23":53,"zatkiller":6}},{"path":"src/main/java/seedu/address/model/task/DeadlineBeforeDatePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"public class DeadlineBeforeDatePredicate implements Predicate\u003cTask\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"    private final String date;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"    public DeadlineBeforeDatePredicate(String date) {","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    public boolean test(Task task) {","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"        return task.getDeadline().getDeadline().compareTo(LocalDate.parse(this.date)) \u003c 0;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof DeadlineBeforeDatePredicate// instanceof handles nulls","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 date.equals(((DeadlineBeforeDatePredicate) other).date)); // state check","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"tashawan23":24}},{"path":"src/main/java/seedu/address/model/task/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"public class Description {","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    /*","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"     * The first character of the description must not be a whitespace,","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    public final String desc;","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"     * Constructs an {@code Description}.","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"     * @param description A valid description.","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"    public Description(String description) {","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        desc \u003d description;","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"     * Returns true if a given string is a valid description.","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"    public String toString() {","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"        return desc;","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 desc.equals(((Description) other).desc)); // state check","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"        return desc.hashCode();","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":56}},{"path":"src/main/java/seedu/address/model/task/Priority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * Enum for the priority values","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * Priority can take on the values, low, medium, high and unassigned and is used to signify the priority of a task","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * When the user specifies the value of priority, user can only choose from low, medium or high","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" * unassigned is the value that is set if there is no user input for priority","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":" * */","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"public enum Priority {","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    HIGH(\"high\"),","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"    MEDIUM(\"medium\"),","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    LOW(\"low\"),","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    UNASSIGNED(\"unassigned\");","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Error with Task Priority! \"","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"            + \"Task Priority should take one of the predefined values: high, medium, low (Case Sensitive)\";","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_CANNOT_SPECIFY_UNASSIGNED \u003d \"If you are specifying a value for priority \"","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"            + \"it cannot be unassigned. Please choose from the value: high, medium or low (Case Sensitive).\";","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_CANNOT_FIND_PRIORITY \u003d \"If you are looking for tasks with a certain priority,\"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"            + \"please choose from the values: high, medium, low or unassigned (Case Sensitive).\";","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    public final String priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    Priority(String priority) {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"     * Returns a String value by of the Enum name to use for UI","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"     * @return a string value of the enum name to us for the UI","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    public static String getEnumName() {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        return \"Priority\";","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"     * Returns a boolean value if the str input is \"unasssigned\"","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"     * @return a boolean value","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    public static boolean isUnassigned(String str) {","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        return str.equals(\"unassigned\");","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"     * Returns a boolean value by check if the String value is a","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"     * value within this enum and is not unassigned value","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"     * @param value value for the Task Status enum","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"     * @return a boolean value, whether the it is a value inside this enum","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"    public static boolean isValidValue(String value) {","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        for (Priority c : Priority.values()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"            boolean match \u003d c.name().toLowerCase().equals(value);","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"            if (match) {","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"                return true;","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"        return false;","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"    public String getPriority() {","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"        return this.priority.toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"    public String toString() {","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        return this.priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zatkiller":74}},{"path":"src/main/java/seedu/address/model/task/PriorityContainsKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.util.List;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":" * Tests that a {@code Task}\u0027s {@code Priority} matches any of the keywords given.","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"public class PriorityContainsKeywordPredicate implements Predicate\u003cTask\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public PriorityContainsKeywordPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public boolean test(Task task) {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getPriority().getPriority(), keyword));","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"                || (other instanceof PriorityContainsKeywordPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"                \u0026\u0026 keywords.equals(((PriorityContainsKeywordPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zatkiller":30}},{"path":"src/main/java/seedu/address/model/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":" * Represents a Task in HEY MATEz.","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"public class Task {","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    // Identity fields","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    private final Title title;","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"    // Data fields","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    private final Description description;","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    private final TaskStatus taskStatus;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    private final Deadline deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    private final Priority priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"     * Overloaded constructor which sets taskStatus to uncompleted and PRIORITY to unassigned by default","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    public Task(Title title, Description description, Deadline deadline) {","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        requireAllNonNull(title, description, deadline);","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        this.taskStatus \u003d TaskStatus.UNCOMPLETED;","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d Priority.UNASSIGNED;","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"     * Overloaded constructor where every field must be present and not null. Priority here is default to unassigned","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"    public Task(Title title, Description description, Deadline deadline, TaskStatus taskStatus) {","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        requireAllNonNull(title, description, deadline, taskStatus);","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        this.taskStatus \u003d taskStatus;","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d Priority.UNASSIGNED;","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"     * Overloaded constructor where every field must be present and not null. Status set to default of UNCOMPLETED","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"    public Task(Title title, Description description, Deadline deadline, Priority priority) {","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        requireAllNonNull(title, description, deadline, priority);","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        this.taskStatus \u003d TaskStatus.UNCOMPLETED;","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"     * Overloaded constructor where every field must be present and not null","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"    public Task(Title title, Description description, Deadline deadline, TaskStatus taskStatus, Priority priority) {","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        requireAllNonNull(title, description, deadline, taskStatus, priority);","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"        this.taskStatus \u003d taskStatus;","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"    public Title getTitle() {","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"        return title;","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"    public Description getDescription() {","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"        return description;","lastModifiedDate":"2021-03-09"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"    public TaskStatus getTaskStatus() {","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        return taskStatus;","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"    public Deadline getDeadline() {","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"        return deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"    public Priority getPriority() {","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"        return this.priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"     * Returns true if both tasks have the same title.","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"     * This defines a weaker notion of equality between two tasks.","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"    public boolean isSameTask(Task otherTask) {","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"        if (otherTask \u003d\u003d this) {","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"            return true;","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"        return otherTask !\u003d null","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 otherTask.getTitle().equals(getTitle());","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"     * Returns true if both tasks have the same identity and data fields.","lastModifiedDate":"2021-03-09"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"     * This defines a stronger notion of equality between two tasks.","lastModifiedDate":"2021-03-09"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-09"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"            return true;","lastModifiedDate":"2021-03-09"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":113,"author":{"gitId":"tashawan23"},"content":"        if (!(other instanceof Task)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"            return false;","lastModifiedDate":"2021-03-09"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"        Task otherTask \u003d (Task) other;","lastModifiedDate":"2021-03-09"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"        return otherTask.getTitle().equals(getTitle())","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 otherTask.getDescription().equals(getDescription())","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 otherTask.getDeadline().equals((getDeadline()));","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-09"},{"lineNumber":125,"author":{"gitId":"tashawan23"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-09"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"        return Objects.hash(title, description, deadline);","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"    public String toString() {","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"        builder.append(getTitle())","lastModifiedDate":"2021-03-09"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"                .append(\"; Description: \")","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"zatkiller"},"content":"                .append(getDescription())","lastModifiedDate":"2021-03-20"},{"lineNumber":135,"author":{"gitId":"tashawan23"},"content":"                .append(\"; Deadline: \")","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"                .append(getDeadline())","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"zatkiller"},"content":"                .append(\"; Task Status: \")","lastModifiedDate":"2021-03-20"},{"lineNumber":138,"author":{"gitId":"zatkiller"},"content":"                .append(getTaskStatus())","lastModifiedDate":"2021-03-22"},{"lineNumber":139,"author":{"gitId":"zatkiller"},"content":"                .append(\"; Priority: \")","lastModifiedDate":"2021-03-22"},{"lineNumber":140,"author":{"gitId":"zatkiller"},"content":"                .append(getPriority());","lastModifiedDate":"2021-03-22"},{"lineNumber":141,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":142,"author":{"gitId":"tashawan23"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-09"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":91,"zatkiller":54}},{"path":"src/main/java/seedu/address/model/task/TaskContainsKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import java.util.List;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":" * Tests that a {@code Task}\u0027s {@code Title} or {@code Description} matches any of the keywords given.","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"public class TaskContainsKeywordPredicate implements Predicate\u003cTask\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"    public TaskContainsKeywordPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"    public boolean test(Task task) {","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"        boolean title \u003d keywords.stream()","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTitle().taskTitle, keyword));","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"        boolean description \u003d keywords.stream()","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription().desc, keyword));","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        return title || description;","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"                || (other instanceof TaskContainsKeywordPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"                \u0026\u0026 keywords.equals(((TaskContainsKeywordPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":35}},{"path":"src/main/java/seedu/address/model/task/TaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import java.util.List;","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":" * A list of task that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":" * A Task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":" * persons uses Task#isSameTask) for equality so as to ensure that the Task being added or updated is","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":" * unique in terms of identity in the TaskList. However, the removal of a task uses Task#equals(Object) so","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":" * as to ensure that the Task with exactly the same fields will be removed.","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":" *","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":" *","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":" * @see Task#isSameTask(Task)","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"     * Returns true if the list contains an equivalent task as the given argument.","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    public boolean contains(Task toCheck) {","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        return internalList.stream().anyMatch(toCheck::isSameTask);","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"     * Adds a task to the list.","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"     * Task may be a duplicate","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"    public void addTask(Task toAdd) {","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}.","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    public void setTask(Task target, Task editedTask) {","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"        requireAllNonNull(target, editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"        internalList.set(index, editedTask);","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"    public void setTasks(TaskList replacement) {","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-09"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"     * Replaces the contents of this list with {@code tasks}.","lastModifiedDate":"2021-03-09"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"     * {@code tasks} may contain duplicate tasks.","lastModifiedDate":"2021-03-09"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"        requireAllNonNull(tasks);","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"        internalList.setAll(tasks);","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":77,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"rachelljt"},"content":"     * Removes the equivalent task from the list.","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"rachelljt"},"content":"     * The task must exist in the list.","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"rachelljt"},"content":"    public void remove(Task toRemove) {","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"rachelljt"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"rachelljt"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"rachelljt"},"content":"            throw new TaskNotFoundException();","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":89,"author":{"gitId":"tashawan23"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-09"},{"lineNumber":90,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof TaskList // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 internalList.equals(((TaskList) other).internalList));","lastModifiedDate":"2021-03-09"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-09"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-09"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":90,"rachelljt":11,"zatkiller":11}},{"path":"src/main/java/seedu/address/model/task/TaskStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * Enum for the Task status values","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * It is used to signify whether a task has been completed or uncompleted","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * Task Status can take on the values, UNCOMPLETED or COMPLETED","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" * */","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"public enum TaskStatus {","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"    UNCOMPLETED(\"uncompleted\"),","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"    COMPLETED(\"completed\");","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Error with Task Status Value. \"","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"            + \"Task Status should take one of the predefined values: completed or uncompleted (Case sensitive)\";","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    public final String status;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    TaskStatus(String status) {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"        this.status \u003d status;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"     * Returns a String value by of the Enum name to use for UI","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"     * @return a string value of the enum name to us for the UI","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    public static String getEnumName() {","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        return \"Task Status\";","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"     * Returns a boolean value by check if the String value is a","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"     * value within this enum","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"     * @param value value for the Task Status enum","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"     * @return a boolean value, whether the it is a value inside this enum","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    public static boolean isValidValue(String value) {","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        for (TaskStatus c : TaskStatus.values()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"            if (c.name().toLowerCase().equals(value)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"                return true;","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"            }","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"        return false;","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"    public String getStatus() {","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        return this.status.toLowerCase();","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"    public String toString() {","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        return this.status;","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"tashawan23":2,"zatkiller":54}},{"path":"src/main/java/seedu/address/model/task/Title.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":" * Represents a Task\u0027s title in HEY MATEz.","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"public class Title {","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    /*","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"     * The first character of the title must not be a whitespace,","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    public final String taskTitle;","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"     * Constructs a {@code Title}.","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"     * @param title A valid title.","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    public Title(String title) {","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"        requireNonNull(title);","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        taskTitle \u003d title;","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"    public static boolean isValidTitle(String test) {","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"    public String toString() {","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        return taskTitle;","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof Title // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 taskTitle.equals(((Title) other).taskTitle)); // state check","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"        return taskTitle.hashCode();","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":57}},{"path":"src/main/java/seedu/address/model/task/TitleContainsKeywordPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import java.util.List;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"public class TitleContainsKeywordPredicate implements Predicate\u003cTask\u003e {","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    public TitleContainsKeywordPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    public boolean test(Task task) {","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getTitle().taskTitle, keyword));","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"                || (other instanceof TitleContainsKeywordPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"                \u0026\u0026 keywords.equals(((TitleContainsKeywordPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"tashawan23":27}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task.exceptions;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":" * Signals that the operation is unable to find the specified task.","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"public class TaskNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"tashawan23":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"                    new Role(\"Member\")),","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"                    new Role(\"Member\")),","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"                    new Role(\"Member\")),","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"                    new Role(\"Member\")),","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"                    new Role(\"Member\")),","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"                    new Role(\"Member\")),","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    public static Task[] getSampleTasks() {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        return new Task[] {","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"            new Task(new Title(\"End of Year Club Performance Review\"),","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"                    new Description(\"End of Year Club Performance Review with the other EXCO member\"),","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"                    new Deadline(\"2020-12-13\"), TaskStatus.valueOf(\"COMPLETED\"), Priority.valueOf(\"MEDIUM\")),","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"            new Task(new Title(\"Meeting with EXCO\"), new Description(\"Meeting to discuss about club budget\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"                    new Deadline(\"2021-04-01\"), TaskStatus.valueOf(\"UNCOMPLETED\"), Priority.valueOf(\"HIGH\")),","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"            new Task(new Title(\"Meeting with MINDS stakeholders\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"                    new Description(\"Meeting with stakeholders to discuss about planning of charity event\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"                    new Deadline(\"2021-02-23\"), TaskStatus.valueOf(\"COMPLETED\"), Priority.valueOf(\"MEDIUM\")),","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"            new Task(new Title(\"Cohesion Planning\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"                    new Description(\"Plan for Club cohesion. Decide on logistic and games\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"                    new Deadline(\"2021-08-30\"), TaskStatus.valueOf(\"UNCOMPLETED\"), Priority.valueOf(\"LOW\")),","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"            new Task(new Title(\"Buy materials for upcoming Cohesion\"),","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"                    new Description(\"Buy N95 masks, alcohol wipes for participants to use\"),","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"                    new Deadline(\"2021-05-15\"), TaskStatus.valueOf(\"UNCOMPLETED\"), Priority.valueOf(\"UNASSIGNED\")),","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"            new Task(new Title(\"NUSSU Hackathon\"),","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"                    new Description(\"Hackathon event day\"),","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"                    new Deadline(\"2021-09-01\"), TaskStatus.valueOf(\"UNCOMPLETED\"), Priority.valueOf(\"HIGH\")),","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        for (Task sampleTask : getSampleTasks()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"            sampleAb.addTask(sampleTask);","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"tashawan23":7,"zatkiller":28,"-":36}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    private final String role;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"role\") String role) {","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        this.role \u003d role;","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"        assert source !\u003d null : \"person source should not be null\";","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        role \u003d source.getRole().memberRole;","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"        if (role \u003d\u003d null) {","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"        if (!Role.isValidRole(role)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"tashawan23"},"content":"        final Role modelRole \u003d new Role(role);","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelRole);","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tashawan23":11,"cheeerynne":2,"-":78}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTask.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":" * Jackson-friendly version of {@link Task}.","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"public class JsonAdaptedTask {","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    private final String title;","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"    private final String description;","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    private final String status;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    private final String deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    private final String priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"     * Constructs a {@code JsonAdaptedtask} with the given task details.","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    public JsonAdaptedTask(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"                           @JsonProperty(\"deadline\") String deadline, @JsonProperty(\"status\") String status,","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"                           @JsonProperty(\"priority\") String priority) {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        this.title \u003d title;","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        this.status \u003d status;","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"     * Converts a given {@code Task} into this class for Jackson use.","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"    public JsonAdaptedTask(Task source) {","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"        assert source !\u003d null;","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        title \u003d source.getTitle().taskTitle;","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        description \u003d source.getDescription().desc;","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        deadline \u003d source.getDeadline().getUnformattedDate();","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        status \u003d source.getTaskStatus().getStatus();","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        priority \u003d source.getPriority().getPriority();","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object.","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task.","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"    public Task toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"        if (title \u003d\u003d null) {","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        if (!Title.isValidTitle(title)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-09"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        final Title modelTitle \u003d new Title(title);","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"                    Description.class.getSimpleName()));","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"        if (!Description.isValidDescription(description)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"        if (deadline \u003d\u003d null) {","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"tashawan23"},"content":"                    Deadline.class.getSimpleName()));","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"        if (!Deadline.isValidDeadline(deadline)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"        final Deadline modelDeadline \u003d new Deadline(deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"        if (status \u003d\u003d null) {","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"                    TaskStatus.getEnumName()));","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"        if (!TaskStatus.isValidValue(status)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"            throw new IllegalValueException(TaskStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"        final TaskStatus modelTaskStatus \u003d TaskStatus.valueOf(status.toUpperCase());","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"        if (priority \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"                    Priority.getEnumName()));","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"        if (!Priority.isValidValue(priority)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        final Priority modelPriority \u003d Priority.valueOf(priority.toUpperCase());","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"        return new Task(modelTitle, modelDescription, modelDeadline, modelTaskStatus, modelPriority);","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"tashawan23":71,"rachelljt":1,"zatkiller":36}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"                                       @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        this.tasks.addAll(tasks);","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        for (JsonAdaptedTask jsonAdaptedTask : tasks) {","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"            Task task \u003d jsonAdaptedTask.toModelType();","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"            addressBook.addTask(task);","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tashawan23":11,"-":59}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w14-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"zatkiller":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"    private TaskListPanel taskListPanel;","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"    private StackPane taskListPanelPlaceholder;","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"rachelljt"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"rachelljt"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());","lastModifiedDate":"2021-03-14"},{"lineNumber":122,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"rachelljt"},"content":"    public TaskListPanel getTaskListPanel() {","lastModifiedDate":"2021-03-14"},{"lineNumber":178,"author":{"gitId":"rachelljt"},"content":"        return taskListPanel;","lastModifiedDate":"2021-03-14"},{"lineNumber":179,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":180,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"rachelljt":11,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"    private Label role;","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        phone.setText(\"Phone Number: \" + person.getPhone().value);","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        email.setText(\"Email: \" + person.getEmail().value);","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"        role.setText(\"Role: \" + person.getRole().memberRole);","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tashawan23":3,"zatkiller":2,"-":65}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":" * An UI component that displays information of a {@code Task}.","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"    public final Task task;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    private Label title;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    private Label id;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"    private Label description;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    @FXML","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    private Label deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"    @FXML","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    private Label taskStatus;","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    @FXML","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    private Label priority;","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"     * Creates a {@code TaskCode} with the given {@code Task} and index to display.","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"    public TaskCard(Task task, int displayedIndex) {","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        super(FXML);","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"        title.setText(task.getTitle().taskTitle);","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        description.setText(\"Description: \" + task.getDescription().desc);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        deadline.setText(\"Deadline: \" + task.getDeadline().dateString);","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        taskStatus.setText(\"Status: \" + task.getTaskStatus().getStatus());","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        priority.setText(\"Priority: \" + task.getPriority().getPriority());","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"            return true;","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"rachelljt"},"content":"        if (!(other instanceof TaskCard)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"rachelljt"},"content":"            return false;","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"rachelljt"},"content":"        // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"        TaskCard card \u003d (TaskCard) other;","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"rachelljt"},"content":"                \u0026\u0026 task.equals(card.task);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"tashawan23":3,"rachelljt":54,"zatkiller":7}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":" * Panel containing the list of tasks.","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    @FXML","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    private ListView\u003cTask\u003e taskListView;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"     * Creates a {@code TaskListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"        super(FXML);","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        taskListView.setItems(taskList);","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}.","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"    class TaskListViewCell extends ListCell\u003cTask\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"        protected void updateItem(Task task, boolean empty) {","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"            super.updateItem(task, empty);","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"            if (empty || task \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"                setText(null);","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"            } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"rachelljt":49}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"         \u003cHBox alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                  \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                     \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                  \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"               \u003c/Label\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                  \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                     \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                  \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"               \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"         \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"rachelljt":1,"-":38}},{"path":"src/main/resources/view/HeyMatez.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":".error {","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"/*.list-cell:empty {*/","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"/*    !* Empty cells will not have alternating colours *!*/","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"/*    -fx-background: white;*/","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"/*}*/","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":".list-cell:filled:selected {","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #acd8e8;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    -fx-border-color: #acd8e8;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":".list-cell:filled:selected .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    -fx-text-fill: #283754;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":".tag-selector {","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"    -fx-border-color: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":".tooltip-text {","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":".cell_big_label {","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"    -fx-font-family: \"Arial\";","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":".cell_small_label {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"    -fx-font-family: \"Arial\";","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":".column-header-background {","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"    -fx-font-family: \"Arial Rounded MT Bold\";","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"#personCardPane {","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #EEBCF3;","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"rachelljt"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"rachelljt"},"content":"#taskCardPane {","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #F7C06F;","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"rachelljt"},"content":"    -fx-background-radius: 15;","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"#resultDisplay .content {","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: white;","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"rachelljt"},"content":"#headerName {","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #E6DFE7;","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"rachelljt"},"content":"#headerName .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"rachelljt"},"content":"    -fx-font-family: \"Andale Mono\";","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"rachelljt"},"content":"    -fx-font-size: 23;","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"rachelljt"},"content":"    -fx-alignment: center;","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"rachelljt"},"content":"    -fx-text-alignment: center;","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"rachelljt"},"content":"    -fx-content-display: center;","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"rachelljt"},"content":"#taskList {","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #F0D5AF;","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"rachelljt"},"content":"    -fx-padding: 10, 10, 10, 10;","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"rachelljt"},"content":"#taskAndMemberListHeader {","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #EAE5E0;","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"rachelljt"},"content":"#taskAndMemberListHeader .label {","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #EAE5E0;","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"rachelljt"},"content":"    -fx-text-alignment: center;","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"rachelljt"},"content":"    -fx-content-display: center;","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"rachelljt"},"content":"    -fx-alignment:  center;","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"rachelljt"},"content":"    -fx-font-family: \"Arial Rounded MT Bold\";","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"rachelljt"},"content":"    -fx-font-size: 18;","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"rachelljt"},"content":"    -fx-label-padding: 10, 10, 10, 10;","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"rachelljt"},"content":"#memberList {","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"rachelljt"},"content":"    -fx-background-color: #E0A6D3;","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"rachelljt"},"content":"    -fx-padding: 10, 10, 10, 10;","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"rachelljt"},"content":"#resultDisplayPlaceholder {","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"rachelljt"},"content":"    -fx-padding: 5, 10, 10, 5;","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"rachelljt"},"content":"#commandBoxPlaceholder {","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"rachelljt"},"content":"    -fx-padding: 5, 10, 10, 5;","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"rachelljt":108}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"        \u003cstylesheets\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"            \u003cURL value\u003d\"@HeyMatez.css\" /\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"        \u003c/stylesheets\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"            \u003cAnchorPane prefHeight\u003d\"35.0\" prefWidth\u003d\"680.0\" id\u003d\"headerName\" fx:id\u003d\"headerName\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"                  \u003cLabel prefHeight\u003d\"35.0\" prefWidth\u003d\"680.0\" text\u003d\"HEY MATEz\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"                  \u003c/Label\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"            \u003c/AnchorPane\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"            \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"                        \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340.0\" prefHeight\u003d\"340.0\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"                     \u003cAnchorPane prefHeight\u003d\"38.0\" prefWidth\u003d\"320.0\" id\u003d\"taskAndMemberListHeader\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"                           \u003cLabel text\u003d\"Tasks\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"                           \u003c/Label\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"                     \u003c/AnchorPane\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"                      \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"120\" minHeight\u003d\"120.0\" prefHeight\u003d\"120.0\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                     \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"rachelljt"},"content":"                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"                     \u003c/StackPane\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"rachelljt"},"content":"                        \u003cVBox id\u003d\"memberList\" minWidth\u003d\"340\" prefHeight\u003d\"340.0\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"                     \u003cAnchorPane id\u003d\"taskAndMemberListHeader\" prefHeight\u003d\"38.0\" prefWidth\u003d\"320.0\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"rachelljt"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"rachelljt"},"content":"                           \u003cLabel text\u003d\"Members\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"                           \u003c/Label\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"rachelljt"},"content":"                     \u003c/AnchorPane\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"                      \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" style\u003d\"-fx-background-color: #E0A6D3 #E0A6D3;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"rachelljt"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"               \u003c/children\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"rachelljt"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                  \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"rachelljt":38,"-":32}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"\u003cHBox id\u003d\"personCardPane\" fx:id\u003d\"personCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"      \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tashawan23":1,"rachelljt":8,"-":31}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"rachelljt":1,"-":7}},{"path":"src/main/resources/view/TaskListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"\u003cHBox id\u003d\"taskCardPane\" fx:id\u003d\"taskCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"120\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"                \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"            \u003cLabel fx:id\u003d\"taskStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$taskStatus\" /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"tashawan23":1,"rachelljt":37,"zatkiller":1}},{"path":"src/main/resources/view/TaskListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"rachelljt":8}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Member\"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Member\"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"  } ],","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"  \"tasks\": [","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"      \"title\": \"Plan meeting\",","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"      \"description\": \"Draft agenda for board meeting\"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tashawan23":7,"-":11}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Member\"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"  } ],","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"  \"tasks\": [","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"    {","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"      \"title\": \"Plan meeting\",","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"      \"description\": \"Draft agenda for board meeting\"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tashawan23":6,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\",","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Member\"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Member\"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"President\"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Secretary\"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Treasurer\"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Member\"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"    \"role\" : \"Assistant Secretary\"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"  } ],","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"  \"tasks\": []","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tashawan23":8,"zatkiller":1,"-":31}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"  \"addressBookFilePath\" : \"heymatez.json\"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zatkiller":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"  \"addressBookFilePath\" : \"heymatez.json\"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zatkiller":1,"-":10}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.ViewMembersCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        String listCommand \u003d ViewMembersCommand.COMMAND_WORD;","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(listCommand, ViewMembersCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    /*","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"    */","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"zatkiller":7,"-":141}},{"path":"src/test/java/seedu/address/logic/commands/AddMemberCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":" * Contains integration tests (interaction with the Model) for {@code AddMemberCommand}.","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"public class AddMemberCommandIntegrationTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new AddMemberCommand(validPerson), model,","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                String.format(AddMemberCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new AddMemberCommand(personInList), model, AddMemberCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"zatkiller":5,"-":39}},{"path":"src/test/java/seedu/address/logic/commands/AddMemberCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"public class AddMemberCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddMemberCommand(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        CommandResult commandResult \u003d new AddMemberCommand(validPerson).execute(modelStub);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        assertEquals(String.format(AddMemberCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        AddMemberCommand addPersonCommand \u003d new AddMemberCommand(validPerson);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        assertThrows(CommandException.class, AddMemberCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"                addPersonCommand.execute(modelStub));","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        AddMemberCommand addAliceCommand \u003d new AddMemberCommand(alice);","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        AddMemberCommand addBobCommand \u003d new AddMemberCommand(bob);","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        AddMemberCommand addAliceCommandCopy \u003d new AddMemberCommand(alice);","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"        public void addTask(Task task) {","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"rachelljt"},"content":"        @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"rachelljt"},"content":"        public void deleteTask(Task target) {","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"rachelljt"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":164,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":165,"author":{"gitId":"tashawan23"},"content":"        public boolean hasTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":167,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":168,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":169,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":170,"author":{"gitId":"tashawan23"},"content":"        public void setTask(Task target, Task editedTask) {","lastModifiedDate":"2021-03-11"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":173,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":174,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":175,"author":{"gitId":"tashawan23"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":176,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":177,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":178,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":179,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":180,"author":{"gitId":"tashawan23"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {","lastModifiedDate":"2021-03-11"},{"lineNumber":181,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":182,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"tashawan23":27,"rachelljt":5,"zatkiller":10,"-":185}},{"path":"src/test/java/seedu/address/logic/commands/AddTaskCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":" * Contains integration tests (interaction with the Model) for {@code AddTaskCommand}.","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"public class AddTaskCommandIntegrationTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    private Model model;","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    public void execute_newTask_success() {","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        Task validTask \u003d new TaskBuilder().build();","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        expectedModel.addTask(validTask);","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new AddTaskCommand(validTask), model,","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), expectedModel);","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public void execute_duplicateTask_throwsCommandException() {","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        Task taskInList \u003d model.getAddressBook().getTaskList().get(0);","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new AddTaskCommand(taskInList), model, AddTaskCommand.MESSAGE_DUPLICATE_TASK);","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"zatkiller":44}},{"path":"src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"public class AddTaskCommandTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"    public void constructor_nullTask_throwsNullPointerException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        AddTaskCommandTest.ModelStubAcceptingTaskAdded modelStub \u003d new AddTaskCommandTest","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"                .ModelStubAcceptingTaskAdded();","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        Task validTask \u003d new TaskBuilder().build();","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        CommandResult commandResult \u003d new AddTaskCommand(validTask).execute(modelStub);","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"        assertEquals(String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    public void equals() {","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        Task planMeeting \u003d new TaskBuilder().withTitle(\"Plan meeting\").build();","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        Task bookVenue \u003d new TaskBuilder().withTitle(\"Book venue\").build();","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        AddTaskCommand addPlanMeetingCommand \u003d new AddTaskCommand(planMeeting);","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"        AddTaskCommand addBookVenueCommand \u003d new AddTaskCommand(bookVenue);","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"        assertTrue(addPlanMeetingCommand.equals(addPlanMeetingCommand));","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        AddTaskCommand addPlanMeetingCommandCopy \u003d new AddTaskCommand(planMeeting);","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        assertTrue(addPlanMeetingCommand.equals(addPlanMeetingCommandCopy));","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"        assertFalse(addPlanMeetingCommand.equals(1));","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"        assertFalse(addPlanMeetingCommand.equals(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"        assertFalse(addPlanMeetingCommand.equals(addBookVenueCommand));","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"tashawan23"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"        public void addTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-17"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":125,"author":{"gitId":"tashawan23"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-03-17"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"        public boolean hasTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":135,"author":{"gitId":"tashawan23"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-03-17"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":137,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":139,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":140,"author":{"gitId":"tashawan23"},"content":"        public void deleteTask(Task target) {","lastModifiedDate":"2021-03-17"},{"lineNumber":141,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":142,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-03-17"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":148,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":149,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":150,"author":{"gitId":"tashawan23"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":151,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":152,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":153,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":154,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":155,"author":{"gitId":"tashawan23"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-03-17"},{"lineNumber":156,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":158,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":159,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":160,"author":{"gitId":"tashawan23"},"content":"        public void setTask(Task target, Task editedTask) {","lastModifiedDate":"2021-03-17"},{"lineNumber":161,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":162,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":163,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":164,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":165,"author":{"gitId":"tashawan23"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":166,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":167,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":168,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":169,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":170,"author":{"gitId":"tashawan23"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {","lastModifiedDate":"2021-03-17"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":173,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":174,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":175,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":176,"author":{"gitId":"tashawan23"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2021-03-17"},{"lineNumber":177,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":178,"author":{"gitId":"tashawan23"},"content":"    private class ModelStubWithTask extends AddTaskCommandTest.ModelStub {","lastModifiedDate":"2021-03-17"},{"lineNumber":179,"author":{"gitId":"tashawan23"},"content":"        private final Task task;","lastModifiedDate":"2021-03-17"},{"lineNumber":180,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":181,"author":{"gitId":"tashawan23"},"content":"        ModelStubWithTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":182,"author":{"gitId":"tashawan23"},"content":"            requireNonNull(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":183,"author":{"gitId":"tashawan23"},"content":"            this.task \u003d task;","lastModifiedDate":"2021-03-17"},{"lineNumber":184,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":185,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":186,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":187,"author":{"gitId":"tashawan23"},"content":"        public boolean hasTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":188,"author":{"gitId":"tashawan23"},"content":"            requireNonNull(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":189,"author":{"gitId":"tashawan23"},"content":"            return this.task.isSameTask(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":190,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":191,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":192,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":193,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":194,"author":{"gitId":"tashawan23"},"content":"     * A Model stub that always accept the task being added.","lastModifiedDate":"2021-03-17"},{"lineNumber":195,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":196,"author":{"gitId":"tashawan23"},"content":"    private class ModelStubAcceptingTaskAdded extends AddTaskCommandTest.ModelStub {","lastModifiedDate":"2021-03-17"},{"lineNumber":197,"author":{"gitId":"tashawan23"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-17"},{"lineNumber":198,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":199,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":200,"author":{"gitId":"tashawan23"},"content":"        public boolean hasTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":201,"author":{"gitId":"tashawan23"},"content":"            requireNonNull(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":202,"author":{"gitId":"tashawan23"},"content":"            return tasksAdded.stream().anyMatch(task::isSameTask);","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":205,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":206,"author":{"gitId":"tashawan23"},"content":"        public void addTask(Task task) {","lastModifiedDate":"2021-03-17"},{"lineNumber":207,"author":{"gitId":"tashawan23"},"content":"            requireNonNull(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":208,"author":{"gitId":"tashawan23"},"content":"            tasksAdded.add(task);","lastModifiedDate":"2021-03-17"},{"lineNumber":209,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":210,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":211,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":212,"author":{"gitId":"tashawan23"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-17"},{"lineNumber":213,"author":{"gitId":"tashawan23"},"content":"            return new AddressBook();","lastModifiedDate":"2021-03-17"},{"lineNumber":214,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":215,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":216,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"tashawan23":216}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.TitleContainsKeywordPredicate;","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.EditMemberDescriptorBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_ROLE_AMY \u003d \"Events Head\";","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_ROLE_BOB \u003d \"Member\";","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    public static final String VALID_TITLE_MARATHON \u003d \"MARATHON\";","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"    public static final String VALID_DESCRIPTION_MARATHON \u003d \"At east coast park\";","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_DEADLINE_MARATHON \u003d \"2021-05-06\";","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"    public static final String VALID_STATUS_MARATHON \u003d \"completed\";","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_PRIORITY_MARATHON \u003d \"low\";","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_TITLE_MEETING \u003d \"MEETING\";","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_DESCRIPTION_MEETING \u003d \"Board meeting\";","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_DEADLINE_MEETING \u003d \"2021-07-02\";","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    public static final String VALID_STATUS_MEETING \u003d \"uncompleted\";","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"    public static final String VALID_PRIORITY_MEETING \u003d \"high\";","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"    public static final String NEW_NAME_DESC_AMY \u003d \" \" + PREFIX_NEW_NAME + VALID_NAME_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"    public static final String NEW_NAME_DESC_BOB \u003d \" \" + PREFIX_NEW_NAME + VALID_NAME_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"    public static final String NEW_TITLE_MARATHON \u003d \"CYCLING MARATHON\";","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"    public static final String TITLE_DESC_TASK1 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_MARATHON;","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"    public static final String TITLE_DESC_TASK2 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"    public static final String DESCRIPTION_TASK1 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MARATHON;","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"    public static final String DESCRIPTION_TASK2 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"    public static final String DEADLINE_TASK1 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"    public static final String DEADLINE_TASK2 \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"    public static final String PRIORITY_TASK1 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MARATHON;","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"    public static final String PRIORITY_TASK2 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"    public static final String STATUS_TASK1 \u003d \" \" + PREFIX_STATUS + VALID_STATUS_MARATHON;","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"    public static final String STATUS_TASK2 \u003d \" \" + PREFIX_STATUS + VALID_STATUS_MEETING;","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"    public static final String NAME_DESC_AMY \u003d VALID_NAME_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"    public static final String NAME_DESC_BOB \u003d VALID_NAME_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"cheeerynne"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"cheeerynne"},"content":"    public static final String INVALID_NEW_NAME_DESC \u003d \" \" + PREFIX_NEW_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in new names","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"tashawan23"},"content":"    public static final String INVALID_DEADLINE_DESC \u003d \" \" + PREFIX_DEADLINE + \"20 March 2021\"; // only allow dates in","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"tashawan23"},"content":"    // the format \"YYYY-MM-DD\"","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"very high\";","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":93,"author":{"gitId":"cheeerynne"},"content":"    public static final EditMemberCommand.EditMemberDescriptor DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"cheeerynne"},"content":"    public static final EditMemberCommand.EditMemberDescriptor DESC_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"rachelljt"},"content":"    public static final EditTaskCommand.EditTaskDescriptor DESC_TASK1;","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"    public static final EditTaskCommand.EditTaskDescriptor DESC_TASK2;","lastModifiedDate":"2021-03-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"cheeerynne"},"content":"        DESC_AMY \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"cheeerynne"},"content":"        DESC_BOB \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"rachelljt"},"content":"        DESC_TASK1 \u003d new EditTaskDescriptorBuilder().withTitle(VALID_DESCRIPTION_MARATHON)","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MARATHON).withDeadline(VALID_DEADLINE_MARATHON).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"        DESC_TASK2 \u003d new EditTaskDescriptorBuilder().withTitle(VALID_DESCRIPTION_MEETING)","lastModifiedDate":"2021-03-18"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MEETING).withPriority(\"high\").build();","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"rachelljt"},"content":"        List\u003cTask\u003e expectedFilteredTaskList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());","lastModifiedDate":"2021-03-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":152,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedFilteredTaskList, actualModel.getFilteredTaskList());","lastModifiedDate":"2021-03-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":154,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":171,"author":{"gitId":"tashawan23"},"content":"     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-18"},{"lineNumber":172,"author":{"gitId":"tashawan23"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-03-18"},{"lineNumber":173,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":174,"author":{"gitId":"tashawan23"},"content":"    public static void showTaskAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-18"},{"lineNumber":175,"author":{"gitId":"tashawan23"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":176,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":177,"author":{"gitId":"tashawan23"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-18"},{"lineNumber":178,"author":{"gitId":"tashawan23"},"content":"        model.updateFilteredTaskList(new TitleContainsKeywordPredicate(Arrays.asList(task.getTitle().taskTitle)));","lastModifiedDate":"2021-03-18"},{"lineNumber":179,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":180,"author":{"gitId":"tashawan23"},"content":"        assertEquals(1, model.getFilteredTaskList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":181,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":182,"author":{"gitId":"cheeerynne"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":183,"author":{"gitId":"cheeerynne"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code name} in the","lastModifiedDate":"2021-03-15"},{"lineNumber":184,"author":{"gitId":"cheeerynne"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"cheeerynne"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"cheeerynne"},"content":"    public static void showPersonAtName(Model model, Name name) {","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"cheeerynne"},"content":"        Person person \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":188,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":189,"author":{"gitId":"cheeerynne"},"content":"        for (Person currentPerson : model.getFilteredPersonList()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d currentPerson.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":191,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":192,"author":{"gitId":"cheeerynne"},"content":"            if (currentName.equals(name)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":193,"author":{"gitId":"cheeerynne"},"content":"                person \u003d currentPerson;","lastModifiedDate":"2021-03-15"},{"lineNumber":194,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-15"},{"lineNumber":195,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":196,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":197,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":198,"author":{"gitId":"cheeerynne"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2021-03-15"},{"lineNumber":199,"author":{"gitId":"cheeerynne"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":201,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2021-03-15"},{"lineNumber":202,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tashawan23":40,"rachelljt":12,"cheeerynne":32,"zatkiller":12,"-":107}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMemberCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"public class DeleteMemberCommandIntegrationTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    private Model model;","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    public void execute_deletePerson_success() {","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        Person validPerson \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        expectedModel.deletePerson(validPerson);","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new DeleteMemberCommand(validPerson.getName()), model,","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                String.format(DeleteMemberCommand.MESSAGE_DELETE_PERSON_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public void execute_deletePerson_throwsNameNotValid() {","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        Name name \u003d new PersonBuilder().withName(\"Not a name\").build().getName();","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new DeleteMemberCommand(name), model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"zatkiller":44}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMemberCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtName;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"public class DeleteMemberCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"    public void execute_validNameUnfilteredList_success() throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        Person personToDelete \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteCommand \u003d new DeleteMemberCommand(parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"        for (Person person : model.getFilteredPersonList()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d person.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"            if (currentName.equals(parsedNameAlice)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"                personToDelete \u003d person;","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(DeleteMemberCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"    public void execute_invalidNameUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"        Name invalidName \u003d new Name(\"John\");","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteCommand \u003d new DeleteMemberCommand(invalidName);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"    public void execute_validNameFilteredList_success() throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"        showPersonAtName(model, parsedNameAlice);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"        Person personToDelete \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"cheeerynne"},"content":"        for (Person person : model.getFilteredPersonList()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d person.getName();","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"            if (currentName.equals(parsedNameAlice)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"                personToDelete \u003d person;","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteCommand \u003d new DeleteMemberCommand(parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(DeleteMemberCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"cheeerynne"},"content":"    public void execute_invalidNameFilteredList_throwsCommandException() throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"cheeerynne"},"content":"        showPersonAtName(model, parsedNameAlice);","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"cheeerynne"},"content":"        Name invalidName \u003d TypicalPersons.BENSON.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteCommand \u003d new DeleteMemberCommand(invalidName);","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"cheeerynne"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":96,"author":{"gitId":"cheeerynne"},"content":"    public void equals() throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameBenson \u003d TypicalPersons.BENSON.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteFirstCommand \u003d new DeleteMemberCommand(parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteSecondCommand \u003d new DeleteMemberCommand(parsedNameBenson);","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand deleteFirstCommandCopy \u003d new DeleteMemberCommand(parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"cheeerynne":50,"-":78}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTaskCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"public class DeleteTaskCommandIntegrationTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    private Model model;","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    public void execute_deleteTask_success() {","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        Task validTask \u003d model.getAddressBook().getTaskList().get(0);","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        expectedModel.deleteTask(validTask);","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new DeleteTaskCommand(index), model,","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, validTask), expectedModel);","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public void execute_deleteTask_throwsIndexNotValid() {","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        Index index \u003d Index.fromOneBased(model.getAddressBook().getTaskList().size() + 1);","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new DeleteTaskCommand(index), model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"zatkiller":44}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":" * {@code DeleteTaskCommand}.","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"public class DeleteTaskCommandTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        expectedModel.deleteTask(taskToDelete);","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteCommand \u003d new DeleteTaskCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"rachelljt"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"        expectedModel.deleteTask(taskToDelete);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"        showNoTask(expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"rachelljt"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"rachelljt"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"rachelljt"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteCommand \u003d new DeleteTaskCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"rachelljt"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteFirstCommand \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteSecondCommand \u003d new DeleteTaskCommand(INDEX_SECOND_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"rachelljt"},"content":"        DeleteTaskCommand deleteFirstCommandCopy \u003d new DeleteTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"rachelljt"},"content":"    private void showNoTask(Model model) {","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"rachelljt"},"content":"        model.updateFilteredTaskList(p -\u003e false);","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"rachelljt"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"rachelljt":31,"-":77}},{"path":"src/test/java/seedu/address/logic/commands/DoneTaskCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"public class DoneTaskCommandIntegrationTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    private Model model;","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    public void execute_doneTask_success() {","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        Task validTask \u003d model.getAddressBook().getTaskList().get(0);","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        Task doneTask \u003d new TaskBuilder(validTask).withTaskStatus(TaskBuilder.COMPLETED_STATUS).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        model.setTask(validTask, doneTask);","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new DoneTaskCommand(INDEX_FIRST_TASK), model, DoneTaskCommand.MESSAGE_DONE_TASK_SUCCESS,","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"                expectedModel);","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    public void execute_done_throwsIndexNotValid() {","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        Index index \u003d Index.fromOneBased(model.getAddressBook().getTaskList().size() + 1);","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new DoneTaskCommand(index), model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"    public void execute_done_throwsTaskIsAlreadyCompleted() {","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        Index index \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new DoneTaskCommand(INDEX_THIRD_TASK), model,","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"                DoneTaskCommand.MESSAGE_TASK_ALREADY_MARKED_DONE);","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"zatkiller":53}},{"path":"src/test/java/seedu/address/logic/commands/DoneTaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":" * {@code DoneTaskCommand}.","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"public class DoneTaskCommandTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        Task taskToMarkDone \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        Task doneTask \u003d new TaskBuilder(taskToMarkDone).withTaskStatus(TaskBuilder.COMPLETED_STATUS).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneCommand \u003d new DoneTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d DoneTaskCommand.MESSAGE_DONE_TASK_SUCCESS;","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        expectedModel.setTask(taskToMarkDone, doneTask);","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneCommand \u003d new DoneTaskCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        Task taskToMarkDone \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        Task doneTask \u003d new TaskBuilder(taskToMarkDone).withTaskStatus(TaskBuilder.COMPLETED_STATUS).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneCommand \u003d new DoneTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d DoneTaskCommand.MESSAGE_DONE_TASK_SUCCESS;","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"        expectedModel.setTask(taskToMarkDone, doneTask);","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        showNoTask(expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"    public void task_already_markedCompleted() {","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneCommand \u003d new DoneTaskCommand(INDEX_THIRD_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(doneCommand, model, DoneTaskCommand.MESSAGE_TASK_ALREADY_MARKED_DONE);","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneCommand \u003d new DoneTaskCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"    public void equals() {","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneFirstCommand \u003d new DoneTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneSecondCommand \u003d new DoneTaskCommand(INDEX_SECOND_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        assertTrue(doneFirstCommand.equals(doneFirstCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"        DoneTaskCommand doneFirstCommandCopy \u003d new DoneTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"        assertTrue(doneFirstCommand.equals(doneFirstCommandCopy));","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"zatkiller"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"zatkiller"},"content":"        assertFalse(doneFirstCommand.equals(1));","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"zatkiller"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"zatkiller"},"content":"        assertFalse(doneFirstCommand.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"zatkiller"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"zatkiller"},"content":"        assertFalse(doneFirstCommand.equals(doneSecondCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"zatkiller"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"zatkiller"},"content":"    private void showNoTask(Model model) {","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":"        model.updateFilteredTaskList(p -\u003e false);","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"zatkiller"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"zatkiller":127}},{"path":"src/test/java/seedu/address/logic/commands/EditMemberCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtName;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"import java.util.List;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.EditMemberDescriptorBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"public class EditMemberCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(parsedNameAlice, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"cheeerynne"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"cheeerynne"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"        assertCommandSuccess(editMemberCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"cheeerynne"},"content":"        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"        Person lastPerson \u003d personList.get(personList.size() - 1);","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"        Name nameLastPerson \u003d lastPerson.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"cheeerynne"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(nameLastPerson, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"cheeerynne"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"cheeerynne"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"        assertCommandSuccess(editMemberCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"cheeerynne"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":78,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(parsedNameAlice,","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberCommand.EditMemberDescriptor());","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"cheeerynne"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"cheeerynne"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"cheeerynne"},"content":"        assertCommandSuccess(editMemberCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"cheeerynne"},"content":"    public void execute_filteredList_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"cheeerynne"},"content":"        showPersonAtName(model, parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"cheeerynne"},"content":"        Person personInFilteredList \u003d null;","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"cheeerynne"},"content":"        for (Person person : model.getFilteredPersonList()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d person.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"cheeerynne"},"content":"            if (currentName.equals(parsedNameAlice)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"cheeerynne"},"content":"                personInFilteredList \u003d person;","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"cheeerynne"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(parsedNameAlice,","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(EditMemberCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"cheeerynne"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"cheeerynne"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"cheeerynne"},"content":"        assertCommandSuccess(editMemberCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":120,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"cheeerynne"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"cheeerynne"},"content":"        Person firstPerson \u003d TypicalPersons.ALICE;","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"cheeerynne"},"content":"        Name secondPerson \u003d TypicalPersons.BENSON.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":124,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"cheeerynne"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(secondPerson, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"cheeerynne"},"content":"        assertCommandFailure(editMemberCommand, model, EditMemberCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-16"},{"lineNumber":129,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"cheeerynne"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":134,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameBenson \u003d TypicalPersons.BENSON.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":135,"author":{"gitId":"cheeerynne"},"content":"        showPersonAtName(model, parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":136,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":137,"author":{"gitId":"cheeerynne"},"content":"        Person personInList \u003d null;","lastModifiedDate":"2021-03-16"},{"lineNumber":138,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":139,"author":{"gitId":"cheeerynne"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-16"},{"lineNumber":140,"author":{"gitId":"cheeerynne"},"content":"        for (Person person : model.getAddressBook().getPersonList()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":141,"author":{"gitId":"cheeerynne"},"content":"            Name currentName \u003d person.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":142,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":143,"author":{"gitId":"cheeerynne"},"content":"            if (currentName.equals(parsedNameBenson)) {","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"cheeerynne"},"content":"                personInList \u003d person;","lastModifiedDate":"2021-03-16"},{"lineNumber":145,"author":{"gitId":"cheeerynne"},"content":"                break;","lastModifiedDate":"2021-03-16"},{"lineNumber":146,"author":{"gitId":"cheeerynne"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":147,"author":{"gitId":"cheeerynne"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":148,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":149,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(parsedNameAlice,","lastModifiedDate":"2021-03-16"},{"lineNumber":150,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberDescriptorBuilder(personInList).build());","lastModifiedDate":"2021-03-16"},{"lineNumber":151,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":152,"author":{"gitId":"cheeerynne"},"content":"        assertCommandFailure(editMemberCommand, model, EditMemberCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-16"},{"lineNumber":153,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":154,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":155,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":156,"author":{"gitId":"cheeerynne"},"content":"    public void execute_invalidPersonNameUnfilteredList_failure() {","lastModifiedDate":"2021-03-16"},{"lineNumber":157,"author":{"gitId":"cheeerynne"},"content":"        Name invalidName \u003d new Name(\"John\");","lastModifiedDate":"2021-03-16"},{"lineNumber":158,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":159,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":160,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(invalidName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":161,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":162,"author":{"gitId":"cheeerynne"},"content":"        assertCommandFailure(editMemberCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-16"},{"lineNumber":163,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":164,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":165,"author":{"gitId":"cheeerynne"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":166,"author":{"gitId":"cheeerynne"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-03-16"},{"lineNumber":167,"author":{"gitId":"cheeerynne"},"content":"     * but smaller than size of address book.","lastModifiedDate":"2021-03-17"},{"lineNumber":168,"author":{"gitId":"cheeerynne"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":169,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":170,"author":{"gitId":"cheeerynne"},"content":"    public void execute_invalidPersonNameFilteredList_failure() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":171,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":172,"author":{"gitId":"cheeerynne"},"content":"        Name invalidName \u003d TypicalPersons.BENSON.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":173,"author":{"gitId":"cheeerynne"},"content":"        showPersonAtName(model, parsedNameAlice);","lastModifiedDate":"2021-03-16"},{"lineNumber":174,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":175,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand editMemberCommand \u003d new EditMemberCommand(invalidName,","lastModifiedDate":"2021-03-16"},{"lineNumber":176,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-16"},{"lineNumber":177,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":178,"author":{"gitId":"cheeerynne"},"content":"        assertCommandFailure(editMemberCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_NAME);","lastModifiedDate":"2021-03-16"},{"lineNumber":179,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":180,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":181,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":182,"author":{"gitId":"cheeerynne"},"content":"    public void equals() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":183,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameAlice \u003d TypicalPersons.ALICE.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":184,"author":{"gitId":"cheeerynne"},"content":"        Name parsedNameBenson \u003d TypicalPersons.BENSON.getName();","lastModifiedDate":"2021-03-16"},{"lineNumber":185,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":186,"author":{"gitId":"cheeerynne"},"content":"        final EditMemberCommand standardCommand \u003d new EditMemberCommand(parsedNameAlice, DESC_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":187,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":188,"author":{"gitId":"cheeerynne"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":189,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor copyDescriptor \u003d new EditMemberCommand.EditMemberDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":190,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand commandWithSameValues \u003d new EditMemberCommand(parsedNameAlice, copyDescriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":191,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-16"},{"lineNumber":192,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":193,"author":{"gitId":"cheeerynne"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":194,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-16"},{"lineNumber":195,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":196,"author":{"gitId":"cheeerynne"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":197,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":198,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":199,"author":{"gitId":"cheeerynne"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":200,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-16"},{"lineNumber":201,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":202,"author":{"gitId":"cheeerynne"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":203,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(standardCommand.equals(new EditMemberCommand(parsedNameBenson, DESC_AMY)));","lastModifiedDate":"2021-03-16"},{"lineNumber":204,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":205,"author":{"gitId":"cheeerynne"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":206,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(standardCommand.equals(new EditMemberCommand(parsedNameAlice, DESC_BOB)));","lastModifiedDate":"2021-03-16"},{"lineNumber":207,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":208,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":209,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"cheeerynne":209}},{"path":"src/test/java/seedu/address/logic/commands/EditMemberDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.EditMemberDescriptorBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"public class EditMemberDescriptorTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"        EditMemberDescriptor descriptorWithSameValues \u003d new EditMemberDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"        EditMemberDescriptor editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"        editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"cheeerynne"},"content":"        editedAmy \u003d new EditMemberDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"cheeerynne":7,"-":42}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MARATHON;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MARATHON;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import java.util.List;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"public class EditTaskCommandTest {","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-18"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        Task editedTask \u003d new TaskBuilder().build();","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(INDEX_FIRST_TASK, descriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"        List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"        Index indexLastTask \u003d Index.fromOneBased(taskList.size());","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        Task lastTask \u003d taskList.get(indexLastTask.getZeroBased());","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"        Task editedTask \u003d taskInList.withTitle(VALID_TITLE_MARATHON)","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MARATHON).withDeadline(VALID_DEADLINE_MARATHON).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARATHON)","lastModifiedDate":"2021-03-18"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MARATHON).withDeadline(VALID_DEADLINE_MARATHON).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(indexLastTask, descriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"        expectedModel.setTask(lastTask, editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-18"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(INDEX_FIRST_TASK,","lastModifiedDate":"2021-03-18"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"                new EditTaskCommand.EditTaskDescriptor());","lastModifiedDate":"2021-03-18"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-18"},{"lineNumber":78,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-18"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":87,"author":{"gitId":"tashawan23"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-18"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"tashawan23"},"content":"        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withTitle(VALID_TITLE_MARATHON).build();","lastModifiedDate":"2021-03-18"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(INDEX_FIRST_TASK,","lastModifiedDate":"2021-03-18"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"                new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARATHON).build());","lastModifiedDate":"2021-03-18"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(EditTaskCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(editTaskCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"    public void execute_invalidTaskIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-18"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-18"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"        Index outOfBound \u003d INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-18"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"        assertTrue(outOfBound.getZeroBased() \u003c model.getAddressBook().getTaskList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(outOfBound,","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"                new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARATHON).build());","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":113,"author":{"gitId":"tashawan23"},"content":"        assertCommandFailure(editTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-18"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-03-18"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"     * but smaller than size of address book.","lastModifiedDate":"2021-03-18"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"    public void execute_invalidTaskNameFilteredList_failure() {","lastModifiedDate":"2021-03-18"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-18"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"        Index outOfBound \u003d INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-18"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":125,"author":{"gitId":"tashawan23"},"content":"        assertTrue(outOfBound.getZeroBased() \u003c model.getAddressBook().getTaskList().size());","lastModifiedDate":"2021-03-18"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand editTaskCommand \u003d new EditTaskCommand(outOfBound,","lastModifiedDate":"2021-03-18"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"                new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARATHON).build());","lastModifiedDate":"2021-03-18"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"        assertCommandFailure(editTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-18"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-18"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"    public void equals() throws ParseException {","lastModifiedDate":"2021-03-18"},{"lineNumber":135,"author":{"gitId":"tashawan23"},"content":"        final EditTaskCommand standardCommand \u003d new EditTaskCommand(INDEX_FIRST_TASK, DESC_TASK1);","lastModifiedDate":"2021-03-18"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-18"},{"lineNumber":137,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor copyDescriptor \u003d new EditTaskCommand.EditTaskDescriptor(DESC_TASK1);","lastModifiedDate":"2021-03-18"},{"lineNumber":138,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand commandWithSameValues \u003d new EditTaskCommand(INDEX_FIRST_TASK, copyDescriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":139,"author":{"gitId":"tashawan23"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-18"},{"lineNumber":140,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":141,"author":{"gitId":"tashawan23"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-18"},{"lineNumber":142,"author":{"gitId":"tashawan23"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-18"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-18"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-18"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-18"},{"lineNumber":148,"author":{"gitId":"tashawan23"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-18"},{"lineNumber":149,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":150,"author":{"gitId":"tashawan23"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-03-18"},{"lineNumber":151,"author":{"gitId":"tashawan23"},"content":"        assertFalse(standardCommand.equals(new EditTaskCommand(INDEX_SECOND_TASK, DESC_TASK1)));","lastModifiedDate":"2021-03-18"},{"lineNumber":152,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":153,"author":{"gitId":"tashawan23"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-03-18"},{"lineNumber":154,"author":{"gitId":"tashawan23"},"content":"        assertFalse(standardCommand.equals(new EditTaskCommand(INDEX_FIRST_TASK, DESC_TASK2)));","lastModifiedDate":"2021-03-18"},{"lineNumber":155,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":156,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":157,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"tashawan23":157}},{"path":"src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK1;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MEETING;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MEETING;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MEETING;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"public class EditTaskDescriptorTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    public void equals() {","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"                .EditTaskDescriptor(DESC_TASK1);","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"        assertTrue(DESC_TASK1.equals(descriptorWithSameValues));","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        assertTrue(DESC_TASK1.equals(DESC_TASK1));","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK1.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK1.equals(TITLE_DESC_TASK1));","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK1.equals(DESC_TASK2));","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"        // different title -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor editedTask \u003d new EditTaskDescriptorBuilder(DESC_TASK1)","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"                .withTitle(VALID_TITLE_MEETING).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK1.equals(editedTask));","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        // different description -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        editedTask \u003d new EditTaskDescriptorBuilder(DESC_TASK1).withDescription(VALID_DESCRIPTION_MEETING).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK1.equals(editedTask));","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        // different deadline -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        editedTask \u003d new EditTaskDescriptorBuilder(DESC_TASK1).withDeadline(VALID_DEADLINE_MEETING).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK1.equals(editedTask));","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"        // different priority -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"        editedTask \u003d new EditTaskDescriptorBuilder(DESC_TASK2).withPriority(\"low\").build();","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"        assertFalse(DESC_TASK2.equals(editedTask));","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"tashawan23":55}},{"path":"src/test/java/seedu/address/logic/commands/FindByPriorityCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.PriorityContainsKeywordPredicate;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"public class FindByPriorityCommandIntegrationTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    public void checkSuccessFinding() {","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        ArrayList\u003cString\u003e newList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        newList.add(\"high\");","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate predicate \u003d new PriorityContainsKeywordPredicate(newList);","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW,","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"                expectedModel.getFilteredTaskList().size());","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new FindByPriorityCommand(predicate), model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"zatkiller":37}},{"path":"src/test/java/seedu/address/logic/commands/FindByPriorityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.PriorityContainsKeywordPredicate;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":" * Contains integration tests (interaction with the Model) for {@code FindByPriorityCommand}.","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"public class FindByPriorityCommandTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    public void equals() {","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand findFirstCommand \u003d new FindByPriorityCommand(firstPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand findSecondCommand \u003d new FindByPriorityCommand(secondPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand findFirstCommandCopy \u003d new FindByPriorityCommand(firstPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    public void execute_zeroKeywords_noTaskFound() {","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand command \u003d new FindByPriorityCommand(predicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"    public void execute_singleKeywords_taskFound() {","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate highPredicate \u003d preparePredicate(\"high\");","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand highCommand \u003d new FindByPriorityCommand(highPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"        expectedModel.updateFilteredTaskList(highPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(highCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate mediumPredicate \u003d preparePredicate(\"medium\");","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand medCommand \u003d new FindByPriorityCommand(mediumPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        expectedModel.updateFilteredTaskList(mediumPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(medCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate lowPredicate \u003d preparePredicate(\"low\");","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand command \u003d new FindByPriorityCommand(lowPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        expectedModel.updateFilteredTaskList(lowPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate unassignedPredicate \u003d preparePredicate(\"unassigned\");","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand unassCommand \u003d new FindByPriorityCommand(unassignedPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"        expectedModel.updateFilteredTaskList(unassignedPredicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(unassCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"     * Parses {@code userInput} into a {@code DetailsContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"    private PriorityContainsKeywordPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        return new PriorityContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"zatkiller":105}},{"path":"src/test/java/seedu/address/logic/commands/FindMembersCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.DetailsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":" * Contains integration tests (interaction with the Model) for {@code FindMembersCommand}.","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"public class FindMembersCommandTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"                new DetailsContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"                new DetailsContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand findFirstCommand \u003d new FindMembersCommand(firstPredicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand findSecondCommand \u003d new FindMembersCommand(secondPredicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand findFirstCommandCopy \u003d new FindMembersCommand(firstPredicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand command \u003d new FindMembersCommand(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 6);","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"                preparePredicate(\"Kurz Elle Kunz 98765432 secretary anna@example.com\");","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand command \u003d new FindMembersCommand(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(Arrays.asList(BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"cheeerynne"},"content":"     * Parses {@code userInput} into a {@code DetailsContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"cheeerynne"},"content":"    private DetailsContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"cheeerynne"},"content":"        return new DetailsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"cheeerynne":23,"-":64}},{"path":"src/test/java/seedu/address/logic/commands/FindTasksBeforeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalTasks.HOMEWORK;","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalTasks.MARATHON;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalTasks.RETURNBOOK;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.DeadlineBeforeDatePredicate;","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"public class FindTasksBeforeCommandTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"    public void equals() {","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        DeadlineBeforeDatePredicate firstPredicate \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"                new DeadlineBeforeDatePredicate(\"2021-04-13\");","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"        DeadlineBeforeDatePredicate secondPredicate \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"                new DeadlineBeforeDatePredicate(\"2021-05-06\");","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand findFirstCommand \u003d new FindTasksBeforeCommand(firstPredicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand findSecondCommand \u003d new FindTasksBeforeCommand(secondPredicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand findFirstCommandCopy \u003d new FindTasksBeforeCommand(firstPredicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"        // different deadline -\u003e returns false","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"    public void execute_deadline_noTaskFound() {","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"        DeadlineBeforeDatePredicate predicate \u003d new DeadlineBeforeDatePredicate(\"2021-02-03\");","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand command \u003d new FindTasksBeforeCommand(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"    public void execute_deadline_multipleTasksFound() {","lastModifiedDate":"2021-03-25"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"        DeadlineBeforeDatePredicate predicate \u003d new DeadlineBeforeDatePredicate(\"2021-06-05\");","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand command \u003d new FindTasksBeforeCommand(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"        assertEquals(Arrays.asList(HOMEWORK, RETURNBOOK, MARATHON), model.getFilteredTaskList());","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"    public void execute_deadline_taskFound() {","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"tashawan23"},"content":"        DeadlineBeforeDatePredicate predicate \u003d new DeadlineBeforeDatePredicate(\"2021-02-05\");","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand command \u003d new FindTasksBeforeCommand(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-25"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"        assertEquals(Arrays.asList(HOMEWORK), model.getFilteredTaskList());","lastModifiedDate":"2021-03-25"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"tashawan23":85}},{"path":"src/test/java/seedu/address/logic/commands/FindTasksCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalTasks.HOMEWORK;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.testutil.TypicalTasks.RETURNBOOK;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.TypicalTasks;","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTasksCommand}.","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"public class FindTasksCommandTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"    private Model model \u003d new ModelManager(TypicalTasks.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"    private Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"    public void equals() {","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"                new TaskContainsKeywordPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"                new TaskContainsKeywordPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"        FindTasksCommand findFirstCommand \u003d new FindTasksCommand(firstPredicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"        FindTasksCommand findSecondCommand \u003d new FindTasksCommand(secondPredicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"        FindTasksCommand findFirstCommandCopy \u003d new FindTasksCommand(firstPredicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"cheeerynne"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"cheeerynne"},"content":"    public void execute_zeroKeywords_noTaskFound() {","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"        FindTasksCommand command \u003d new FindTasksCommand(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredTaskList());","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"cheeerynne"},"content":"    public void execute_multipleKeywords_multipleTasksFound() {","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate predicate \u003d preparePredicate(\"Homework national Library\");","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"cheeerynne"},"content":"        FindTasksCommand command \u003d new FindTasksCommand(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"cheeerynne"},"content":"        expectedModel.updateFilteredTaskList(predicate);","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"cheeerynne"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(Arrays.asList(HOMEWORK, RETURNBOOK), model.getFilteredTaskList());","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"cheeerynne"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"cheeerynne"},"content":"     * Parses {@code userInput} into a {@code TaskContainsKeywordPredicate}.","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"cheeerynne"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"cheeerynne"},"content":"    private TaskContainsKeywordPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"cheeerynne"},"content":"        return new TaskContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":82}},{"path":"src/test/java/seedu/address/logic/commands/UndoTaskCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-26"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-26"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-26"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-26"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"public class UndoTaskCommandIntegrationTest {","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    private Model model;","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    public void execute_undoTask_success() {","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        Task validTask \u003d model.getAddressBook().getTaskList().get(0);","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        Task undoTask \u003d new TaskBuilder(validTask).withTaskStatus(TaskBuilder.COMPLETED_STATUS).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        model.setTask(validTask, undoTask);","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new UndoTaskCommand(INDEX_THIRD_TASK), model,","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"                UndoTaskCommand.MESSAGE_UNDO_TASK_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"    public void execute_undo_throwsIndexNotValid() {","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        Index index \u003d Index.fromOneBased(model.getAddressBook().getTaskList().size() + 1);","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new UndoTaskCommand(index), model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    public void execute_undo_throwsTaskIsAlreadyCompleted() {","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(new UndoTaskCommand(index), model,","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"                UndoTaskCommand.MESSAGE_TASK_ALREADY_MARKED_UNCOMPLETED);","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-26"}],"authorContributionMap":{"zatkiller":52}},{"path":"src/test/java/seedu/address/logic/commands/UndoTaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"/**","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":" * {@code DoneTaskCommand}.","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":" */","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"public class UndoTaskCommandTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        Task taskToMarkUncompleted \u003d model.getFilteredTaskList().get(INDEX_THIRD_TASK.getZeroBased());","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        Task undoTask \u003d new TaskBuilder(taskToMarkUncompleted).withTaskStatus(TaskBuilder.DEFAULT_STATUS).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoTaskCommand \u003d new UndoTaskCommand(INDEX_THIRD_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d UndoTaskCommand.MESSAGE_UNDO_TASK_SUCCESS;","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        expectedModel.setTask(taskToMarkUncompleted, undoTask);","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(undoTaskCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoTaskCommand \u003d new UndoTaskCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(undoTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        showTaskAtIndex(model, INDEX_THIRD_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        Task taskToMarkUncompleted \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        Task doneTask \u003d new TaskBuilder(taskToMarkUncompleted).withTaskStatus(TaskBuilder.COMPLETED_STATUS).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoCommand \u003d new UndoTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d UndoTaskCommand.MESSAGE_UNDO_TASK_SUCCESS;","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        expectedModel.setTask(taskToMarkUncompleted, doneTask);","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"        showNoTask(expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"    public void task_already_markedUncompleted() {","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoTaskCommand \u003d new UndoTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(undoTaskCommand, model, UndoTaskCommand.MESSAGE_TASK_ALREADY_MARKED_UNCOMPLETED);","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoTaskCommand \u003d new UndoTaskCommand(outOfBoundIndex);","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"        assertCommandFailure(undoTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"    public void equals() {","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoFirstCommand \u003d new UndoTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoSecondCommand \u003d new UndoTaskCommand(INDEX_SECOND_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"        assertTrue(undoFirstCommand.equals(undoFirstCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        UndoTaskCommand undoFirstCommandCopy \u003d new UndoTaskCommand(INDEX_FIRST_TASK);","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"        assertTrue(undoFirstCommand.equals(undoFirstCommandCopy));","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"        assertFalse(undoFirstCommand.equals(1));","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"zatkiller"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"zatkiller"},"content":"        assertFalse(undoFirstCommand.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"zatkiller"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"zatkiller"},"content":"        assertFalse(undoFirstCommand.equals(undoSecondCommand));","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"zatkiller"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"zatkiller"},"content":"    private void showNoTask(Model model) {","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"zatkiller"},"content":"        model.updateFilteredTaskList(p -\u003e false);","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"zatkiller"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"zatkiller":124}},{"path":"src/test/java/seedu/address/logic/commands/ViewMembersCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewMembersCommand.","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"public class ViewMembersCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new ViewMembersCommand(), model, ViewMembersCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        assertCommandSuccess(new ViewMembersCommand(), model, ViewMembersCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"rachelljt":1,"zatkiller":3,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/ViewTasksCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import seedu.address.testutil.TypicalTasks;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewTasksCommand.","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"public class ViewTasksCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"    private Model model;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"        model \u003d new ModelManager(TypicalTasks.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        assertCommandSuccess(new ViewTasksCommand(), model, ViewTasksCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"rachelljt":30}},{"path":"src/test/java/seedu/address/logic/commands/ViewUncompletedTasksCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import seedu.address.testutil.TypicalTasks;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ViewUncompletedTasksCommand.","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"public class ViewUncompletedTasksCommandTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    private Model model;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"        model \u003d new ModelManager(TypicalTasks.getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        assertCommandSuccess(new ViewUncompletedTasksCommand(), model,","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"                ViewUncompletedTasksCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"rachelljt":32}},{"path":"src/test/java/seedu/address/logic/parser/AddMemberCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.AddMemberCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"public class AddMemberCommandParserTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    private AddMemberCommandParser parser \u003d new AddMemberCommandParser();","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"                        + ROLE_DESC_BOB, new AddMemberCommand(expectedPerson));","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"                + ROLE_DESC_BOB, new AddMemberCommand(expectedPerson));","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"                        + ROLE_DESC_BOB, new AddMemberCommand(expectedPerson));","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB, expectedMessage);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB, expectedMessage);","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB, expectedMessage);","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB , Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC , Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"tashawan23":7,"zatkiller":14,"-":59}},{"path":"src/test/java/seedu/address/logic/parser/AddTaskCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_TASK1;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_TASK1;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK1;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalTasks.MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.AddTaskCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"public class AddTaskCommandParserTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    private AddTaskCommandParser parser \u003d new AddTaskCommandParser();","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        Task expectedTask \u003d new TaskBuilder(MARATHON).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_TITLE_MARATHON + DESCRIPTION_TASK1","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"                + DEADLINE_TASK1, new AddTaskCommand(expectedTask));","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"        // missing description prefix","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, TITLE_DESC_TASK1 + VALID_DESCRIPTION_MARATHON + DEADLINE_TASK1,","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        // missing deadline prefix","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, TITLE_DESC_TASK1 + DESCRIPTION_TASK1 + VALID_DEADLINE_MARATHON,","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        // all prefixes missing","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, VALID_TITLE_MARATHON + VALID_DESCRIPTION_MARATHON + VALID_DEADLINE_MARATHON,","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"        // invalid deadline","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, VALID_TITLE_MARATHON + VALID_DESCRIPTION_MARATHON + INVALID_DEADLINE_DESC,","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"tashawan23":58}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.AddMemberCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.DeleteMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.FindMembersCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.ViewMembersCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.DetailsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.EditMemberDescriptorBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        AddMemberCommand command \u003d (AddMemberCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        assertEquals(new AddMemberCommand(person), command);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"cheeerynne"},"content":"        DeleteMemberCommand command \u003d (DeleteMemberCommand) parser.parseCommand(","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"cheeerynne"},"content":"                DeleteMemberCommand.COMMAND_WORD + \" \" + VALID_NAME_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(new DeleteMemberCommand(ParserUtil.parseName(VALID_NAME_AMY)), command);","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder(person).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand command \u003d (EditMemberCommand) parser.parseCommand(EditMemberCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"                + VALID_NAME_AMY + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(new EditMemberCommand(ParserUtil.parseName(VALID_NAME_AMY), descriptor), command);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand command \u003d (FindMembersCommand) parser.parseCommand(","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"                FindMembersCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"        assertEquals(new FindMembersCommand(new DetailsContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        assertTrue(parser.parseCommand(ViewMembersCommand.COMMAND_WORD) instanceof ViewMembersCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"        assertTrue(parser.parseCommand(ViewMembersCommand.COMMAND_WORD + \" 3\") instanceof ViewMembersCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"cheeerynne":16,"zatkiller":6,"-":78}},{"path":"src/test/java/seedu/address/logic/parser/DeleteMemberCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.DeleteMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"public class DeleteMemberCommandParserTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"    private DeleteMemberCommandParser parser \u003d new DeleteMemberCommandParser();","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"    public void parse_validArgs_returnsDeleteCommand() throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        assertParseSuccess(parser, \"Amy Bee\",","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"                new DeleteMemberCommand(ParserUtil.parseName(VALID_NAME_AMY)));","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"                DeleteMemberCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"cheeerynne":10,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/DoneTaskParserCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.DoneTaskCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"public class DoneTaskParserCommandTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    private DoneTaskCommandParser parser \u003d new DoneTaskCommandParser();","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    public void parse_validArgs_returnsDoneTaskCommand() throws ParseException {","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"        assertParseSuccess(parser, \"1\", new DoneTaskCommand(ParserUtil.parseIndex(\"1\")));","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"                DoneTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"                DoneTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"1, 2 \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"                DoneTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"zatkiller":33}},{"path":"src/test/java/seedu/address/logic/parser/EditMemberCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_NAME_DESC;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NEW_NAME_DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.EditMemberDescriptorBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"public class EditMemberCommandParserTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMemberCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"    private EditMemberCommandParser parser \u003d new EditMemberCommandParser();","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"        // no name specified","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"-p 93451122\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, EditMemberCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"        // no name and no field specified","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"N@ME\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"-h\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NEW_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"cheeerynne"},"content":"    public void parse_allFieldsSpecified_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"cheeerynne"},"content":"        Name targetName \u003d ParserUtil.parseName(VALID_NAME_BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"cheeerynne"},"content":"        String userInput \u003d VALID_NAME_BOB + NEW_NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"cheeerynne"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"cheeerynne"},"content":"    public void parse_someFieldsSpecified_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"cheeerynne"},"content":"        Name targetName \u003d ParserUtil.parseName(VALID_NAME_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"cheeerynne"},"content":"        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"cheeerynne"},"content":"        EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"cheeerynne"},"content":"    public void parse_oneFieldSpecified_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"cheeerynne"},"content":"        Name targetName \u003d ParserUtil.parseName(VALID_NAME_BOB);","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"cheeerynne"},"content":"        String userInput \u003d VALID_NAME_BOB + NEW_NAME_DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"cheeerynne"},"content":"        userInput \u003d VALID_NAME_BOB + PHONE_DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"cheeerynne"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"cheeerynne"},"content":"        expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"cheeerynne"},"content":"        userInput \u003d VALID_NAME_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"cheeerynne"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":120,"author":{"gitId":"cheeerynne"},"content":"        expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"cheeerynne"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"cheeerynne"},"content":"        Name targetName \u003d ParserUtil.parseName(VALID_NAME_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"cheeerynne"},"content":"        String userInput \u003d VALID_NAME_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"zatkiller"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d new EditMemberDescriptorBuilder()","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"cheeerynne"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"cheeerynne"},"content":"    public void parse_invalidValueFollowedByValidValue_success() throws ParseException {","lastModifiedDate":"2021-03-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"cheeerynne"},"content":"        Name targetName \u003d ParserUtil.parseName(VALID_NAME_AMY);","lastModifiedDate":"2021-03-16"},{"lineNumber":141,"author":{"gitId":"cheeerynne"},"content":"        String userInput \u003d VALID_NAME_AMY + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":142,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand.EditMemberDescriptor descriptor \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":143,"author":{"gitId":"cheeerynne"},"content":"                new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"cheeerynne"},"content":"        EditMemberCommand expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"cheeerynne"},"content":"        userInput \u003d VALID_NAME_AMY + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-03-16"},{"lineNumber":149,"author":{"gitId":"cheeerynne"},"content":"        descriptor \u003d new EditMemberDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-16"},{"lineNumber":150,"author":{"gitId":"zatkiller"},"content":"                .build();","lastModifiedDate":"2021-03-14"},{"lineNumber":151,"author":{"gitId":"cheeerynne"},"content":"        expectedCommand \u003d new EditMemberCommand(targetName, descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"cheeerynne":55,"zatkiller":3,"-":96}},{"path":"src/test/java/seedu/address/logic/parser/EditTaskCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_TASK1;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_TASK1;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEADLINE_DESC;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_TASK1;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK1;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MARATHON;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MARATHON;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MARATHON;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MARATHON;","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MEETING;","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.EditTaskCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.EditTaskDescriptorBuilder;","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"public class EditTaskCommandParserTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"    private EditTaskCommandParser parser \u003d new EditTaskCommandParser();","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"        // no index specified","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"-d This is my new description\",","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"tashawan23"},"content":"        // no field specified","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"1\", EditTaskCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"        // no index and no field specified","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"N\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"-h\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        // invalid deadline","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"        //invalid priority","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_TASK1 + DESCRIPTION_TASK1 + DEADLINE_TASK1","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"tashawan23"},"content":"                + PRIORITY_TASK1;","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MARATHON)","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MARATHON).withDeadline(VALID_DEADLINE_MARATHON)","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"tashawan23"},"content":"                .withPriority(VALID_PRIORITY_MARATHON).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"tashawan23"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"tashawan23"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"tashawan23"},"content":"        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_TASK2 + DESCRIPTION_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MEETING)","lastModifiedDate":"2021-03-23"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MEETING).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"tashawan23"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"tashawan23"},"content":"        // title","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"tashawan23"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"tashawan23"},"content":"        String userInput \u003d targetIndex.getOneBased() + TITLE_DESC_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"tashawan23"},"content":"                new EditTaskDescriptorBuilder().withTitle(VALID_TITLE_MEETING).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"        // description","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"tashawan23"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_MEETING).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"tashawan23"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"tashawan23"},"content":"        // deadline","lastModifiedDate":"2021-03-23"},{"lineNumber":115,"author":{"gitId":"tashawan23"},"content":"        userInput \u003d targetIndex.getOneBased() + DEADLINE_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":116,"author":{"gitId":"tashawan23"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withDeadline(VALID_DEADLINE_MEETING).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"tashawan23"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":120,"author":{"gitId":"tashawan23"},"content":"        // priority","lastModifiedDate":"2021-03-23"},{"lineNumber":121,"author":{"gitId":"tashawan23"},"content":"        userInput \u003d targetIndex.getOneBased() + PRIORITY_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":122,"author":{"gitId":"tashawan23"},"content":"        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_MEETING).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"tashawan23"},"content":"        expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":124,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":125,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":126,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":128,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":129,"author":{"gitId":"tashawan23"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"tashawan23"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-23"},{"lineNumber":131,"author":{"gitId":"tashawan23"},"content":"        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_TASK1 + DEADLINE_TASK1","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"tashawan23"},"content":"                + DESCRIPTION_TASK1 + DEADLINE_TASK1 + DESCRIPTION_TASK2 + DEADLINE_TASK2;","lastModifiedDate":"2021-03-23"},{"lineNumber":133,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()","lastModifiedDate":"2021-03-23"},{"lineNumber":135,"author":{"gitId":"tashawan23"},"content":"                .withDescription(VALID_DESCRIPTION_MEETING).withDeadline(VALID_DEADLINE_MEETING).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":138,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":139,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":140,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"tashawan23"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-03-23"},{"lineNumber":142,"author":{"gitId":"tashawan23"},"content":"        // no other valid values specified","lastModifiedDate":"2021-03-23"},{"lineNumber":143,"author":{"gitId":"tashawan23"},"content":"        Index targetIndex \u003d INDEX_FIRST_TASK;","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"tashawan23"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_DEADLINE_DESC + DEADLINE_TASK1;","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"tashawan23"},"content":"                .withDeadline(VALID_DEADLINE_MARATHON).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"tashawan23"},"content":"        EditTaskCommand expectedCommand \u003d new EditTaskCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-23"},{"lineNumber":148,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":149,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":150,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":151,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"tashawan23":151}},{"path":"src/test/java/seedu/address/logic/parser/FindByPriorityParserCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.FindByPriorityCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.PriorityContainsKeywordPredicate;","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"public class FindByPriorityParserCommandTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    private FindByPriorityCommandParser parser \u003d new FindByPriorityCommandParser();","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"                FindByPriorityCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    public void parse_validArgs_returnsFindTasksCommand() {","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        FindByPriorityCommand expectedTasksByPriorityCommand \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"                new FindByPriorityCommand(new PriorityContainsKeywordPredicate(Arrays.asList(\"high\")));","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        assertParseSuccess(parser, \"high\", expectedTasksByPriorityCommand);","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        expectedTasksByPriorityCommand \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"                new FindByPriorityCommand(new PriorityContainsKeywordPredicate(Arrays.asList(\"low\")));","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        assertParseSuccess(parser, \"low\", expectedTasksByPriorityCommand);","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        expectedTasksByPriorityCommand \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"                new FindByPriorityCommand(new PriorityContainsKeywordPredicate(Arrays.asList(\"medium\")));","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        assertParseSuccess(parser, \"medium\", expectedTasksByPriorityCommand);","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        expectedTasksByPriorityCommand \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"                new FindByPriorityCommand(new PriorityContainsKeywordPredicate(Arrays.asList(\"unassigned\")));","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"        assertParseSuccess(parser, \"unassigned\", expectedTasksByPriorityCommand);","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"    public void parse_invalidArgs_returnsFindTasksCommand() {","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"low high\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"                FindByPriorityCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"extreme\", String.format(Priority.MESSAGE_CANNOT_FIND_PRIORITY,","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"                FindByPriorityCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"zatkiller":57}},{"path":"src/test/java/seedu/address/logic/parser/FindMembersCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.FindMembersCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.person.DetailsContainsKeywordsPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"public class FindMembersCommandParserTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"    private FindMemberCommandParser parser \u003d new FindMemberCommandParser();","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMembersCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"        FindMembersCommand expectedFindMembersCommand \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"                new FindMembersCommand(new DetailsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindMembersCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindMembersCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"cheeerynne":10,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/FindTasksBeforeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import seedu.address.logic.commands.FindTasksBeforeCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.DeadlineBeforeDatePredicate;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"public class FindTasksBeforeCommandParserTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    private FindTasksBeforeCommandParser parser \u003d new FindTasksBeforeCommandParser();","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"                FindTasksBeforeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    public void parse_validArgs_returnsFindTasksBeforeCommand() {","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"        FindTasksBeforeCommand expectedFindTasksBeforeCommand \u003d","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"                new FindTasksBeforeCommand(new DeadlineBeforeDatePredicate(\"2021-05-06\"));","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, \"2021-05-06\", expectedFindTasksBeforeCommand);","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        // multiple whitespaces","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        assertParseSuccess(parser, \" 2021-05-06  \", expectedFindTasksBeforeCommand);","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"tashawan23":31}},{"path":"src/test/java/seedu/address/logic/parser/FindTasksCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.FindTasksCommand;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.model.task.TaskContainsKeywordPredicate;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"public class FindTasksCommandParserTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"    private FindTasksCommandParser parser \u003d new FindTasksCommandParser();","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"                FindTasksCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"    public void parse_validArgs_returnsFindTasksCommand() {","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        FindTasksCommand expectedFindTasksCommand \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"                new FindTasksCommand(new TaskContainsKeywordPredicate(Arrays.asList(\"book\", \"CS2103tp\")));","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"        assertParseSuccess(parser, \"book CS2103tp\", expectedFindTasksCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        assertParseSuccess(parser, \" \\n book \\n \\t CS2103tp  \\t\", expectedFindTasksCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":33}},{"path":"src/test/java/seedu/address/logic/parser/UndoTaskParserCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-25"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-25"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-25"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.UndoTaskCommand;","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"public class UndoTaskParserCommandTest {","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    private UndoTaskCommandParser parser \u003d new UndoTaskCommandParser();","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    public void parse_validArgs_returnsUndoTaskCommand() throws ParseException {","lastModifiedDate":"2021-03-25"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"        assertParseSuccess(parser, \"1\", new UndoTaskCommand(ParserUtil.parseIndex(\"1\")));","lastModifiedDate":"2021-03-25"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-25"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"                UndoTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"                UndoTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        assertParseFailure(parser, \"1, 2 \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-25"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"                UndoTaskCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-25"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-25"}],"authorContributionMap":{"zatkiller":33}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"        Task dummyTask \u003d new TaskBuilder(new Task(new Title(\"Task1\"), new Description(\"Some Description\"),","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"                new Deadline(\"2021-04-04\"))).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        List\u003cTask\u003e tasks \u003d Arrays.asList(dummyTask);","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, tasks);","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"tashawan23"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cTask\u003e tasks) {","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"tashawan23"},"content":"            this.tasks.setAll(tasks);","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"tashawan23"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"tashawan23"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"tashawan23"},"content":"            return tasks;","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"tashawan23"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"tashawan23":16,"zatkiller":2,"-":94}},{"path":"src/test/java/seedu/address/model/person/DetailsContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import java.util.List;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"public class DetailsContainsKeywordsPredicateTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"    public void equals() {","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"                new DetailsContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"                new DetailsContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"                new DetailsContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"    public void test_detailsContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"cheeerynne"},"content":"        // One keyword","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"                new DetailsContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"cheeerynne"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"98765432\", \"president\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"98765432\")","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"                .withRole(\"president\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"cheeerynne"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"tim@example.com\", \"Carol\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"mEmbER\", \"aLiCE@test.com\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withRole(\"member\")","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"                .withEmail(\"alice@test.com\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"cheeerynne"},"content":"    public void test_detailsDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"cheeerynne"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"        DetailsContainsKeywordsPredicate predicate \u003d new DetailsContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"cheeerynne"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new DetailsContainsKeywordsPredicate(Arrays.asList(\"98765432\", \"John\",","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"cheeerynne"},"content":"                \"tim@test.com\", \"secretary\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").withPhone(\"95632154\")","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"cheeerynne"},"content":"                .withEmail(\"alice@test.com\").withRole(\"member\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":77}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"                .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"zatkiller":1,"-":74}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"zatkiller":1,"-":73}},{"path":"src/test/java/seedu/address/model/person/RoleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"public class RoleTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Role(null));","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"        String invalidRole \u003d \"\";","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    public void isValidRole() {","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"        // null name","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"        // invalid name","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Role.isValidRole(\"\")); // empty string","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Role.isValidRole(\" \")); // spaces only","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Role.isValidRole(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Role.isValidRole(\"President*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"        // valid name","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        assertTrue(Role.isValidRole(\"President\")); // alphabets only","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        assertTrue(Role.isValidRole(\"2nd Assistant planner\")); // alphanumeric characters","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"        assertTrue(Role.isValidRole(\"Vice President\")); // with capital letters","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"        assertTrue(Role.isValidRole(\"Assistant event planner for House day\")); // long roles","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"tashawan23":39}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"zatkiller":2,"-":164}},{"path":"src/test/java/seedu/address/model/task/DeadlineTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"tashawan23"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"tashawan23"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Deadline(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"tashawan23"},"content":"    public void constructor_invalidDeadline_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"tashawan23"},"content":"        String invalidDeadline \u003d \"2021-13-04\";","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e new Deadline(invalidDeadline));","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"    public void isValidDeadline() {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"tashawan23"},"content":"        // null deadline","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"        assertThrows(NullPointerException.class, () -\u003e Deadline.isValidDeadline(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"        // invalid deadline","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Deadline.isValidDeadline(\"\")); // empty string","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Deadline.isValidDeadline(\" \")); // spaces only","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"        assertFalse(Deadline.isValidDeadline(\"2021-13-04\")); // invalid date","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        // valid deadline","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        assertTrue(Deadline.isValidDeadline(\"2021-03-04\")); // valid date format","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"tashawan23":37}},{"path":"src/test/java/seedu/address/model/task/DescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"public class DescriptionTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Description(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"        String invalidDescription \u003d \"\";","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    public void isValidDescription() {","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"        // null description","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"        // invalid description","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"        // valid description","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Description.isValidDescription(\"marathon\")); // alphabets only","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Description.isValidDescription(\"12345\")); // numbers only","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Description.isValidDescription(\"event at 2pm\")); // alphanumeric characters","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Description.isValidDescription(\"All Topics\")); // with capital letters","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Description.isValidDescription(\"This saturday at east coast park\")); // long title","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"rachelljt":37}},{"path":"src/test/java/seedu/address/model/task/PriorityContainsKeywordPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import java.util.List;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"public class PriorityContainsKeywordPredicateTest {","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    public void equals() {","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    public void test_priorityContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        // One keyword","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate highPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(Collections.singletonList(\"high\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        assertTrue(highPredicate.test(new TaskBuilder().withPriority(TaskBuilder.HIGH_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate medPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(Collections.singletonList(\"medium\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"        assertTrue(medPredicate.test(new TaskBuilder().withPriority(TaskBuilder.MEDIUM_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate lowPredicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(Collections.singletonList(\"low\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        assertTrue(lowPredicate.test(new TaskBuilder().withPriority(TaskBuilder.LOW_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate predicate \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"                new PriorityContainsKeywordPredicate(Collections.singletonList(\"unassigned\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        assertTrue(predicate.test(new TaskBuilder().withPriority(TaskBuilder.DEFAULT_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"    public void test_taskDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate predicate \u003d new PriorityContainsKeywordPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"        assertFalse(predicate.test(new TaskBuilder().withPriority(TaskBuilder.DEFAULT_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"        predicate \u003d new PriorityContainsKeywordPredicate(Arrays.asList(\"test\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"        assertFalse(predicate.test(new TaskBuilder().withPriority(TaskBuilder.DEFAULT_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"    public void test_taskContainKeywords_returnsTrue() {","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        PriorityContainsKeywordPredicate predicate \u003d new PriorityContainsKeywordPredicate(Arrays.asList(\"Unassigned\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"        assertTrue(predicate.test(new TaskBuilder().withPriority(TaskBuilder.DEFAULT_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"        predicate \u003d new PriorityContainsKeywordPredicate(Arrays.asList(\"UNASSIGNED\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"        assertTrue(predicate.test(new TaskBuilder().withPriority(TaskBuilder.DEFAULT_PRIORITY).build()));","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"zatkiller":87}},{"path":"src/test/java/seedu/address/model/task/PriorityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"public class PriorityTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public void null_enum_throwsNullPointerException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"        assertThrows(NullPointerException.class, () -\u003e Priority.valueOf(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public void invalid_enum_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"high\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"medium\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"low\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"High\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"Medium\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Priority.valueOf(\"Low\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    public void isValidPriorityValue() {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        // invalid priority","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"\")); // empty string","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"extreme\")); // No such value","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"High\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"Medium\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"Low\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"Unassigned\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"HIGH\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"MEDIUM\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"LOW\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isValidValue(\"UNASSIGNED\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        // valid description","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        assertTrue(Priority.isValidValue(\"high\")); // high value","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        assertTrue(Priority.isValidValue(\"medium\")); // medium value","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        assertTrue(Priority.isValidValue(\"low\")); // low value","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"        assertTrue(Priority.isValidValue(\"unassigned\")); // unassigned value","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    public void getPriority() {","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"HIGH\").getPriority(), \"high\");","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"HIGH\").getPriority(), \"High\");","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"HIGH\").getPriority(), \"HIGH\");","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"MEDIUM\").getPriority(), \"medium\");","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"MEDIUM\").getPriority(), \"Medium\");","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"MEDIUM\").getPriority(), \"MEDIUM\");","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"LOW\").getPriority(), \"low\");","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"LOW\").getPriority(), \"Low\");","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"LOW\").getPriority(), \"LOW\");","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"UNASSIGNED\").getPriority(), \"unassigned\");","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"UNASSIGNED\").getPriority(), \"Unassigned\");","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"UNASSIGNED\").getPriority(), \"UNASSIGNED\");","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"    public void printPriorityResult() {","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"HIGH\").toString(), \"high\");","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"MEDIUM\").toString(), \"medium\");","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"LOW\").toString(), \"low\");","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"HIGH\").toString(), \"High\");","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"MEDIUM\").toString(), \"Medium\");","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"LOW\").toString(), \"Low\");","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"HIGH\").toString(), \"HIGH\");","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"MEDIUM\").toString(), \"MEDIUM\");","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"LOW\").toString(), \"LOW\");","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"    public void getEnumName() {","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"        assertEquals(Priority.valueOf(\"LOW\").getEnumName(), \"Priority\");","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(Priority.valueOf(\"LOW\").getEnumName(), \"priority\");","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"    public void isUnassigned() {","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"        assertThrows(NullPointerException.class, () -\u003e Priority.isUnassigned(null));","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"        assertTrue(Priority.isUnassigned(\"unassigned\"));","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"        assertFalse(Priority.isUnassigned(\"Unassigned\"));","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zatkiller":104}},{"path":"src/test/java/seedu/address/model/task/TaskContainsKeywordPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeerynne"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"cheeerynne"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"cheeerynne"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"cheeerynne"},"content":"import java.util.List;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"cheeerynne"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"cheeerynne"},"content":"public class TaskContainsKeywordPredicateTest {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"cheeerynne"},"content":"    public void equals() {","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate firstPredicate \u003d new TaskContainsKeywordPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate secondPredicate \u003d new TaskContainsKeywordPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"cheeerynne"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"cheeerynne"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate firstPredicateCopy \u003d new TaskContainsKeywordPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"cheeerynne"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"cheeerynne"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"    public void test_taskContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"cheeerynne"},"content":"        // One keyword","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.singletonList(\"Meeting\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Meeting\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Meeting\", \"CS2103T\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Meeting\").withDescription(\"CS2103T\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"cheeerynne"},"content":"        // Only one matching keyword","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Meeting\", \"CS3243\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Meeting\").withDescription(\"CS2103T\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"cheeerynne"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"mEEtINg\", \"cs2103\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"cheeerynne"},"content":"        assertTrue(predicate.test(new TaskBuilder().withTitle(\"Meeting\").withDescription(\"CS2103T\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"cheeerynne"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"    public void test_taskDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"cheeerynne"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"cheeerynne"},"content":"        TaskContainsKeywordPredicate predicate \u003d new TaskContainsKeywordPredicate(Collections.emptyList());","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTitle(\"Meeting\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"cheeerynne"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"cheeerynne"},"content":"        // Non-matching keyword for both title and description","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"cheeerynne"},"content":"        predicate \u003d new TaskContainsKeywordPredicate(Arrays.asList(\"Proposal\", \"CS3243\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"cheeerynne"},"content":"        assertFalse(predicate.test(new TaskBuilder().withTitle(\"Meeting\").withDescription(\"CS1101\").build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"cheeerynne"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"cheeerynne"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"cheeerynne":69}},{"path":"src/test/java/seedu/address/model/task/TaskListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalTasks.HOMEWORK;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalTasks.MARATHON;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import java.util.List;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"public class TaskListTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"    private final TaskList taskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    public void contains_nullTask_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.contains(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"    public void contains_taskNotInList_returnsFalse() {","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        assertFalse(taskList.contains(HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"    public void contains_taskInList_returnsTrue() {","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"        assertTrue(taskList.contains(HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"        Task editedHomework \u003d new TaskBuilder(HOMEWORK).build();","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"        assertTrue(taskList.contains(editedHomework));","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"    public void add_nullTask_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.addTask(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"    public void setTask_nullTargetTask_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(null, HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"rachelljt"},"content":"    public void setTask_nullEditedTask_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(HOMEWORK, null));","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"rachelljt"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e taskList.setTask(HOMEWORK, HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"rachelljt"},"content":"    public void setTask_editedTaskIsSameTask_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"rachelljt"},"content":"        taskList.setTask(HOMEWORK, HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"rachelljt"},"content":"        TaskList expectedUniqueTaskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"rachelljt"},"content":"        expectedUniqueTaskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedUniqueTaskList, taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"rachelljt"},"content":"    public void setTask_editedTaskHasSameIdentity_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"rachelljt"},"content":"        Task editedHomework \u003d new TaskBuilder(HOMEWORK).build();","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"rachelljt"},"content":"        taskList.setTask(HOMEWORK, editedHomework);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"rachelljt"},"content":"        TaskList expectedUniqueTaskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"rachelljt"},"content":"        expectedUniqueTaskList.addTask(editedHomework);","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedUniqueTaskList, taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":84,"author":{"gitId":"rachelljt"},"content":"    public void setTask_editedTaskHasDifferentIdentity_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"rachelljt"},"content":"        taskList.setTask(HOMEWORK, MARATHON);","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"rachelljt"},"content":"        TaskList expectedUniqueTaskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"rachelljt"},"content":"        expectedUniqueTaskList.addTask(MARATHON);","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedUniqueTaskList, taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":94,"author":{"gitId":"rachelljt"},"content":"    public void remove_nullTask_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.remove(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":96,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"rachelljt"},"content":"    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"rachelljt"},"content":"        assertThrows(TaskNotFoundException.class, () -\u003e taskList.remove(HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"rachelljt"},"content":"    public void remove_existingTask_removesTask() {","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"rachelljt"},"content":"        taskList.remove(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"rachelljt"},"content":"        TaskList expectedUniqueTaskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedUniqueTaskList, taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":109,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"rachelljt"},"content":"    public void setTasks_nullTaskList_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((TaskList) null));","lastModifiedDate":"2021-03-16"},{"lineNumber":114,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":115,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":116,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":117,"author":{"gitId":"rachelljt"},"content":"    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedTaskList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":118,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":119,"author":{"gitId":"rachelljt"},"content":"        TaskList expectedTaskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":120,"author":{"gitId":"rachelljt"},"content":"        expectedTaskList.addTask(MARATHON);","lastModifiedDate":"2021-03-16"},{"lineNumber":121,"author":{"gitId":"rachelljt"},"content":"        taskList.setTasks(expectedTaskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":122,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedTaskList, taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":123,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":124,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":126,"author":{"gitId":"rachelljt"},"content":"    public void setTasks_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":127,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((List\u003cTask\u003e) null));","lastModifiedDate":"2021-03-16"},{"lineNumber":128,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":129,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":130,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":131,"author":{"gitId":"rachelljt"},"content":"    public void setTasks_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":132,"author":{"gitId":"rachelljt"},"content":"        taskList.addTask(HOMEWORK);","lastModifiedDate":"2021-03-16"},{"lineNumber":133,"author":{"gitId":"rachelljt"},"content":"        List\u003cTask\u003e taskList \u003d Collections.singletonList(MARATHON);","lastModifiedDate":"2021-03-16"},{"lineNumber":134,"author":{"gitId":"rachelljt"},"content":"        this.taskList.setTasks(taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":135,"author":{"gitId":"rachelljt"},"content":"        TaskList expectedTaskList \u003d new TaskList();","lastModifiedDate":"2021-03-16"},{"lineNumber":136,"author":{"gitId":"rachelljt"},"content":"        expectedTaskList.addTask(MARATHON);","lastModifiedDate":"2021-03-16"},{"lineNumber":137,"author":{"gitId":"rachelljt"},"content":"        assertEquals(expectedTaskList, this.taskList);","lastModifiedDate":"2021-03-16"},{"lineNumber":138,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":139,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":140,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":141,"author":{"gitId":"rachelljt"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":142,"author":{"gitId":"rachelljt"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e taskList.asUnmodifiableObservableList()","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"rachelljt"},"content":"                .remove(0));","lastModifiedDate":"2021-03-17"},{"lineNumber":144,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":145,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"rachelljt":145}},{"path":"src/test/java/seedu/address/model/task/TaskStatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"public class TaskStatusTest {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public void null_enum_throwsNullPointerException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"        assertThrows(NullPointerException.class, () -\u003e TaskStatus.valueOf(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public void invalid_enum_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e TaskStatus.valueOf(\"\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e TaskStatus.valueOf(\"completed\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e TaskStatus.valueOf(\"uncompleted\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e TaskStatus.valueOf(\"Completed\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e TaskStatus.valueOf(\"Uncompleted\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    public void isValidTaskStatusValue() {","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        // invalid TaskStatus","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(null));","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(\"\")); // empty string","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(\"In Progress\")); // No such value","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(\"Completed\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(\"Uncompleted\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(\"COMPLETED\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        assertFalse(TaskStatus.isValidValue(\"UNCOMPLETED\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        // valid description","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        assertTrue(TaskStatus.isValidValue(\"completed\")); // completed value","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        assertTrue(TaskStatus.isValidValue(\"uncompleted\")); // uncompleted value","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"    public void getStatus() {","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        assertEquals(TaskStatus.valueOf(\"COMPLETED\").getStatus(), \"completed\");","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").getStatus(), \"Completed\");","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").getStatus(), \"COMPLETED\");","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        assertEquals(TaskStatus.valueOf(\"UNCOMPLETED\").getStatus(), \"uncompleted\");","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"UNCOMPLETED\").getStatus(), \"Uncompleted\");","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"UNCOMPLETED\").getStatus(), \"UNCOMPLETED\");","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"    public void printTaskStatusResult() {","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        assertEquals(TaskStatus.valueOf(\"COMPLETED\").toString(), \"completed\");","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        assertEquals(TaskStatus.valueOf(\"UNCOMPLETED\").toString(), \"uncompleted\");","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").toString(), \"COMPLETED\");","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"UNCOMPLETED\").toString(), \"UNCOMPLETED\");","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").toString(), \"Completed\");","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"UNCOMPLETED\").toString(), \"Uncompleted\");","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"    public void getEnumName() {","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"        assertEquals(TaskStatus.valueOf(\"COMPLETED\").getEnumName(), \"Task Status\");","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").getEnumName(), \"TaskStatus\");","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").getEnumName(), \"taskStatus\");","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"        assertNotEquals(TaskStatus.valueOf(\"COMPLETED\").getEnumName(), \"taskstatus\");","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"zatkiller":79}},{"path":"src/test/java/seedu/address/model/task/TaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MARATHON;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MARATHON;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MARATHON;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalTasks.HOMEWORK;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.TypicalTasks.MARATHON;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"import seedu.address.testutil.TaskBuilder;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"public class TaskTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    public void isSameTask() {","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"        assertTrue(HOMEWORK.isSameTask(HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.isSameTask(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"        Task editedHomework \u003d new TaskBuilder(HOMEWORK).withDescription(VALID_DESCRIPTION_MARATHON).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"        assertTrue(HOMEWORK.isSameTask(editedHomework));","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        editedHomework \u003d new TaskBuilder(HOMEWORK).withTitle(VALID_TITLE_MARATHON).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.isSameTask(editedHomework));","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        Task editedMarathon \u003d new TaskBuilder(MARATHON).withTitle(VALID_TITLE_MARATHON.toLowerCase()).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"        assertFalse(MARATHON.isSameTask(editedMarathon));","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"        String nameWithTrailingSpaces \u003d VALID_TITLE_MARATHON + \" \";","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"        editedMarathon \u003d new TaskBuilder(MARATHON).withTitle(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"        assertFalse(MARATHON.isSameTask(editedMarathon));","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"    public void equals() {","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        Task homeworkcopy \u003d new TaskBuilder(HOMEWORK).build();","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        assertTrue(HOMEWORK.equals(homeworkcopy));","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"        assertTrue(HOMEWORK.equals(HOMEWORK));","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"rachelljt"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.equals(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"rachelljt"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.equals(5));","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"rachelljt"},"content":"        // different task -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.equals(MARATHON));","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"        // different title -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"rachelljt"},"content":"        Task editedHomework \u003d new TaskBuilder(HOMEWORK).withTitle(VALID_TITLE_MARATHON).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.equals(editedHomework));","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"        // different description -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"rachelljt"},"content":"        editedHomework \u003d new TaskBuilder(HOMEWORK).withDescription(VALID_DESCRIPTION_MARATHON).build();","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"rachelljt"},"content":"        assertFalse(HOMEWORK.equals(editedHomework));","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"        // different deadline -\u003e returns false","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"        editedHomework \u003d new TaskBuilder(HOMEWORK).withDeadline(VALID_DEADLINE_MARATHON).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"        assertFalse(HOMEWORK.equals(editedHomework));","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"tashawan23":7,"rachelljt":67}},{"path":"src/test/java/seedu/address/model/task/TitleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.model.task;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"public class TitleTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Title(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"        String invalidTitle \u003d \"\";","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"    public void isValidTitle() {","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"        // null name","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"        // invalid name","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        assertFalse(Title.isValidTitle(\"\")); // empty string","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        assertFalse(Title.isValidTitle(\" \")); // spaces only","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"        assertFalse(Title.isValidTitle(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"        assertFalse(Title.isValidTitle(\"event*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        // valid name","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Title.isValidTitle(\"marathon\")); // alphabets only","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Title.isValidTitle(\"12345\")); // numbers only","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Title.isValidTitle(\"event the 2\")); // alphanumeric characters","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Title.isValidTitle(\"Complete Assignment\")); // with capital letters","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"        assertTrue(Title.isValidTitle(\"Plan for a board meeting soon\")); // long title","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"rachelljt":40}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tashawan23":8,"-":69}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"zatkiller":1,"-":47}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"heymatez.json\"));","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"zatkiller":1,"-":122}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"     * Adds a new {@code Task} to the {@code AddressBook} that we are building.","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"    public AddressBookBuilder withTask(Task task) {","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        addressBook.addTask(task);","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"        return this;","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rachelljt":9,"-":34}},{"path":"src/test/java/seedu/address/testutil/EditMemberDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"cheeerynne"},"content":"public class EditMemberDescriptorBuilder {","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"cheeerynne"},"content":"    private EditMemberDescriptor descriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberDescriptorBuilder() {","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"cheeerynne"},"content":"        descriptor \u003d new EditMemberDescriptor();","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberDescriptorBuilder(EditMemberDescriptor descriptor) {","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"cheeerynne"},"content":"        this.descriptor \u003d new EditMemberDescriptor(descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberDescriptorBuilder(Person person) {","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"cheeerynne"},"content":"        descriptor \u003d new EditMemberCommand.EditMemberDescriptor();","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":38,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"cheeerynne"},"content":"    public EditMemberCommand.EditMemberDescriptor build() {","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"cheeerynne":14,"-":49}},{"path":"src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"public class EditTaskDescriptorBuilder {","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"    private EditTaskDescriptor descriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    public EditTaskDescriptorBuilder() {","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"        descriptor \u003d new EditTaskDescriptor();","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"        this.descriptor \u003d new EditTaskDescriptor(descriptor);","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"    public EditTaskDescriptorBuilder(Task task) {","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        descriptor \u003d new EditTaskDescriptor();","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        descriptor.setTitle(task.getTitle());","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"rachelljt"},"content":"        descriptor.setDescription(task.getDescription());","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        descriptor.setDeadline(task.getDeadline());","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"     * Sets the {@code Title} of the {@code EditTaskDescriptor} that we are building.","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"    public EditTaskDescriptorBuilder withTitle(String title) {","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"        descriptor.setTitle(new Title(title));","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"        return this;","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building.","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"    public EditTaskDescriptorBuilder withDescription(String description) {","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"        descriptor.setDescription(new Description(description));","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"        return this;","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"     * Sets the {@code Deadline} of the {@code EditTaskDeadline} that we are building.","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"    public EditTaskDescriptorBuilder withDeadline(String deadline) {","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"        descriptor.setDeadline(new Deadline(deadline));","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        return this;","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"     * Sets the {@code Priority} of the {@code EditTaskDeadline} that we are building.","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"    public EditTaskDescriptorBuilder withPriority(String priority) {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"        descriptor.setPriority(Priority.valueOf(priority.toUpperCase()));","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"        return this;","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"rachelljt"},"content":"    public EditTaskDescriptor build() {","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"rachelljt"},"content":"        return descriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"tashawan23":21,"rachelljt":51}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"    public static final String DEFAULT_ROLE \u003d \"Member\";","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    private Role role;","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"        role \u003d new Role(DEFAULT_ROLE);","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"        role \u003d personToCopy.getRole();","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"    public PersonBuilder withRole(String role) {","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"        this.role \u003d new Role(role);","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":77,"author":{"gitId":"tashawan23"},"content":"        return new Person(name, phone, email, role);","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"tashawan23":14,"-":66}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"cheeerynne"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_NAME;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import seedu.address.logic.commands.AddMemberCommand;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"cheeerynne"},"content":"import seedu.address.logic.commands.EditMemberCommand.EditMemberDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"        return AddMemberCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        sb.append(person.getName().fullName + \" \");","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"        sb.append(PREFIX_ROLE + person.getRole().memberRole + \" \");","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"cheeerynne"},"content":"    public static String getEditPersonDescriptorDetails(EditMemberDescriptor descriptor) {","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"cheeerynne"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NEW_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"tashawan23":2,"cheeerynne":4,"zatkiller":5,"-":38}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tashawan23"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Description;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.Priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import seedu.address.model.task.TaskStatus;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"tashawan23"},"content":"import seedu.address.model.task.Title;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"tashawan23"},"content":"public class TaskBuilder {","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"tashawan23"},"content":"    public static final String DEFAULT_TITLE \u003d \"Book venue\";","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"tashawan23"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Book venue for cca dinner\";","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"tashawan23"},"content":"    public static final String DEFAULT_DEADLINE \u003d \"2021-04-04\";","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public static final String DEFAULT_STATUS \u003d \"UNCOMPLETED\";","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"UNASSIGNED\";","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    public static final String COMPLETED_STATUS \u003d \"UNCOMPLETED\";","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    public static final String HIGH_PRIORITY \u003d \"HIGH\";","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public static final String MEDIUM_PRIORITY \u003d \"MEDIUM\";","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    public static final String LOW_PRIORITY \u003d \"LOW\";","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"tashawan23"},"content":"    private Title title;","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"    private Description description;","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"tashawan23"},"content":"    private Deadline deadline;","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    private TaskStatus status;","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    private Priority priority;","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"     * Creates a {@code TaskBuilder} with the default details.","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"tashawan23"},"content":"    public TaskBuilder() {","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"        title \u003d new Title(DEFAULT_TITLE);","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"tashawan23"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"        deadline \u003d new Deadline(DEFAULT_DEADLINE);","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        status \u003d TaskStatus.valueOf(DEFAULT_STATUS);","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        priority \u003d Priority.valueOf(DEFAULT_PRIORITY);","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"     * Initializes the TaskBuilder with the data of {@code TaskToCopy}.","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"tashawan23"},"content":"    public TaskBuilder(Task taskToCopy) {","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        title \u003d taskToCopy.getTitle();","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"tashawan23"},"content":"        description \u003d taskToCopy.getDescription();","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"tashawan23"},"content":"        deadline \u003d taskToCopy.getDeadline();","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        status \u003d taskToCopy.getTaskStatus();","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        priority \u003d taskToCopy.getPriority();","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"tashawan23"},"content":"     * Sets the {@code Title} of the {@code Task} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"tashawan23"},"content":"    public TaskBuilder withTitle(String title) {","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"tashawan23"},"content":"        this.title \u003d new Title(title);","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"tashawan23"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"tashawan23"},"content":"     * Sets the {@code Description} of the {@code Task} that we are building.","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"tashawan23"},"content":"    public TaskBuilder withDescription(String description) {","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"tashawan23"},"content":"        this.description \u003d new Description(description);","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"tashawan23"},"content":"        return this;","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"tashawan23"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"tashawan23"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"tashawan23"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"tashawan23"},"content":"    public TaskBuilder withDeadline(String deadline) {","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"tashawan23"},"content":"        this.deadline \u003d new Deadline(deadline);","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"tashawan23"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"     * Sets the {@code TaskStatus} of the {@code Task} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"    public TaskBuilder withTaskStatus(String status) {","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"        this.status \u003d TaskStatus.valueOf(status.toUpperCase());","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"        return this;","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"     * Sets the {@code Deadline} of the {@code Task} that we are building.","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"    public TaskBuilder withPriority(String priority) {","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"        this.priority \u003d Priority.valueOf(priority.toUpperCase());","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"        return this;","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"tashawan23"},"content":"    public Task build() {","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"        return new Task(title, description, deadline, status, priority);","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"tashawan23"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"tashawan23"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"tashawan23":64,"zatkiller":32}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"tashawan23"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.AddTaskCommand;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":" * A utility class for Person.","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"public class TaskUtil {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"rachelljt"},"content":"     * Returns an add command string for adding the {@code task}.","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"rachelljt"},"content":"    public static String getAddCommand(Task task) {","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"rachelljt"},"content":"        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task);","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"rachelljt"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"    public static String getTaskDetails(Task task) {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"        sb.append(PREFIX_TITLE + task.getTitle().taskTitle + \" \");","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"        sb.append(PREFIX_DESCRIPTION + task.getDescription().desc + \" \");","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"tashawan23"},"content":"        sb.append(PREFIX_DEADLINE + task.getDescription().desc + \" \");","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details.","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"rachelljt"},"content":"        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.taskTitle).append(\" \"));","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"                .append(description.desc).append(\" \"));","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"tashawan23"},"content":"        descriptor.getDeadline().ifPresent((deadline -\u003e sb.append(PREFIX_DEADLINE)));","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"rachelljt"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"tashawan23":4,"rachelljt":45}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":56,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"rachelljt"},"content":"     * Returns the middle index of the task in the {@code model}\u0027s task list.","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"rachelljt"},"content":"    public static Index getTaskMidIndex(Model model) {","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"rachelljt"},"content":"        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"rachelljt"},"content":"     * Returns the last index of the task in the {@code model}\u0027s task list.","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"rachelljt"},"content":"    public static Index getTaskLastIndex(Model model) {","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"rachelljt"},"content":"        return Index.fromOneBased(model.getFilteredTaskList().size());","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"rachelljt"},"content":"     * Returns the task in the {@code model}\u0027s task list at {@code index}.","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"rachelljt"},"content":"    public static Task getTask(Model model, Index index) {","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"rachelljt"},"content":"        return model.getFilteredTaskList().get(index.getZeroBased());","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"rachelljt":22,"-":55}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"rachelljt":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withEmail(\"alice@example.com\")","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"tashawan23"},"content":"            .withPhone(\"94351253\").withRole(\"Member\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withEmail(\"johnd@example.com\")","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"tashawan23"},"content":"            .withPhone(\"98765432\").withRole(\"Member\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"heinz@example.com\").withRole(\"President\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"cornelia@example.com\").withRole(\"Secretary\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"werner@example.com\").withRole(\"Treasurer\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"lydia@example.com\").withRole(\"Member\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"anna@example.com\").withRole(\"Assistant Secretary\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"stefan@example.com\").withRole(\"Member\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"tashawan23"},"content":"            .withEmail(\"hans@example.com\").withRole(\"Member\").build();","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"            .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"            .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"tashawan23":9,"zatkiller":4,"-":54}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"rachelljt"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-16"},{"lineNumber":2,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MARATHON;","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MARATHON;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_MARATHON;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"rachelljt"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_MARATHON;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"rachelljt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"rachelljt"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"rachelljt"},"content":"import java.util.List;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"rachelljt"},"content":"import seedu.address.model.task.Task;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"rachelljt"},"content":"public class TypicalTasks {","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"rachelljt"},"content":"    public static final Task HOMEWORK \u003d new TaskBuilder().withTitle(\"Homework\").withDescription(\"do CS2103tp\")","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"            .withDeadline(\"2021-02-04\").withTaskStatus(\"uncompleted\").withPriority(\"unassigned\").build();","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"tashawan23"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"rachelljt"},"content":"    public static final Task RETURNBOOK \u003d new TaskBuilder().withTitle(\"Return a book\")","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"            .withDescription(\"Go to National Library\").withDeadline(\"2021-05-04\").withTaskStatus(\"uncompleted\")","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"            .withPriority(\"unassigned\").build();","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"rachelljt"},"content":"    // Manually added - Task\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"rachelljt"},"content":"    public static final Task MARATHON \u003d new TaskBuilder().withTitle(VALID_TITLE_MARATHON)","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"            .withDescription(VALID_DESCRIPTION_MARATHON).withDeadline(\"2021-05-06\")","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"            .withTaskStatus(VALID_STATUS_MARATHON).withPriority(VALID_PRIORITY_MARATHON).build();","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"rachelljt"},"content":"    private TypicalTasks() {} // prevents instantiation","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"rachelljt"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"cheeerynne"},"content":"     * Returns an {@code AddressBook} with all the typical tasks.","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"rachelljt"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"rachelljt"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"rachelljt"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"rachelljt"},"content":"        for (Task task : getTypicalTasks()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"rachelljt"},"content":"            ab.addTask(task);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"rachelljt"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"rachelljt"},"content":"        return ab;","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"rachelljt"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"rachelljt"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(HOMEWORK, RETURNBOOK, MARATHON));","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"rachelljt"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"rachelljt"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"tashawan23":1,"rachelljt":33,"cheeerynne":1,"zatkiller":8}}]
