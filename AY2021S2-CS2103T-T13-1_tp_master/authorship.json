[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xyzhang00"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T13-1/tp/actions)"},{"lineNumber":2,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":3,"author":{"gitId":"xyzhang00"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"### Weeblingo"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Weeblingo is a desktop app for managing flashcards, optimized for use via a Command Line Interface (CLI)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"while still having the benefits of a Graphical User Interface (GUI). With a nice and friendly interface,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"users can learn Japanese at a comfortable pace with this application."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"#### Feature List"},{"lineNumber":11,"author":{"gitId":"-"},"content":"- start \\- shows the first flashcard (eg. [あ])"},{"lineNumber":12,"author":{"gitId":"-"},"content":"- check \\- gives answer to previously shown flashcard (eg. [ a ])"},{"lineNumber":13,"author":{"gitId":"-"},"content":"- next \\- only entered after show or check, goes to next flashcard (eg. [ い ])"},{"lineNumber":14,"author":{"gitId":"-"},"content":"- list \\- lists out all flashcards available as a formatted String (eg. {(あ, a), (い, i), (う, u), (え, e), (お, o)})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"- end \\- ends current flashcard session"},{"lineNumber":16,"author":{"gitId":"-"},"content":"- exit \\- exits the application"},{"lineNumber":17,"author":{"gitId":"-"},"content":"- help \\- displays help, input command for specific help"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"#### Product website"},{"lineNumber":20,"author":{"gitId":"xyzhang00"},"content":"The product website is now live [here](https://ay2021s2-cs2103t-t13-1.github.io/tp/)."},{"lineNumber":21,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":22,"author":{"gitId":"xyzhang00"},"content":"### Acknowledgements"},{"lineNumber":23,"author":{"gitId":"xyzhang00"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"- This project makes use of [simple-json library](https://code.google.com/archive/p/json-simple/), version 1.1.1."}],"authorContributionMap":{"xyzhang00":8,"Cheng20010201":1,"-":15}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"    implementation group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1.1\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"Cheng20010201":1,"-":72}},{"path":"database/flashcards.json","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"{"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"  \"flashcards\" : [ {"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"あ\","},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"a\","},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"い\","},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"i\","},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"う\","},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"u\","},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"え\","},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"e\","},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"お\","},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"o\","},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"か\","},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ka\","},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"き\","},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ki\","},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"く\","},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ku\","},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"け\","},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ke\","},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"こ\","},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ko\","},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"さ\","},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"sa\","},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"し\","},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"shi\","},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"す\","},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"su\","},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"せ\","},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"se\","},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"そ\","},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"so\","},{"lineNumber":61,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":62,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":63,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"た\","},{"lineNumber":64,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ta\","},{"lineNumber":65,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":66,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":67,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ち\","},{"lineNumber":68,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"chi\","},{"lineNumber":69,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":70,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":71,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"つ\","},{"lineNumber":72,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"tsu\","},{"lineNumber":73,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":74,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":75,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"て\","},{"lineNumber":76,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"te\","},{"lineNumber":77,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":78,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":79,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"と\","},{"lineNumber":80,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"to\","},{"lineNumber":81,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":82,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":83,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"な\","},{"lineNumber":84,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"na\","},{"lineNumber":85,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":86,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":87,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"に\","},{"lineNumber":88,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ni\","},{"lineNumber":89,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":90,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":91,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ぬ\","},{"lineNumber":92,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"nu\","},{"lineNumber":93,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":94,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":95,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ね\","},{"lineNumber":96,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ne\","},{"lineNumber":97,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":98,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":99,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"の\","},{"lineNumber":100,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"no\","},{"lineNumber":101,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":102,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":103,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"は\","},{"lineNumber":104,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ha\","},{"lineNumber":105,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":106,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":107,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ひ\","},{"lineNumber":108,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"hi\","},{"lineNumber":109,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":110,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":111,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ふ\","},{"lineNumber":112,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"fu\","},{"lineNumber":113,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":114,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":115,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"へ\","},{"lineNumber":116,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"he\","},{"lineNumber":117,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":118,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":119,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ほ\","},{"lineNumber":120,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ho\","},{"lineNumber":121,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":122,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":123,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ま\","},{"lineNumber":124,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ma\","},{"lineNumber":125,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":126,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":127,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"み\","},{"lineNumber":128,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"mi\","},{"lineNumber":129,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":130,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":131,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"む\","},{"lineNumber":132,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"mu\","},{"lineNumber":133,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":134,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":135,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"め\","},{"lineNumber":136,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"me\","},{"lineNumber":137,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":138,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":139,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"も\","},{"lineNumber":140,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"mo\","},{"lineNumber":141,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":142,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":143,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"や\","},{"lineNumber":144,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ya\","},{"lineNumber":145,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":146,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":147,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ゆ\","},{"lineNumber":148,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"yu\","},{"lineNumber":149,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":150,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":151,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"よ\","},{"lineNumber":152,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"yo\","},{"lineNumber":153,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":154,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":155,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ら\","},{"lineNumber":156,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ra\","},{"lineNumber":157,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":158,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":159,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"り\","},{"lineNumber":160,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ri\","},{"lineNumber":161,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":162,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":163,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"る\","},{"lineNumber":164,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ru\","},{"lineNumber":165,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":166,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":167,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"れ\","},{"lineNumber":168,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"re\","},{"lineNumber":169,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":170,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":171,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ろ\","},{"lineNumber":172,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"ro\","},{"lineNumber":173,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":174,"author":{"gitId":"Yanneko"},"content":"  },{"},{"lineNumber":175,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"わ\","},{"lineNumber":176,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"wa\","},{"lineNumber":177,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":178,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":179,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"を\","},{"lineNumber":180,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"wo\","},{"lineNumber":181,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":182,"author":{"gitId":"Yanneko"},"content":"  }, {"},{"lineNumber":183,"author":{"gitId":"Yanneko"},"content":"    \"question\" : \"ん\","},{"lineNumber":184,"author":{"gitId":"Yanneko"},"content":"    \"answer\" : \"n\","},{"lineNumber":185,"author":{"gitId":"Yanneko"},"content":"    \"tagged\" : []"},{"lineNumber":186,"author":{"gitId":"Yanneko"},"content":"  }]"},{"lineNumber":187,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":187}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"We are team T13-1 from [CS2103T](https://github.com/nus-cs2103-ay2021s2)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"### Lan Yu Xuan"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"\u003cimg src\u003d\"images/jellybeano.png\" width\u003d\"200px\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"[ [github](http://github.com/Jellybeano) ] [ [portfolio](team/lanyuxuan.md) ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"* Role: Team Lead"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"* Responsibilities: Documentation"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"### Joel Wong Xue Rong"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"\u003cimg src\u003d\"images/yanneko.png\" width\u003d\"200px\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"[ [github](http://github.com/Yanneko) ]"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"[[portfolio](team/JWong.md)]"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"* Role: Developer"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"* Responsibilities: Testing"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"### Sun Yucheng"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"\u003cimg src\u003d\"images/cheng20010201.png\" width\u003d\"200px\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"[[github](http://github.com/cheng20010201)]"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"[[portfolio](team/cheng20010201.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"* Responsibilities: Integration, Scheduling and Tracking"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"### Teng Xin Wei"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"\u003cimg src\u003d\"images/xinweit.png\" width \u003d \"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"[[github](http://github.com/xinweit)]"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"[[portfolio](team/tengxinwei.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"* Responsibilities: Documentation + Code quality"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"xyzhang00"},"content":"### Zhang Xinyi"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"xyzhang00"},"content":"\u003cimg src\u003d\"images/xyzhang00.png\" width\u003d\"200px\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"xyzhang00"},"content":"[[github](https://github.com/xyzhang00)] [[portfolio](team/zhangxinyi.md)]"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":56,"author":{"gitId":"xyzhang00"},"content":"* Responsibilities: Code quality"}],"authorContributionMap":{"Jellybeano":5,"xyzhang00":4,"Yanneko":6,"xinweit":5,"Cheng20010201":6,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"Jellybeano"},"content":"1. The command execution can affect the `Model` (e.g. adding a flashcard)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"Jellybeano"},"content":"Step 2. The user executes `delete 5` command to delete the 5th flashcard in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"Jellybeano"},"content":"Step 3. The user executes `add n/David …​` to add a new flashcard. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"Jellybeano"},"content":"Step 4. The user now decides that adding the flashcard was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"Jellybeano"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the flashcard being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"Jellybeano"},"content":"* Young aspiring J-Culture enthusiast who wants to learn basic Japanese"},{"lineNumber":240,"author":{"gitId":"Jellybeano"},"content":"* goes to a Japanese Culture Club so is low on time after school"},{"lineNumber":241,"author":{"gitId":"Jellybeano"},"content":"* interested in learning the Japanese language"},{"lineNumber":242,"author":{"gitId":"Jellybeano"},"content":"* prefers using flashcards to learn"},{"lineNumber":243,"author":{"gitId":"Jellybeano"},"content":"* prefers desktop apps over other types"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"Jellybeano"},"content":"**Value proposition**: Ability to not only convert between English and Japanese but Chinese and Japanese as well"},{"lineNumber":248,"author":{"gitId":"Jellybeano"},"content":"(for relevant flashcards)"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                        | So that I can…​                              |"},{"lineNumber":256,"author":{"gitId":"Yanneko"},"content":"| -------- | ------------------------------------------ | -------------------------------------- | ----------------------------------------------- |"},{"lineNumber":257,"author":{"gitId":"Yanneko"},"content":"| `* * *`  | new user                                   | view valid commands                    | remember how to use the App                     |"},{"lineNumber":258,"author":{"gitId":"Yanneko"},"content":"| `* * *`  | user                                       | view a flashcard                       |                                                 |"},{"lineNumber":259,"author":{"gitId":"Yanneko"},"content":"| `* * *`  | user                                       | see the answer to a flashcard          | check if I answered correctly                   |"},{"lineNumber":260,"author":{"gitId":"Yanneko"},"content":"| `* * *`  | user                                       | start a practice run of all flashcards | practice all flashcards in a single session     |"},{"lineNumber":261,"author":{"gitId":"Yanneko"},"content":"| `* *`    | user                                       | view all flashcards                    | study the flashcards before a session           |"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"xyzhang00"},"content":"(For all use cases below, the **System** is the `Weeblingo` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"xinweit"},"content":"**Use case: See flashcards one by one**"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"xinweit"},"content":"1.  User requests to view flashcards"},{"lineNumber":274,"author":{"gitId":"xinweit"},"content":"2.  WeebLingo shows a new flashcard on the screen"},{"lineNumber":275,"author":{"gitId":"xinweit"},"content":"3.  User clicks next"},{"lineNumber":276,"author":{"gitId":"xinweit"},"content":"4.  Go to step 2 again"},{"lineNumber":277,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":278,"author":{"gitId":"xinweit"},"content":"**Extensions**"},{"lineNumber":279,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":280,"author":{"gitId":"xinweit"},"content":"* 2a. All flashcards have been shown."},{"lineNumber":281,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":282,"author":{"gitId":"xinweit"},"content":"  Use case ends."},{"lineNumber":283,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":284,"author":{"gitId":"xinweit"},"content":"**Use case: Take a quiz**"},{"lineNumber":285,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":286,"author":{"gitId":"xinweit"},"content":"**MSS**"},{"lineNumber":287,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":288,"author":{"gitId":"xinweit"},"content":"1.  User clicks quiz"},{"lineNumber":289,"author":{"gitId":"xinweit"},"content":"2.  WeebLingo shows a new question on the screen"},{"lineNumber":290,"author":{"gitId":"xinweit"},"content":"3.  User enters his answer"},{"lineNumber":291,"author":{"gitId":"xinweit"},"content":"4.  WeebLingo shows whether user\u0027s answer is correct/wrong"},{"lineNumber":292,"author":{"gitId":"xinweit"},"content":"5.  WeebLingo displays correct answer if user\u0027s answer is wrong"},{"lineNumber":293,"author":{"gitId":"xinweit"},"content":"6.  WeebLingo removes this question from the list of questions for this session"},{"lineNumber":294,"author":{"gitId":"xinweit"},"content":"7.  Go to step 2 again"},{"lineNumber":295,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":296,"author":{"gitId":"xinweit"},"content":"**Extensions**"},{"lineNumber":297,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":298,"author":{"gitId":"xinweit"},"content":"* 2a. All questions have been shown."},{"lineNumber":299,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":300,"author":{"gitId":"xinweit"},"content":"  Use case ends."},{"lineNumber":301,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":302,"author":{"gitId":"xinweit"},"content":"**Use case: Save and see all my study data**"},{"lineNumber":303,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":304,"author":{"gitId":"xinweit"},"content":"**MSS**"},{"lineNumber":305,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":306,"author":{"gitId":"xinweit"},"content":"1.  User looks at a flashcard"},{"lineNumber":307,"author":{"gitId":"xinweit"},"content":"2.  User can save a flashcard if he is confident he has learnt the japanese word"},{"lineNumber":308,"author":{"gitId":"xinweit"},"content":"3.  WeebLingo saves the learnt flashcard to a storage file"},{"lineNumber":309,"author":{"gitId":"xinweit"},"content":"4.  User can request to see all learnt flashcards"},{"lineNumber":310,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":311,"author":{"gitId":"xinweit"},"content":"    Use case ends."},{"lineNumber":312,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":313,"author":{"gitId":"Jellybeano"},"content":"**Use case: Delete a flashcard**"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"Jellybeano"},"content":"1.  User requests to list flashcards"},{"lineNumber":318,"author":{"gitId":"Jellybeano"},"content":"2.  AddressBook shows a list of flashcards"},{"lineNumber":319,"author":{"gitId":"Jellybeano"},"content":"3.  User requests to delete a specific flashcard in the list"},{"lineNumber":320,"author":{"gitId":"Jellybeano"},"content":"4.  AddressBook deletes the flashcard"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":339,"author":{"gitId":"Yanneko"},"content":"\u003c!-- Updated and maintained by [Yucheng](https://github.com/cheng20010201) --\u003e"},{"lineNumber":340,"author":{"gitId":"Yanneko"},"content":"1.  The product should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":341,"author":{"gitId":"Yanneko"},"content":"2.  The product should be available for download and usage after each release."},{"lineNumber":342,"author":{"gitId":"Yanneko"},"content":"3.  The product\u0027size should not exceed 100MB."},{"lineNumber":343,"author":{"gitId":"Yanneko"},"content":"4.  The product should be an offline application, which should work either with or without presence of internet"},{"lineNumber":344,"author":{"gitId":"Yanneko"},"content":"    connection."},{"lineNumber":345,"author":{"gitId":"Yanneko"},"content":"5.  The product should allow one user to have different instances of the application running at the same time."},{"lineNumber":346,"author":{"gitId":"Yanneko"},"content":"6.  The product should be able to hold up to 2000 Japanese words without a noticeable sluggishness in performance for typical usage."},{"lineNumber":347,"author":{"gitId":"Yanneko"},"content":"7.  The project\u0027s design in source code should be easy to maintain and extend."},{"lineNumber":348,"author":{"gitId":"Yanneko"},"content":"8.  The project should be open-sourced."},{"lineNumber":349,"author":{"gitId":"Yanneko"},"content":"9.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) and"},{"lineNumber":350,"author":{"gitId":"Yanneko"},"content":"    beginner typing speed for simple Japanese text (i.e. simple words and sentences) should be able to accomplish most"},{"lineNumber":351,"author":{"gitId":"xyzhang00"},"content":"    of the learning faster using commands than using the mouse."},{"lineNumber":352,"author":{"gitId":"xyzhang00"},"content":"10. A user should find interacting with the user interface easy, even if he/she is relatively new to the application."},{"lineNumber":353,"author":{"gitId":"Yanneko"},"content":"11. More to be added."},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":358,"author":{"gitId":"xyzhang00"},"content":"* **Question**: A Japanese character/word"},{"lineNumber":359,"author":{"gitId":"xyzhang00"},"content":"* **Answer**: The reading/definition of the Japanese given in the corresponding question"},{"lineNumber":360,"author":{"gitId":"xyzhang00"},"content":"* **Flashcard**: An object that can display a question and its answer"},{"lineNumber":361,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":368,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":385,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"Jellybeano"},"content":"### Deleting a flashcard"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"Jellybeano"},"content":"1. Deleting a flashcard while all flashcards are being shown"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"Jellybeano"},"content":"   1. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":396,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":399,"author":{"gitId":"Jellybeano"},"content":"      Expected: No flashcard is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":402,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":413,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":414,"author":{"gitId":"xyzhang00"},"content":""}],"authorContributionMap":{"Jellybeano":21,"xyzhang00":8,"Yanneko":19,"xinweit":41,"-":325}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"Weeblingo is a desktop app for managing flashcards, **optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). With a nice and friendly interface, users can learn Japanese at a comfortable pace with this application."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"* [Quick Start](#quick-start)"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"* [Features](#features)"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"  * [Starting a session: `start`](#starting-a-session-start)"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"  * [Checking flashcard answers: `check`](#checking-flashcard-answers-check)"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"  * [Going to next flashcard: `next`](#going-to-next-flashcard-next)"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"  * [Listing out all flashcards: `list`](#listing-out-all-flashcards-list)"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"  * [Ending the session: `end`](#ending-the-session-end)"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"  * [Exiting the application: `exit`](#exiting-the-application-exit)"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"  * [Asking for help: `help`](#asking-for-help-help)"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"* [FAQ](#faq)"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"* [Command Summary](#command-summary)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"1. Download the latest `weeblingo.jar` from [here](https/linkhere-tbc)."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your WeebLingo application."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"1. Double-click the file to start the app. The GUI similar to the image below should appear in a few seconds. \u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"   * **`start`** : Shows the first flashcard."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"   * **`check`** : Gives the answer to previously shown flashcard."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"   * **`next`** : Only entered after show or check, goes to next flashcard."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"  e.g. if the command specifies `help あいうえお`, it will be interpreted as `help`."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"### Starting a session: `start`"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"Shows the first flashcard."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"Format: `start`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"### Checking flashcard answers: `check`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"Reveals the answer to the previous shown flashcard."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"Format: `check`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"### Going to next flashcard: `next`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"Goes to the next flashcard, if any."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"Format: `next`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"Jellybeano"},"content":"### Listing out all flashcards: `list`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"Jellybeano"},"content":"Lists out all current flashcards."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"Jellybeano"},"content":"### Ending the session: `end`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"Ends the current session, saving progress."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"Format: `end`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"Jellybeano"},"content":"### Exiting the application: `exit`"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"Jellybeano"},"content":"Exits the application."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"Jellybeano"},"content":"### Asking for help: `help`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"Jellybeano"},"content":"Shows a message explaning how to access the help page. (to be updated)"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"Jellybeano"},"content":"![help message](images/helpMessage.png) "},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"Jellybeano"},"content":"Format: `help`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"Jellybeano"},"content":"### Adding and removing entries `[coming in v2.0]`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Jellybeano"},"content":"**Q**: How do I transfer my flashcards/scores to another Computer?\u003cbr\u003e"},{"lineNumber":121,"author":{"gitId":"Jellybeano"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous WeebLingo home folder."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":128,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":129,"author":{"gitId":"Jellybeano"},"content":"**Start** | `start`"},{"lineNumber":130,"author":{"gitId":"Jellybeano"},"content":"**Check** | `check`"},{"lineNumber":131,"author":{"gitId":"Jellybeano"},"content":"**Next** | `next`"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":133,"author":{"gitId":"Jellybeano"},"content":"**End** | `end`"},{"lineNumber":134,"author":{"gitId":"Jellybeano"},"content":"**Exit** | `exit`"},{"lineNumber":135,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"Jellybeano":47,"-":88}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"ecp -\u003e ec ++: index, editFlashcardDescriptor"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"Jellybeano":1,"-":20}},{"path":"docs/team/JWong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"title: Joel Wong\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"## Project: Weeblingo"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"Weeblingo is a desktop app for managing flashcards, optimized for use via a Command Line Interface (CLI)"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"while still having the benefits of a Graphical User Interface (GUI). With a nice and friendly interface,"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"users can learn Japanese at a comfortable pace with this application."},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"* **New Feature**:"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"* **New Feature**:"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"* **Project management**:"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"* **Enhancements to existing features**:"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"* **Documentation**:"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"* **Community**:"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"* **Tools**:"}],"authorContributionMap":{"Yanneko":21}},{"path":"docs/team/cheng20010201.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"title: Sun Yucheng\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"## Project: Weeblingo"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"Weeblingo is a desktop app for managing flashcards, optimized for use via a Command Line Interface (CLI)"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"while still having the benefits of a Graphical User Interface (GUI). With a nice and friendly interface,"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"users can learn Japanese at a comfortable pace with this application."},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"* **New Feature**:"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"* **New Feature**:"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"* **Project management**:"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"* **Enhancements to existing features**:"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"* **Documentation**:"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"* **Community**:"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"* **Tools**:"}],"authorContributionMap":{"Cheng20010201":21}},{"path":"docs/team/lanyuxuan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"title: Lan Yu Xuan\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"## Project: WeebLingo"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"-- TO BE UPDATED LATER--"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"Given below are my contributions to the project."},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"* **Project management**:"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"* **Enhancements to existing features**:"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"* **Documentation**:"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    * User Guide:"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    * Developer Guide:"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"* **Community**:"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"* **Tools**:"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"Jellybeano":49}},{"path":"docs/team/tengxinwei.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"---"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"title: Teng Xin Wei\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"---"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"## Project: WeebLingo"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"xinweit":46}},{"path":"docs/team/zhangxinyi.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xyzhang00"},"content":"---"},{"lineNumber":2,"author":{"gitId":"xyzhang00"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xyzhang00"},"content":"title: Zhang Xinyi\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"xyzhang00"},"content":"---"},{"lineNumber":5,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":6,"author":{"gitId":"xyzhang00"},"content":"## Project: Weeblingo"},{"lineNumber":7,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":8,"author":{"gitId":"xyzhang00"},"content":"Weeblingo is a desktop app for managing flashcards, optimized for use via a Command Line Interface (CLI)"},{"lineNumber":9,"author":{"gitId":"xyzhang00"},"content":"while still having the benefits of a Graphical User Interface (GUI). With a nice and friendly interface,"},{"lineNumber":10,"author":{"gitId":"xyzhang00"},"content":"users can learn Japanese at a comfortable pace with this application."},{"lineNumber":11,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":12,"author":{"gitId":"xyzhang00"},"content":"Given below are my contributions to the project.`to be updated`"},{"lineNumber":13,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":14,"author":{"gitId":"xyzhang00"},"content":"* **New Feature**: "},{"lineNumber":15,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":16,"author":{"gitId":"xyzhang00"},"content":"* **New Feature**:"},{"lineNumber":17,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":18,"author":{"gitId":"xyzhang00"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":19,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":20,"author":{"gitId":"xyzhang00"},"content":"* **Project management**:"},{"lineNumber":21,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":22,"author":{"gitId":"xyzhang00"},"content":"* **Enhancements to existing features**:"},{"lineNumber":23,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":24,"author":{"gitId":"xyzhang00"},"content":"* **Documentation**:"},{"lineNumber":25,"author":{"gitId":"xyzhang00"},"content":" "},{"lineNumber":26,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":27,"author":{"gitId":"xyzhang00"},"content":"* **Community**:"},{"lineNumber":28,"author":{"gitId":"xyzhang00"},"content":""},{"lineNumber":29,"author":{"gitId":"xyzhang00"},"content":"* **Tools**:"}],"authorContributionMap":{"xyzhang00":29}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":" * Changes the remark of an existing flashcard in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the flashcard identified \""},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"            + \"by the index number used in the last flashcard listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Jellybeano"},"content":"     * @param index of the flashcard in the filtered flashcard list to edit the remark"},{"lineNumber":103,"author":{"gitId":"Jellybeano"},"content":"     * @param remark of the flashcard to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"Jellybeano"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of flashcard data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the flashcard’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a flashcard."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"Jellybeano"},"content":"Create a new `Remark` in `seedu.address.model.flashcard`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"Jellybeano"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each flashcard."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"Jellybeano"},"content":"Simply add the following to [`seedu.address.ui.FlashcardCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"Jellybeano"},"content":"public PersonCard(Person flashcard, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"Jellybeano"},"content":"    remark.setText(flashcard.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"Jellybeano"},"content":"        Person flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"Jellybeano"},"content":"        Person editedFlashcard \u003d new Person(flashcardToEdit.getName(), flashcardToEdit.getPhone(), flashcardToEdit.getEmail(),"},{"lineNumber":345,"author":{"gitId":"Jellybeano"},"content":"                flashcardToEdit.getAddress(), remark, flashcardToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"Jellybeano"},"content":"        model.setPerson(flashcardToEdit, editedFlashcard);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"Jellybeano"},"content":"        return new CommandResult(generateSuccessMessage(editedFlashcard));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"Jellybeano"},"content":"     * {@code flashcardToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"Jellybeano"},"content":"    private String generateSuccessMessage(Person flashcardToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"Jellybeano"},"content":"        return String.format(message, flashcardToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"Jellybeano":19,"-":375}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.flashcard.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"  \"flashcards\": [ {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"Jellybeano":2,"-":101}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":155,"author":{"gitId":"Jellybeano"},"content":"       Person flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":156,"author":{"gitId":"Jellybeano"},"content":"       Person editedFlashcard \u003d createEditedPerson(flashcardToEdit, editFlashcardDescriptor);"},{"lineNumber":157,"author":{"gitId":"Jellybeano"},"content":"       if (!flashcardToEdit.isSamePerson(editedFlashcard) \u0026\u0026 model.hasPerson(editedFlashcard)) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":160,"author":{"gitId":"Jellybeano"},"content":"       model.setPerson(flashcardToEdit, editedFlashcard);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":162,"author":{"gitId":"Jellybeano"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFlashcard));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":183,"author":{"gitId":"Jellybeano"},"content":"       flashcards.addAll("},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book"}],"authorContributionMap":{"Jellybeano":6,"-":244}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.util.LocalDatabasePopulator;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"Cheng20010201"},"content":"            initialData \u003d addressBookOptional.orElseGet(LocalDatabasePopulator::getDatabaseOfWeeblingo);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Cheng20010201":2,"-":181}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d flashcards listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":2,"-":11}},{"path":"src/main/java/seedu/address/commons/util/RegexUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":" * A container for different regex expressions to check whether the input is valid or not."},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"public class RegexUtil {"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"    // Miscellaneous regex expressions"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"    public static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"    // Original regex expression for AB3, for reference purposes"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"     * The first character of the address and name must not be a whitespace,"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_AB3_ADDRESS \u003d \"[^\\\\s].*\";"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_AB3_NAME \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_AB3_EMAIL \u003d getAb3EmailRegex();"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_AB3_PHONE \u003d \"\\\\d{3,}\";"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_AB3_TAG \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"    // Regex expressions that might be useful in project Weeblingo"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"    // The first character of the string to check cannot be white space"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_JAP_WORD \u003d"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"            \"[(\\\\p{InHIRAGANA}|\\\\p{InKATAKANA})\""},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"            + \"|\\\\p{InCJK_Unified_Ideographs}}]\""},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"            + \"[(\\\\p{InHIRAGANA}|\\\\p{InKATAKANA})\""},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"            + \"|\\\\p{InCJK_Unified_Ideographs}}]*\";"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_JAP_SENTENCE \u003d"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"            \"[(\\\\p{InHIRAGANA}|\\\\p{InKATAKANA})|\\\\p{InCJK_Unified_Ideographs}|\""},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"            + \"\\\\p{InCJK_Symbols_and_Punctuation}|\\\\p{Alnum}|\\\\p{Punct}]\""},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"            + \"[(\\\\p{InHIRAGANA}|\\\\p{InKATAKANA})|\\\\p{InCJK_Unified_Ideographs}|\""},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"                    + \"\\\\p{InCJK_Symbols_and_Punctuation}|\\\\p{Alnum}|\\\\p{Punct} ]*\";"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_ENG_WORD \u003d \"[\\\\p{Alpha}][\\\\p{Alpha}]*\";"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"    public static final String REGEX_ENG_SENTENCE \u003d \"[\\\\p{Alnum}|\\\\p{Punct}]\""},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"            + \"[\\\\p{Alnum}|\\\\p{Punct} ]*\";"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"     * Gets the regex expression for AB3 email model."},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"     * @return The regex expression for AB3 email model."},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"    private static String getAb3EmailRegex() {"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"        // alphanumeric and special characters"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"        final String localPartRegex \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"        final String domainFirstCharacterRegex \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"        final String domainMiddleRegex \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"        final String domainLastCharacterRegex \u003d \"[^\\\\W_]$\";"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"        return localPartRegex + \"@\""},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"                + domainFirstCharacterRegex + domainMiddleRegex + domainLastCharacterRegex;"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":52}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"    /** Generates a Quiz object and shows the first question */"},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"    ObservableList\u003cFlashcard\u003e startQuiz();"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"    /** Shows the next question in the Quiz */"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"    ObservableList\u003cFlashcard\u003e getNextFlashcard();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":2,"Yanneko":5,"-":49}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        //logging, safe to ignore"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":55,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"        return model.getFilteredFlashcardList();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"Yanneko"},"content":"    public ObservableList\u003cFlashcard\u003e startQuiz() {"},{"lineNumber":75,"author":{"gitId":"Yanneko"},"content":"        return model.startQuiz();"},{"lineNumber":76,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":78,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"Yanneko"},"content":"    public ObservableList\u003cFlashcard\u003e getNextFlashcard() {"},{"lineNumber":80,"author":{"gitId":"Yanneko"},"content":"        return model.getNextFlashcard();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":3,"Yanneko":8,"-":86}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xinweit":2,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/EndCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":" * Lists all flashcards in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"public class EndCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    public static final String COMMAND_WORD \u003d \"end\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Welcome back.\\n\""},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"            + \"Enter \\\"learn\\\" or \\\"quiz\\\" for different modes.\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":3,"xinweit":4,"Cheng20010201":2,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/LearnCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":" * Lists all flashcards in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"public class LearnCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    public static final String COMMAND_WORD \u003d \"learn\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You are now in learn mode.\\n\""},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"            + \"Enter \\\"end\\\" to end your study or \""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"            + \"\\\"quiz\\\" to start a quiz session on the flashcards.\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":3,"xinweit":3,"Cheng20010201":3,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/NextCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":" * Gets the next flashcard."},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"public class NextCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"    public static final String COMMAND_WORD \u003d \"next\";"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Here is the next question.\\n\""},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"            + \"Enter \\\"end\\\" to end the quiz, \\\"check\\\" to check the answer, \""},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"            + \"and \\\"next\\\" to move to the next question.\";"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false);"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":25}},{"path":"src/main/java/seedu/address/logic/commands/QuizCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":" * Enter flashcard quiz mode."},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"public class QuizCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"    public static final String COMMAND_WORD \u003d \"quiz\";"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You are now in quiz mode.\\n\""},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"            + \"Enter \\\"start\\\" to start quiz.\";"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false);"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":24}},{"path":"src/main/java/seedu/address/logic/commands/StartCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":" * Starts the quiz."},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"public class StartCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"    public static final String COMMAND_WORD \u003d \"start\";"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Here is the first question.\\n\""},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"            + \"Enter \\\"end\\\" to end the quiz, \\\"check\\\" to check the answer, \""},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"            + \"and \\\"next\\\" to move to the next question.\";"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"        return new CommandResult(MESSAGE_SUCCESS, false, false);"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":25}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"import seedu.address.logic.commands.EndCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"import seedu.address.logic.commands.LearnCommand;"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"import seedu.address.logic.commands.NextCommand;"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.logic.commands.QuizCommand;"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"import seedu.address.logic.commands.StartCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"        case EndCommand.COMMAND_WORD:"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"            return new EndCommand();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"        case LearnCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"            return new LearnCommand();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"        case QuizCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"            return new QuizCommand();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"        case StartCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"            return new StartCommand();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"        case NextCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"            return new NextCommand();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xinweit":6,"Yanneko":6,"Cheng20010201":3,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":2,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Answer;"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Question;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"     * Parses a {@code String answer} into an {@code Answer}."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"     * @throws ParseException if the given {@code Answer} is invalid."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"    public static Answer parseAnswer(String answer) throws ParseException {"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(answer);"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"        String trimmedAnswer \u003d answer.trim();"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"        if (!Answer.isValidAnswer(trimmedAnswer)) {"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        return new Answer(trimmedAnswer);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"     * Parses a {@code String question} into an {@code question}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"     * @throws ParseException if the given {@code question} is invalid."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    public static Question parseQuestion(String question) throws ParseException {"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(question);"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"        String trimmedQuestion \u003d question.trim();"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"        if (!Question.isValidQuestion(trimmedQuestion)) {"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"        return new Question(trimmedQuestion);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":18,"-":75}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.UniqueFlashcardList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":" * Duplicates are not allowed (by .isSameFlashcard comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    private final UniqueFlashcardList flashcards;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"        flashcards \u003d new UniqueFlashcardList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"     * Creates an AddressBook using the flashcards in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"     * Replaces the contents of the flashcard list with {@code flashcards}."},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"     * {@code flashcards} must not contain duplicate flashcards."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"        this.flashcards.setFlashcards(flashcards);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"        setFlashcards(newData.getFlashcardList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"    //// flashcard-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    public boolean hasFlashcard(Flashcard flashcard) {"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(flashcard);"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"        return flashcards.contains(flashcard);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"     * Adds a flashcard to the address book."},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"    public void addFlashcard(Flashcard p) {"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"        flashcards.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard identity of {@code editedFlashcard} must not be the same"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"     * as another existing flashcard in the address book."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(editedFlashcard);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"Jellybeano"},"content":"        flashcards.setFlashcard(target, editedFlashcard);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Jellybeano"},"content":"    public void removeFlashcard(Flashcard key) {"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"        flashcards.remove(key);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"Jellybeano"},"content":"        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"Jellybeano"},"content":"    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"},{"lineNumber":107,"author":{"gitId":"Jellybeano"},"content":"        return flashcards.asUnmodifiableObservableList();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 flashcards.equals(((AddressBook) other).flashcards));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitId":"Jellybeano"},"content":"        return flashcards.hashCode();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":31,"Yanneko":2,"-":88}},{"path":"src/main/java/seedu/address/model/Mode.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":" * Container for the current mode of WeebLingo."},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"public class Mode {"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"    public static final Integer MODE_MENU \u003d 1;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"    public static final Integer MODE_QUIZ \u003d 2;"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"    public static final Integer MODE_LEARN \u003d 3;"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    private Integer currentMode;"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"    public Mode() {"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"        this.currentMode \u003d MODE_MENU;"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    public void switchModeQuiz() {"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"        this.currentMode \u003d MODE_QUIZ;"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    public void switchModeLearn() {"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"        this.currentMode \u003d MODE_LEARN;"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    public void switchModeMenu() {"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"        this.currentMode \u003d MODE_MENU;"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    public Integer getMode() {"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"        return this.currentMode;"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":33}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the address book."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    boolean hasFlashcard(Flashcard flashcard);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"     * Deletes the given flashcard."},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard must exist in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    void deleteFlashcard(Flashcard target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"     * Adds the given flashcard."},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"     * {@code flashcard} must not already exist in the address book."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"    void addFlashcard(Flashcard flashcard);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard identity of {@code editedFlashcard} must not be the same as"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"     * another existing flashcard in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"    /** Returns an unmodifiable view of the filtered flashcard list */"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Jellybeano"},"content":"    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":89,"author":{"gitId":"Yanneko"},"content":"    /** Generates a Quiz object and shows the first question */"},{"lineNumber":90,"author":{"gitId":"Yanneko"},"content":"    ObservableList\u003cFlashcard\u003e startQuiz();"},{"lineNumber":91,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":92,"author":{"gitId":"Yanneko"},"content":"    /** Shows the next question in the Quiz */"},{"lineNumber":93,"author":{"gitId":"Yanneko"},"content":"    ObservableList\u003cFlashcard\u003e getNextFlashcard();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":18,"Yanneko":6,"-":70}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    private final Mode mode;"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"    private Quiz quizInstance;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.addressBook.getFlashcardList());"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"        this.mode \u003d new Mode();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"    public boolean hasFlashcard(Flashcard flashcard) {"},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(flashcard);"},{"lineNumber":97,"author":{"gitId":"Jellybeano"},"content":"        return addressBook.hasFlashcard(flashcard);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"Jellybeano"},"content":"    public void deleteFlashcard(Flashcard target) {"},{"lineNumber":102,"author":{"gitId":"Jellybeano"},"content":"        addressBook.removeFlashcard(target);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"Jellybeano"},"content":"    public void addFlashcard(Flashcard flashcard) {"},{"lineNumber":107,"author":{"gitId":"Jellybeano"},"content":"        addressBook.addFlashcard(flashcard);"},{"lineNumber":108,"author":{"gitId":"Jellybeano"},"content":"        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":113,"author":{"gitId":"Jellybeano"},"content":"        requireAllNonNull(target, editedFlashcard);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"Jellybeano"},"content":"        addressBook.setFlashcard(target, editedFlashcard);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"Jellybeano"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"Jellybeano"},"content":"     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitId":"Jellybeano"},"content":"    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"},{"lineNumber":126,"author":{"gitId":"Jellybeano"},"content":"        return filteredFlashcards;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitId":"Jellybeano"},"content":"    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":132,"author":{"gitId":"Jellybeano"},"content":"        filteredFlashcards.setPredicate(predicate);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":151,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"Yanneko"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quiz Related \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":155,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":156,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"Yanneko"},"content":"    public ObservableList\u003cFlashcard\u003e startQuiz() {"},{"lineNumber":158,"author":{"gitId":"Yanneko"},"content":"        this.quizInstance \u003d new Quiz();"},{"lineNumber":159,"author":{"gitId":"Yanneko"},"content":"        return quizInstance.getNextFlashcard();"},{"lineNumber":160,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":162,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":163,"author":{"gitId":"Yanneko"},"content":"    public ObservableList\u003cFlashcard\u003e getNextFlashcard() {"},{"lineNumber":164,"author":{"gitId":"Yanneko"},"content":"        requireNonNull(quizInstance);"},{"lineNumber":165,"author":{"gitId":"Yanneko"},"content":"        return quizInstance.getNextFlashcard();"},{"lineNumber":166,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":23,"Yanneko":14,"-":130}},{"path":"src/main/java/seedu/address/model/Quiz.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"import static seedu.address.model.util.LocalDatabasePopulator.getDatabaseOfFlashcards;"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"import java.util.Queue;"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"import seedu.address.model.person.UniqueFlashcardList;"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":" * Class Quiz represents a quiz session."},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"public class Quiz {"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    public static final String QUIZ_END_MESSAGE \u003d \"The Quiz is over! \\n\""},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"            + \"Enter \\\"end\\\" to end the quiz.\";"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"    private static Queue\u003cFlashcard\u003e quizSessionQueue;"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"     * Initializes the quiz session with a queue of all flashcards with randomized order."},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"    public Quiz() {"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"        Flashcard[] flashcardsReadFromDB \u003d getDatabaseOfFlashcards();"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        quizSessionQueue \u003d getRandomizedQueue(flashcardsReadFromDB);"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"     * Checks whether the quiz session is supposed to have ended. A session has to end if there is"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"     * no flashcard to display as quiz question."},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"     * @return True if there is no flashcard to display."},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"    public static boolean hasSessionEnded() {"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"        return quizSessionQueue.isEmpty();"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"     * Gets the next flashcard question to show to the user."},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"     * @return The next flashcard in the queue, if the queue is not empty."},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"     * Returns null if the queue is empty and the session should be ended."},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"    public Flashcard getNextQuestion() {"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"        if (hasSessionEnded()) {"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"            return null;"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"            return quizSessionQueue.poll();"},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"     * Gets the next flashcard question to show to the user in the type accepted by MainWindow."},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":"     * @return The next flashcard in the queue as an UnmodifiableObservableList, if the queue is not empty."},{"lineNumber":61,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Yanneko"},"content":"    public ObservableList\u003cFlashcard\u003e getNextFlashcard() {"},{"lineNumber":63,"author":{"gitId":"Yanneko"},"content":"        UniqueFlashcardList temp \u003d new UniqueFlashcardList();"},{"lineNumber":64,"author":{"gitId":"Yanneko"},"content":"        temp.setFlashcards(List.of(this.getNextQuestion()));"},{"lineNumber":65,"author":{"gitId":"Yanneko"},"content":"        return temp.asUnmodifiableObservableList();"},{"lineNumber":66,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"     * Generates randomized queue from the given array of flashcards."},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"     * @param flashcardsReadFromDB An array of flashcards, previously read from database."},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":"     * @return A queue of flashcards with randomized order."},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":"    private Queue\u003cFlashcard\u003e getRandomizedQueue(Flashcard[] flashcardsReadFromDB) {"},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"        List\u003cFlashcard\u003e flashcardsToShuffle \u003d Arrays.asList(flashcardsReadFromDB);"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":"        Collections.shuffle(flashcardsToShuffle);"},{"lineNumber":77,"author":{"gitId":"Cheng20010201"},"content":"        Queue\u003cFlashcard\u003e randomizedQueue \u003d new LinkedList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"Cheng20010201"},"content":"        for (Flashcard f : flashcardsToShuffle) {"},{"lineNumber":79,"author":{"gitId":"Cheng20010201"},"content":"            randomizedQueue.offer(f);"},{"lineNumber":80,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Cheng20010201"},"content":"        return randomizedQueue;"},{"lineNumber":82,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Yanneko":18,"Cheng20010201":65}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"    ObservableList\u003cFlashcard\u003e getFlashcardList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":2,"-":15}},{"path":"src/main/java/seedu/address/model/person/Answer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.commons.util.RegexUtil;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":" * Represents a Flashcard\u0027s answer in the answer book."},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"public class Answer {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"An answer can only be an English word for now.\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"     * The first character of the answer must not be a whitespace,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"    public static final String VALIDATION_REGEX \u003d RegexUtil.REGEX_ENG_WORD;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"     * Constructs an {@code answer}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"     * @param answer A valid answer."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"    public Answer(String answer) {"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(answer);"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"        value \u003d answer;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"    public static boolean isValidAnswer(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"                || (other instanceof Answer // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 value.equals(((Answer) other).value)); // state check"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":13,"Cheng20010201":4,"-":41}},{"path":"src/main/java/seedu/address/model/person/Flashcard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":" * Represents a Flashcard in the answer book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"public class Flashcard {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    private final Question question;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"    private final Answer answer;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"    public Flashcard(Question question, Answer answer, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"        requireAllNonNull(question, answer, tags);"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"        this.question \u003d question;"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"        this.answer \u003d answer;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    public Question getQuestion() {"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"        return question;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"    public Answer getAnswer() {"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"        return answer;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"     * Returns true if both flashcards have the same question."},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"     * This defines a weaker notion of equality between two flashcards."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"    public boolean isSameFlashcard(Flashcard otherFlashcard) {"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"        if (otherFlashcard \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"        return otherFlashcard !\u003d null"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 otherFlashcard.getQuestion().equals(getQuestion());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"        if (!(other instanceof Flashcard)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"        Flashcard otherFlashcard \u003d (Flashcard) other;"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"        return otherFlashcard.getQuestion().equals(getQuestion())"},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 otherFlashcard.getAnswer().equals(getAnswer())"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 otherFlashcard.getTags().equals(getTags());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":87,"author":{"gitId":"Jellybeano"},"content":"        return Objects.hash(question, answer, tags);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitId":"Jellybeano"},"content":"        builder.append(\"; question: \")"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"                .append(getQuestion())"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"                .append(\"; answer: \")"},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"                .append(getAnswer());"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":26,"Cheng20010201":2,"-":78}},{"path":"src/main/java/seedu/address/model/person/Question.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.commons.util.RegexUtil;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":" * Represents a Flashcard\u0027s Question."},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"public class Question {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"A question can only be a japanese word for now.\";"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    public static final String VALIDATION_REGEX \u003d RegexUtil.REGEX_JAP_WORD;"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"     * Constructs an {@code Question}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"     * @param question A valid question."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    public Question(String question) {"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(question);"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"        value \u003d question;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"     * Returns if a given string is a valid question."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    public static boolean isValidQuestion(String test) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"                || (other instanceof Question // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 value.equals(((Question) other).value)); // state check"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":14,"Cheng20010201":5,"-":36}},{"path":"src/main/java/seedu/address/model/person/QuestionContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":" * Tests that a {@code Flashcard}\u0027s {@code Question} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"public class QuestionContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    public boolean test(Flashcard flashcard) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(flashcard.getQuestion().value, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":7,"-":24}},{"path":"src/main/java/seedu/address/model/person/UniqueFlashcardList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.exceptions.DuplicateFlashcardException;"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.exceptions.FlashcardNotFoundException;"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":" * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":" * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":" * As such, adding and updating of flashcards uses Flashcard#isSameFlashcard(Flashcard) for equality so as to ensure"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":" * that the flashcard being added or updated is unique in terms of identity in the UniqueFlashcardList."},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":" * However, the removal of a flashcard uses Flashcard#equals(Object) so as to ensure that the flashcard with exactly"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":" * the same fields will be removed."},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":" *"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":" *"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":" * @see Flashcard#isSameFlashcard(Flashcard)"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"     * Returns true if the list contains an equivalent flashcard as the given argument."},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    public boolean contains(Flashcard toCheck) {"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"     * Adds a flashcard to the list."},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard must not already exist in the list."},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"    public void add(Flashcard toAdd) {"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"            throw new DuplicateFlashcardException();"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        internalList.add(toAdd);"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the list."},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"        requireAllNonNull(target, editedFlashcard);"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"            throw new FlashcardNotFoundException();"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"            throw new DuplicateFlashcardException();"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"        internalList.set(index, editedFlashcard);"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"     * Removes the equivalent flashcard from the list."},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"     * The flashcard must exist in the list."},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"    public void remove(Flashcard toRemove) {"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"            throw new FlashcardNotFoundException();"},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":83,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcards(UniqueFlashcardList replacement) {"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"Jellybeano"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":88,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Jellybeano"},"content":"     * Replaces the contents of this list with {@code flashcards}."},{"lineNumber":90,"author":{"gitId":"Jellybeano"},"content":"     * {@code flashcards} must not contain duplicate flashcards."},{"lineNumber":91,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"},{"lineNumber":93,"author":{"gitId":"Jellybeano"},"content":"        requireAllNonNull(flashcards);"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"        if (!flashcardsAreUnique(flashcards)) {"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"            throw new DuplicateFlashcardException();"},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":98,"author":{"gitId":"Jellybeano"},"content":"        internalList.setAll(flashcards);"},{"lineNumber":99,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":101,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Jellybeano"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Jellybeano"},"content":"    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"Jellybeano"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":108,"author":{"gitId":"Jellybeano"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"Jellybeano"},"content":"    public Iterator\u003cFlashcard\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"Jellybeano"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":113,"author":{"gitId":"Jellybeano"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"Jellybeano"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"Jellybeano"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"Jellybeano"},"content":"                || (other instanceof UniqueFlashcardList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"Jellybeano"},"content":"                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":120,"author":{"gitId":"Jellybeano"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"Jellybeano"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"Jellybeano"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":125,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"Jellybeano"},"content":"     * Returns true if {@code flashcards} contains only unique flashcards."},{"lineNumber":127,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Jellybeano"},"content":"    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"},{"lineNumber":129,"author":{"gitId":"Jellybeano"},"content":"        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"Jellybeano"},"content":"            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"Jellybeano"},"content":"                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"},{"lineNumber":132,"author":{"gitId":"Jellybeano"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"Jellybeano"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"Jellybeano"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"Jellybeano"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":138}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateFlashcardException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":" * Signals that the operation will result in duplicate Flashcards"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":" * (Flashcards are considered duplicates if they have the same identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"public class DuplicateFlashcardException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"    public DuplicateFlashcardException() {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":2,"Cheng20010201":2,"-":7}},{"path":"src/main/java/seedu/address/model/person/exceptions/FlashcardNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":" * Signals that the operation is unable to find the specified flashcard."},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"public class FlashcardNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"Jellybeano":6}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.commons.util.RegexUtil;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":" * Represents a Tag in weeblingo."},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    public static final String VALIDATION_REGEX \u003d RegexUtil.REGEX_AB3_TAG;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Cheng20010201":4,"-":52}},{"path":"src/main/java/seedu/address/model/util/LocalDatabasePopulator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"import org.json.simple.JSONArray;"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"import org.json.simple.JSONObject;"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.person.Answer;"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.person.Question;"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.storage.JsonDatabaseReader;"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":" * Reads from local database, populates the flashcards read into user\u0027s data storage."},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"public class LocalDatabasePopulator {"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"     * Gets the database of flashcards, as an array of flashcards."},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"     * @return An array of flashcards extracted from database."},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"    public static Flashcard[] getDatabaseOfFlashcards() {"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"        JSONArray readDatabaseAsJsonArray \u003d JsonDatabaseReader.readDatabaseAsJsonArray();"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        Flashcard[] flashcards \u003d new Flashcard[readDatabaseAsJsonArray.size()];"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"        for (int i \u003d 0; i \u003c readDatabaseAsJsonArray.size(); i++) {"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"            JSONObject tempJsonCard \u003d (JSONObject) readDatabaseAsJsonArray.get(i);"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"            Question question \u003d new Question((String) tempJsonCard.get(\"question\"));"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"            Answer answer \u003d new Answer((String) tempJsonCard.get(\"answer\"));"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"            Set\u003cTag\u003e tags \u003d getTagSet((JSONArray) tempJsonCard.get(\"tagged\"));"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"            Flashcard tempCard \u003d new Flashcard(question, answer, tags);"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"            flashcards[i] \u003d tempCard;"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"        return flashcards;"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"    public static ReadOnlyAddressBook getDatabaseOfWeeblingo() {"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"        for (Flashcard sampleFlashcard : getDatabaseOfFlashcards()) {"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"            sampleAb.addFlashcard(sampleFlashcard);"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"        return sampleAb;"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"        return Arrays.stream(strings)"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"                .map(Tag::new)"},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"     * Returns a tag set containing the tags contained in the json flashcard object."},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"    public static Set\u003cTag\u003e getTagSet(JSONArray jsonTags) {"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"        String[] strings \u003d new String[jsonTags.size()];"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"        for (int i \u003d 0; i \u003c jsonTags.size(); i++) {"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"            strings[i] \u003d (String) jsonTags.get(i);"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"        return getTagSet(strings);"},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":71}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Answer;"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Question;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":" * Jackson-friendly version of {@link Flashcard}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"class JsonAdaptedFlashcard {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    private final String question;"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    private final String answer;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    public JsonAdaptedFlashcard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"        this.question \u003d question;"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"        this.answer \u003d answer;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"     * Converts a given {@code Flashcard} into this class for Jackson use."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"    public JsonAdaptedFlashcard(Flashcard source) {"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"        question \u003d source.getQuestion().value;"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"        answer \u003d source.getAnswer().value;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    public Flashcard toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"            flashcardTags.add(tag.toModelType());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"        if (question \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"            throw new IllegalValueException("},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"        if (!Question.isValidQuestion(question)) {"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"        final Question modelquestion \u003d new Question(question);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"        if (answer \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"        if (!Answer.isValidAnswer(answer)) {"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"        final Answer modelAnswer \u003d new Answer(answer);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"        return new Flashcard(modelquestion, modelAnswer, modelTags);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":34,"-":51}},{"path":"src/main/java/seedu/address/storage/JsonDatabaseReader.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"import java.io.FileReader;"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"import java.io.Reader;"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"import org.json.simple.JSONArray;"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"import org.json.simple.JSONObject;"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"import org.json.simple.parser.JSONParser;"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"import org.json.simple.parser.ParseException;"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":" * Flashcards database (Json file) reader."},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"public class JsonDatabaseReader {"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    private static final String DATABASE_LOCATION \u003d \"database/flashcards.json\";"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"     * Reads the local database for flashcards as Json Array format."},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"     * @return The Json Array representation of the flashcards in the local database."},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"    public static JSONArray readDatabaseAsJsonArray() {"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"        JSONParser jsonParser \u003d new JSONParser();"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"        try (Reader reader \u003d new FileReader(DATABASE_LOCATION)) {"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"            JSONObject jsonObject \u003d (JSONObject) jsonParser.parse(reader);"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"            JSONArray flashcardsJsonArr \u003d (JSONArray) jsonObject.get(\"flashcards\");"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"            return flashcardsJsonArr;"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        } catch (IOException | ParseException e) {"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"            throw new RuntimeException();"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":34}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcards list contains duplicate flashcard(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given flashcards."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"        this.flashcards.addAll(flashcards);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"        flashcards.addAll(source.getFlashcardList().stream().map("},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"                JsonAdaptedFlashcard::new).collect(Collectors.toList()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"            if (addressBook.hasFlashcard(flashcard)) {"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"            addressBook.addFlashcard(flashcard);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":13,"-":48}},{"path":"src/main/java/seedu/address/ui/FlashcardCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":" * An UI component that displays information of a {@code Flashcard}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"public class FlashcardCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    private static final String FXML \u003d \"FlashcardListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    public final Flashcard flashcard;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    private Label answer;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    private Label question;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"     * Creates a {@code PersonCode} with the given {@code Flashcard} and index to display."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardCard(Flashcard flashcard, int displayedIndex) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"        this.flashcard \u003d flashcard;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"        question.setText(flashcard.getQuestion().value);"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"        answer.setText(flashcard.getAnswer().value);"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        flashcard.getTags().stream()"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"    // experiments"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"     * Creates a {@code PersonCode} with the given {@code Flashcard} and index to display in quiz mode."},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":"    public FlashcardCard(Flashcard flashcard, int displayedIndex, boolean isQuiz) {"},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":"        this.flashcard \u003d flashcard;"},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"        id.setText(\"Quiz \" + displayedIndex + \": \");"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"        question.setText(flashcard.getQuestion().value);"},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"        answer.setText(\"Answer: \");"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"        flashcard.getTags().stream()"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"        if (!(other instanceof FlashcardCard)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"        FlashcardCard card \u003d (FlashcardCard) other;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"                \u0026\u0026 flashcard.equals(card.flashcard);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":15,"Cheng20010201":16,"-":55}},{"path":"src/main/java/seedu/address/ui/FlashcardListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":" * Panel containing the list of persons."},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    private ListView\u003cFlashcard\u003e flashcardListView;"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"     * Creates a {@code FlashcardListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"        flashcardListView.setItems(flashcardList);"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"     * Creates a {@code FlashcardListPanel} with the given {@code ObservableList}."},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList, boolean isQuiz) {"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListView.setItems(flashcardList);"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCellQuiz());"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardCard}."},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"        @Override"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        protected void updateItem(Flashcard flashcard, boolean empty) {"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"            super.updateItem(flashcard, empty);"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"            if (empty || flashcard \u003d\u003d null) {"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"                setGraphic(null);"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"                setText(null);"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"            } else {"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"                setGraphic(new FlashcardCard(flashcard, getIndex() + 1).getRoot());"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardCard}."},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"    class FlashcardListViewCellQuiz extends ListCell\u003cFlashcard\u003e {"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"        protected void updateItem(Flashcard flashcard, boolean empty) {"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"            super.updateItem(flashcard, empty);"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"            if (empty || flashcard \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"                setGraphic(null);"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"                setText(null);"},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":"            } else {"},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"                setGraphic(new FlashcardCard(flashcard, getIndex() + 1, true).getRoot());"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":49,"xinweit":2,"Cheng20010201":26}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"import seedu.address.model.Quiz;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    private FlashcardListPanel flashcardListPanel;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"    private StackPane flashcardListPanelPlaceholder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":91,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":97,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":101,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":114,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":115,"author":{"gitId":"xinweit"},"content":"        // can have a separate Panel here for the quiz mode, structure similar to learn mode"},{"lineNumber":116,"author":{"gitId":"xinweit"},"content":"        // problem is fillInnerParts() is called in UiManager start method when the app starts,"},{"lineNumber":117,"author":{"gitId":"xinweit"},"content":"        // need to find a way to alternate between the two panels"},{"lineNumber":118,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":119,"author":{"gitId":"xinweit"},"content":"        // display menu mode at the launch of app"},{"lineNumber":120,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":121,"author":{"gitId":"xinweit"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"},{"lineNumber":122,"author":{"gitId":"xinweit"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":123,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":124,"author":{"gitId":"xinweit"},"content":"        // don\u0027t show flashcard panel at the start"},{"lineNumber":125,"author":{"gitId":"xinweit"},"content":"        enterStartMode();"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":138,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"xinweit"},"content":"     * Shows the flashcard panel for learn mode."},{"lineNumber":153,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"xinweit"},"content":"    private void enterLearnMode() {"},{"lineNumber":155,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"},{"lineNumber":156,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":157,"author":{"gitId":"xinweit"},"content":"        flashcardListPanelPlaceholder.setVisible(true);"},{"lineNumber":158,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":160,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"xinweit"},"content":"     * Hides the flashcard panel for start mode."},{"lineNumber":162,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"xinweit"},"content":"    private void enterStartMode() {"},{"lineNumber":164,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList());"},{"lineNumber":165,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":166,"author":{"gitId":"xinweit"},"content":"        flashcardListPanelPlaceholder.setVisible(false);"},{"lineNumber":167,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":169,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"Cheng20010201"},"content":"     * Shows the flashcard panel for learn mode."},{"lineNumber":171,"author":{"gitId":"Cheng20010201"},"content":"     * TODO: make changes to GUI and data structure s.t. only one question is shown at a time"},{"lineNumber":172,"author":{"gitId":"Cheng20010201"},"content":"     * and only the question description is shown (since it is quiz)."},{"lineNumber":173,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"Cheng20010201"},"content":"    private void enterQuizMode() {"},{"lineNumber":175,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList(), true);"},{"lineNumber":176,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":177,"author":{"gitId":"Cheng20010201"},"content":"        flashcardListPanelPlaceholder.setVisible(true);"},{"lineNumber":178,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":180,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"Yanneko"},"content":"     * Starts the quiz by generating the Quiz object and then showing the first question."},{"lineNumber":182,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"Yanneko"},"content":"    private void startQuiz() {"},{"lineNumber":184,"author":{"gitId":"Yanneko"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.startQuiz(), true);"},{"lineNumber":185,"author":{"gitId":"Yanneko"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":186,"author":{"gitId":"Yanneko"},"content":"        flashcardListPanelPlaceholder.setVisible(true);"},{"lineNumber":187,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":189,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"Yanneko"},"content":"     * Shows the next question in the quiz."},{"lineNumber":191,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"Yanneko"},"content":"    private void getNextFlashcard() {"},{"lineNumber":193,"author":{"gitId":"Yanneko"},"content":"        if (Quiz.hasSessionEnded()) {"},{"lineNumber":194,"author":{"gitId":"Yanneko"},"content":"            resultDisplay.setFeedbackToUser(Quiz.QUIZ_END_MESSAGE);"},{"lineNumber":195,"author":{"gitId":"Yanneko"},"content":"            flashcardListPanelPlaceholder.setVisible(false);"},{"lineNumber":196,"author":{"gitId":"Yanneko"},"content":"            return;"},{"lineNumber":197,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":199,"author":{"gitId":"Yanneko"},"content":"        flashcardListPanel \u003d new FlashcardListPanel(logic.getNextFlashcard(), true);"},{"lineNumber":200,"author":{"gitId":"Yanneko"},"content":"        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"},{"lineNumber":201,"author":{"gitId":"Yanneko"},"content":"        flashcardListPanelPlaceholder.setVisible(true);"},{"lineNumber":202,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":204,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":223,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardListPanel getFlashcardListPanel() {"},{"lineNumber":234,"author":{"gitId":"Jellybeano"},"content":"        return flashcardListPanel;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":239,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":244,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":245,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"xinweit"},"content":"            if (commandText.equals(\"end\")) {"},{"lineNumber":251,"author":{"gitId":"xinweit"},"content":"                enterStartMode();"},{"lineNumber":252,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":253,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":254,"author":{"gitId":"xinweit"},"content":"            if (commandText.equals(\"learn\")) {"},{"lineNumber":255,"author":{"gitId":"xinweit"},"content":"                enterLearnMode();"},{"lineNumber":256,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":257,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":258,"author":{"gitId":"Cheng20010201"},"content":"            if (commandText.equals(\"quiz\")) {"},{"lineNumber":259,"author":{"gitId":"Cheng20010201"},"content":"                enterQuizMode();"},{"lineNumber":260,"author":{"gitId":"Cheng20010201"},"content":"            }"},{"lineNumber":261,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":262,"author":{"gitId":"Yanneko"},"content":"            if (commandText.equals(\"start\")) {"},{"lineNumber":263,"author":{"gitId":"Yanneko"},"content":"                startQuiz();"},{"lineNumber":264,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":265,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":266,"author":{"gitId":"Yanneko"},"content":"            if (commandText.equals(\"next\")) {"},{"lineNumber":267,"author":{"gitId":"Yanneko"},"content":"                getNextFlashcard();"},{"lineNumber":268,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":269,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":286,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":287,"author":{"gitId":"xinweit"},"content":"     * Displays greetings message in resultDisplay."},{"lineNumber":288,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"xinweit"},"content":"    public void displayGreetings() {"},{"lineNumber":290,"author":{"gitId":"xinweit"},"content":"        resultDisplay.greetUser();"},{"lineNumber":291,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":4,"Yanneko":34,"xinweit":45,"Cheng20010201":19,"-":190}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"     * Greets the user."},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"    public void greetUser() {"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"        resultDisplay.setText(\"Hi! Welcome to WeebLingo, your personal Japanese tutor. Type \u0027learn\u0027 or \u0027quiz\u0027 \\n\""},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"                + \"to enter learn or quiz mode.\");"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xinweit":8,"-":28}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"            mainWindow.displayGreetings(); //Greet user at app startup"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xinweit":3,"-":88}},{"path":"src/main/resources/view/FlashcardListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$question\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"      \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Cheng20010201":2,"-":32}},{"path":"src/main/resources/view/FlashcardListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"  \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"Jellybeano":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        \u003cVBox fx:id\u003d\"flashcardList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"          \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jellybeano":2,"-":58}},{"path":"src/test/java/seedu/address/commons/util/RegexUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"public class RegexUtilTest {"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"    // ---------------- Tests for REGEX_JAP_WORD --------------------------------------"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"     * Valid Jap words: only contains hiragana, katakana, and kanji"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    public void regexJapWordValid() {"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"        String regex \u003d RegexUtil.REGEX_JAP_WORD;"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"        // normal hiragana"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"あ\".matches(regex));"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"が\".matches(regex));"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"っ\".matches(regex));"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ぴ\".matches(regex));"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"きゅ\".matches(regex));"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"        // normal katakana"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ア\".matches(regex));"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ザ\".matches(regex));"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ア\".matches(regex));"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ッ\".matches(regex));"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"キュ\".matches(regex));"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"        // normal kanji"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"留学生\".matches(regex));"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"私\".matches(regex));"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"金魚\".matches(regex));"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"天気\".matches(regex));"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"        // simple combinations"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"散りぬるを\".matches(regex));"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ツネナラムウヰノオクヤマ\".matches(regex));"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"浅き夢見じ酔ひもせず\".matches(regex));"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"     * Invalid Jap words: contains space, punctuation， latin and numeric characters"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"    public void regexJapWordInvalid() {"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"        String regex \u003d RegexUtil.REGEX_JAP_WORD;"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"\".matches(regex));"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\" \".matches(regex));"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\" 天気\".matches(regex));"},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気 \".matches(regex));"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気。\".matches(regex));"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気、\".matches(regex));"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"、天気\".matches(regex));"},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気 \".matches(regex));"},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\" 天気\".matches(regex));"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"123天気\".matches(regex));"},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"latin天気\".matches(regex));"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気latin\".matches(regex));"},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"\u0026*()(\u0026**天気\".matches(regex));"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気^\u0026(^\u0026\u0026(^ \".matches(regex));"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"weather\".matches(regex));"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天123気weather\".matches(regex));"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"天気Ä\".matches(regex));"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"    // ---------------- Tests for REGEX_JAP_SENTENCE --------------------------------------"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":"     * Valid Jap sentences: only contains hiragana, katakana, kanji, english letters, numbers punctuations and symbols."},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"    public void regexJapSentenceValid() {"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":"        String regex \u003d RegexUtil.REGEX_JAP_SENTENCE;"},{"lineNumber":77,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":78,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"猫になりたい。\".matches(regex));"},{"lineNumber":79,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"私は ただ、勉強したくないだけです。\".matches(regex));"},{"lineNumber":80,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"CS2103Tははははは\".matches(regex));"},{"lineNumber":81,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"収入は1000.25円。\".matches(regex));"},{"lineNumber":82,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"12345あいうえお\".matches(regex));"},{"lineNumber":83,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"ジンボはリンゴを食べる。\".matches(regex));"},{"lineNumber":84,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"。。。\".matches(regex));"},{"lineNumber":85,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":87,"author":{"gitId":"Cheng20010201"},"content":"    // ---------------- Tests for REGEX_JAP_SENTENCE --------------------------------------"},{"lineNumber":88,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":89,"author":{"gitId":"Cheng20010201"},"content":"     * Invalid Jap sentences: empty sentences, contain non-english \u0026 non-japanese \u0026 non-chinese characters"},{"lineNumber":90,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Cheng20010201"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"Cheng20010201"},"content":"    public void regexJapSentenceInvalid() {"},{"lineNumber":93,"author":{"gitId":"Cheng20010201"},"content":"        String regex \u003d RegexUtil.REGEX_JAP_SENTENCE;"},{"lineNumber":94,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":95,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"\".matches(regex));"},{"lineNumber":96,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"  \".matches(regex));"},{"lineNumber":97,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\" 収入は1000.25円。\".matches(regex));"},{"lineNumber":98,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"Glück\".matches(regex));"},{"lineNumber":99,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"Adiós\".matches(regex));"},{"lineNumber":100,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"아니요\".matches(regex));"},{"lineNumber":101,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":103,"author":{"gitId":"Cheng20010201"},"content":"    // ---------------- Tests for REGEX_ENG_WORD --------------------------------------"},{"lineNumber":104,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":105,"author":{"gitId":"Cheng20010201"},"content":"     * Both valid and invalid cases tests are here."},{"lineNumber":106,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Cheng20010201"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"Cheng20010201"},"content":"    public void regexEngWord() {"},{"lineNumber":109,"author":{"gitId":"Cheng20010201"},"content":"        String regex \u003d RegexUtil.REGEX_ENG_WORD;"},{"lineNumber":110,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":111,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"a\".matches(regex));"},{"lineNumber":112,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"A\".matches(regex));"},{"lineNumber":113,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"Yes\".matches(regex));"},{"lineNumber":114,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":115,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"\".matches(regex));"},{"lineNumber":116,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\" \".matches(regex));"},{"lineNumber":117,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"No.\".matches(regex));"},{"lineNumber":118,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"1word\".matches(regex));"},{"lineNumber":119,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"two words\".matches(regex));"},{"lineNumber":120,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"Adiós\".matches(regex));"},{"lineNumber":121,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"아니요\".matches(regex));"},{"lineNumber":122,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":124,"author":{"gitId":"Cheng20010201"},"content":"    // ---------------- Tests for REGEX_ENG_SENTENCE --------------------------------------"},{"lineNumber":125,"author":{"gitId":"Cheng20010201"},"content":"    /*"},{"lineNumber":126,"author":{"gitId":"Cheng20010201"},"content":"     * Both valid and invalid cases tests are here."},{"lineNumber":127,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Cheng20010201"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"Cheng20010201"},"content":"    public void regexEngSentence() {"},{"lineNumber":130,"author":{"gitId":"Cheng20010201"},"content":"        String regex \u003d RegexUtil.REGEX_ENG_SENTENCE;"},{"lineNumber":131,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":132,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"a\".matches(regex));"},{"lineNumber":133,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"A\".matches(regex));"},{"lineNumber":134,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"Yes\".matches(regex));"},{"lineNumber":135,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"True.\".matches(regex));"},{"lineNumber":136,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"Haha means happiness.\".matches(regex));"},{"lineNumber":137,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"1 means one.\".matches(regex));"},{"lineNumber":138,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"......\".matches(regex));"},{"lineNumber":139,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"I ate dinner.\".matches(regex));"},{"lineNumber":140,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"We all agreed; it was a magnificent evening.\".matches(regex));"},{"lineNumber":141,"author":{"gitId":"Cheng20010201"},"content":"        assertTrue(\"Oh, how I\u0027d love to go!\".matches(regex));"},{"lineNumber":142,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":143,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"\".matches(regex));"},{"lineNumber":144,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\" \".matches(regex));"},{"lineNumber":145,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"这不对！\".matches(regex));"},{"lineNumber":146,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"Adiós\".matches(regex));"},{"lineNumber":147,"author":{"gitId":"Cheng20010201"},"content":"        assertFalse(\"아니요\".matches(regex));"},{"lineNumber":148,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":149}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"import seedu.address.logic.commands.LearnCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"        String learnCommand \u003d LearnCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"        assertCommandSuccess(learnCommand, LearnCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"    //@Test"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    //public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"    //    // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"    //    JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"    //            new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"    //    JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"    //            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    //    StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"    //    logic \u003d new LogicManager(model, storage);"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"    //    // Execute add command"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    //    String addCommand \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_A"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"    //            + ANSWER_DESC_A;"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"    //    Flashcard expectedFlashcard \u003d new FlashcardBuilder(AMY).withTags().build();"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"    //    ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"    //    expectedModel.addFlashcard(expectedFlashcard);"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"    //    String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"    //    assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"    //}"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashcardList().remove(0));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":21,"xinweit":3,"-":124}},{"path":"src/test/java/seedu/address/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xinweit":4,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.QuestionContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    public static final String VALID_QUESTION_A \u003d \"あ\";"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    public static final String VALID_QUESTION_B \u003d \"い\";"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"    public static final String VALID_ANSWER_A \u003d \"a\";"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    public static final String VALID_ANSWER_B \u003d \"i\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    public static final String QUESTION_DESC_A \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_A;"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    public static final String QUESTION_DESC_B \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_B;"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    public static final String ANSWER_DESC_A \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_A;"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    public static final String ANSWER_DESC_B \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_B;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER; // empty string not allowed for answeres"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"     * - the answer book, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":88,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Jellybeano"},"content":"     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"Jellybeano"},"content":"        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"},{"lineNumber":98,"author":{"gitId":"Jellybeano"},"content":"        final String[] splitName \u003d flashcard.getQuestion().toString().split(\"\\\\s+\");"},{"lineNumber":99,"author":{"gitId":"Jellybeano"},"content":"        model.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(1, model.getFilteredFlashcardList().size());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":24,"-":80}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    //    public void execute_exit_success() {"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"    //        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"    //        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":5,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    //    public void execute_help_success() {"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"    //        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"    //        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":5,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.testutil.TypicalFlashcards.getTypicalAddressBook;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    //    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    //        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    //    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"    //        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    //        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":10,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"import seedu.address.logic.commands.LearnCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"        assertTrue(parser.parseCommand(LearnCommand.COMMAND_WORD) instanceof LearnCommand);"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"        assertTrue(parser.parseCommand(LearnCommand.COMMAND_WORD + \" 3\") instanceof LearnCommand);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"            -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":2,"xinweit":3,"-":45}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Answer;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    private static final String INVALID_ANSWER \u003d \" \";"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"    private static final String INVALID_QUESTION \u003d \"how do you spell elephant?\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    private static final String VALID_ANSWER \u003d \"a\";"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    private static final String VALID_QUESTION \u003d \"あ\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"    public void parseAnswer_null_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    public void parseAnswer_invalidValue_throwsParseException() {"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"    public void parseAnswer_validValueWithoutWhitespace_returnsanswer() throws Exception {"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"    public void parseAnswer_validValueWithWhitespace_returnsTrimmedanswer() throws Exception {"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"        Answer expectedanswer \u003d new Answer(VALID_ANSWER);"},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(expectedanswer, ParserUtil.parseAnswer(answerWithWhitespace));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"    public void parseQuestion_null_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"    public void parseQuestion_invalidValue_throwsParseException() {"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":86,"author":{"gitId":"Jellybeano"},"content":"    //    public void parseQuestion_validValueWithoutWhitespace_returnsquestion() throws Exception {"},{"lineNumber":87,"author":{"gitId":"Jellybeano"},"content":"    //        Question expectedquestion \u003d new Question(VALID_QUESTION);"},{"lineNumber":88,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedquestion, ParserUtil.parseQuestion(VALID_QUESTION));"},{"lineNumber":89,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":92,"author":{"gitId":"Jellybeano"},"content":"    //    public void parseQuestion_validValueWithWhitespace_returnsTrimmedquestion() throws Exception {"},{"lineNumber":93,"author":{"gitId":"Jellybeano"},"content":"    //        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"    //        Question expectedquestion \u003d new Question(VALID_QUESTION);"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedquestion, ParserUtil.parseQuestion(questionWithWhitespace));"},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":34,"-":109}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"        assertEquals(Collections.emptyList(), addressBook.getFlashcardList());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    //    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"    //        addressBook.resetData(newData);"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(newData, addressBook);"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"    //    public void resetData_withDuplicateFlashcards_throwsDuplicateFlashcardException() {"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"    //        // Two flashcards with the same identity fields"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"    //        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withAnswer(VALID_ANSWER_B)"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"    //        .withTags(VALID_TAG_HUSBAND)"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"    //                .build();"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"    //        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBookStub newData \u003d new AddressBookStub(newFlashcards);"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(DuplicateFlashcardException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasFlashcard(null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"    //    public void hasFlashcard_flashcardNotInAddressBook_returnsFalse() {"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(addressBook.hasFlashcard(ALICE));"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"    //    public void hasFlashcard_flashcardInAddressBook_returnsTrue() {"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"    //        addressBook.addFlashcard(ALICE);"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(addressBook.hasFlashcard(ALICE));"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"    //    public void hasFlashcard_flashcardWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"    //        addressBook.addFlashcard(ALICE);"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"    //        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withAnswer(VALID_ANSWER_B)"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    //        .withTags(VALID_TAG_HUSBAND)"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"    //                .build();"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(addressBook.hasFlashcard(editedAlice));"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"    public void getFlashcardList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getFlashcardList().remove(0));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"     * A stub ReadOnlyAddressBook whose flashcards list can violate interface constraints."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"        AddressBookStub(Collection\u003cFlashcard\u003e flashcards) {"},{"lineNumber":85,"author":{"gitId":"Jellybeano"},"content":"            this.flashcards.setAll(flashcards);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"Jellybeano"},"content":"        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"},{"lineNumber":90,"author":{"gitId":"Jellybeano"},"content":"            return flashcards;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":49,"-":45}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashcard(null));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"    //    public void hasFlashcard_flashcardNotInAddressBook_returnsFalse() {"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(modelManager.hasFlashcard(ALICE));"},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"    //    public void hasFlashcard_flashcardInAddressBook_returnsTrue() {"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"    //        modelManager.addFlashcard(ALICE);"},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(modelManager.hasFlashcard(ALICE));"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":86,"author":{"gitId":"Jellybeano"},"content":"            -\u003e modelManager.getFilteredFlashcardList().remove(0));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":90,"author":{"gitId":"Jellybeano"},"content":"    //    public void equals() {"},{"lineNumber":91,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook addressBook \u003d new AddressBookBuilder().withFlashcard(ALICE).withFlashcard(BENSON).build();"},{"lineNumber":92,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":93,"author":{"gitId":"Jellybeano"},"content":"    //        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"    //        // same values -\u003e returns true"},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"    //        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":97,"author":{"gitId":"Jellybeano"},"content":"    //        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":98,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":99,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":100,"author":{"gitId":"Jellybeano"},"content":"    //        // same object -\u003e returns true"},{"lineNumber":101,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":102,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":103,"author":{"gitId":"Jellybeano"},"content":"    //        // null -\u003e returns false"},{"lineNumber":104,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(modelManager.equals(null));"},{"lineNumber":105,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":106,"author":{"gitId":"Jellybeano"},"content":"    //        // different types -\u003e returns false"},{"lineNumber":107,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(modelManager.equals(5));"},{"lineNumber":108,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":109,"author":{"gitId":"Jellybeano"},"content":"    //        // different addressBook -\u003e returns false"},{"lineNumber":110,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":111,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":112,"author":{"gitId":"Jellybeano"},"content":"    //        // different filteredList -\u003e returns false"},{"lineNumber":113,"author":{"gitId":"Jellybeano"},"content":"    //        String[] keywords \u003d ALICE.getQuestion().value.split(\"\\\\s+\");"},{"lineNumber":114,"author":{"gitId":"Jellybeano"},"content":"    //        modelManager.updateFilteredFlashcardList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":115,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":116,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":117,"author":{"gitId":"Jellybeano"},"content":"    //        // resets modelManager to initial state for upcoming tests"},{"lineNumber":118,"author":{"gitId":"Jellybeano"},"content":"    //        modelManager.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"},{"lineNumber":119,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":120,"author":{"gitId":"Jellybeano"},"content":"    //        // different userPrefs -\u003e returns false"},{"lineNumber":121,"author":{"gitId":"Jellybeano"},"content":"    //        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":122,"author":{"gitId":"Jellybeano"},"content":"    //        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":123,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":124,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":50,"-":75}},{"path":"src/test/java/seedu/address/model/person/AnswerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"public class AnswerTest {"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"//    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(NullPointerException.class, () -\u003e new Answer(null));"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"//    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"//        String invalidAnswer \u003d \"\";"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"//    public void isValidAnswer() {"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"//        // null answer"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"//        // invalid answers"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(Answer.isValidAnswer(\"\")); // empty string"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"//        // valid answers"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(Answer.isValidAnswer(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(Answer.isValidAnswer(\"-\")); // one character"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(Answer.isValidAnswer(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long answer"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":30}},{"path":"src/test/java/seedu/address/model/person/FlashcardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"public class FlashcardTest {"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"    //commented out for now"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"//        Flashcard flashcard \u003d new FlashcardBuilder().build();"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(UnsupportedOperationException.class, () -\u003e flashcard.getTags().remove(0));"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"//    public void isSameFlashcard() {"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"//        // same object -\u003e returns true"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(ALICE.isSameFlashcard(ALICE));"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"//        // null -\u003e returns false"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.isSameFlashcard(null));"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"//        // same name, all other attributes different -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"//        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withPhone(VALID_PHONE_BOB).withQuestion(VALID_QUESTION_B)"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"//                .withAnswer(VALID_ANSWER_B).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(ALICE.isSameFlashcard(editedAlice));"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"//        // different name, all other attributes same -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"//        editedAlice \u003d new FlashcardBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.isSameFlashcard(editedAlice));"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"//        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"//        Flashcard editedBob \u003d new FlashcardBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(BOB.isSameFlashcard(editedBob));"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"//        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"//        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"//        editedBob \u003d new FlashcardBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(BOB.isSameFlashcard(editedBob));"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"//    public void equals() {"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"//        // same values -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"//        Flashcard aliceCopy \u003d new FlashcardBuilder(ALICE).build();"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"//        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"//        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"//        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(null));"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"//        // different type -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(5));"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"//        // different flashcard -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(BOB));"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"//        // different name -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"//        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"//        // different phone -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"//        editedAlice \u003d new FlashcardBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"//        // different email -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"//        editedAlice \u003d new FlashcardBuilder(ALICE).withQuestion(VALID_QUESTION_B).build();"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"//        // different address -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"//        editedAlice \u003d new FlashcardBuilder(ALICE).withAnswer(VALID_ANSWER_B).build();"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"//"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"//        // different tags -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"//        editedAlice \u003d new FlashcardBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":77}},{"path":"src/test/java/seedu/address/model/person/QuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"public class QuestionTest {"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Question(null));"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"    public void constructor_invalidquestion_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"        String invalidquestion \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidquestion));"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"    public void isValidQuestion() {"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"        // null question"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"        // blank question"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"        assertFalse(Question.isValidQuestion(\"\")); // empty string"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"        assertFalse(Question.isValidQuestion(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"        //        // missing parts"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"@example.com\")); // missing local part"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@\")); // missing domain name"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"        //"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"        //        // invalid parts"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@-\")); // invalid domain name"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\" peterjack@example.com\")); // leading space"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@example.com \")); // trailing space"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"        //        assertFalse(Question.isValidQuestion(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"        //"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"        //        // valid question"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"PeterJack_1190@example.com\"));"},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"a@bc\")); // minimal"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"test@localhost\")); // alphabets only"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\"));"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"        //        //above is special characters local part"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"a1+be!@example1.com\"));"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"        //        //above is mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"peter_jack@very-very-very-long-example.com\"));"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"        //        //above is long domain name"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"        //        assertTrue(Question.isValidQuestion(\"if.you.dream.it_you.can.do.it@example.com\"));"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"        //        //above is long local part"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":64}},{"path":"src/test/java/seedu/address/model/person/UniqueFlashcardListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"public class UniqueFlashcardListTest {"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    public void contains_nullFlashcard_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.contains(null));"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    //    public void contains_flashcardNotInList_returnsFalse() {"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"    //        assertFalse(uniqueFlashcardList.contains(ALICE));"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"    //    public void contains_flashcardInList_returnsTrue() {"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(uniqueFlashcardList.contains(ALICE));"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    //    public void contains_flashcardWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"    //        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE)"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    //        .withAnswer(VALID_ANSWER_B).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    //                .build();"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    //        assertTrue(uniqueFlashcardList.contains(editedAlice));"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"    public void add_nullFlashcard_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.add(null));"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"    //    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.add(ALICE));"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(null, ALICE));"},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, null));"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, ALICE));"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.setFlashcard(ALICE, ALICE);"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    //        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"    //        expectedUniqueFlashcardList.add(ALICE);"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_editedFlashcardHasSameIdentity_success() {"},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"    //        Flashcard editedAlice \u003d new FlashcardBuilder(ALICE)"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"    //        .withAnswer(VALID_ANSWER_B).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"    //                .build();"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.setFlashcard(ALICE, editedAlice);"},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"    //        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"    //        expectedUniqueFlashcardList.add(editedAlice);"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":83,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":85,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":86,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.setFlashcard(ALICE, BOB);"},{"lineNumber":89,"author":{"gitId":"Jellybeano"},"content":"    //        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":90,"author":{"gitId":"Jellybeano"},"content":"    //        expectedUniqueFlashcardList.add(BOB);"},{"lineNumber":91,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":92,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":93,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":94,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":95,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"},{"lineNumber":96,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":97,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(BOB);"},{"lineNumber":98,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList.setFlashcard(ALICE, BOB));"},{"lineNumber":99,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":100,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":101,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"Jellybeano"},"content":"    public void remove_nullFlashcard_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.remove(null));"},{"lineNumber":104,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":106,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":107,"author":{"gitId":"Jellybeano"},"content":"    //    public void remove_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"},{"lineNumber":108,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(FlashcardNotFoundException.class, () -\u003e uniqueFlashcardList.remove(ALICE));"},{"lineNumber":109,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":110,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":111,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":112,"author":{"gitId":"Jellybeano"},"content":"    //    public void remove_existingFlashcard_removesFlashcard() {"},{"lineNumber":113,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":114,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.remove(ALICE);"},{"lineNumber":115,"author":{"gitId":"Jellybeano"},"content":"    //        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":116,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":117,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":118,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":119,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"},{"lineNumber":121,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null));"},{"lineNumber":122,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":124,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":125,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardList() {"},{"lineNumber":126,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":127,"author":{"gitId":"Jellybeano"},"content":"    //        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":128,"author":{"gitId":"Jellybeano"},"content":"    //        expectedUniqueFlashcardList.add(BOB);"},{"lineNumber":129,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"},{"lineNumber":130,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":131,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":132,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":133,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"Jellybeano"},"content":"    public void setFlashcards_nullList_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null));"},{"lineNumber":136,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":138,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":139,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcards_list_replacesOwnListWithProvidedList() {"},{"lineNumber":140,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.add(ALICE);"},{"lineNumber":141,"author":{"gitId":"Jellybeano"},"content":"    //        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(BOB);"},{"lineNumber":142,"author":{"gitId":"Jellybeano"},"content":"    //        uniqueFlashcardList.setFlashcards(flashcardList);"},{"lineNumber":143,"author":{"gitId":"Jellybeano"},"content":"    //        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"},{"lineNumber":144,"author":{"gitId":"Jellybeano"},"content":"    //        expectedUniqueFlashcardList.add(BOB);"},{"lineNumber":145,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"},{"lineNumber":146,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":147,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":148,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":149,"author":{"gitId":"Jellybeano"},"content":"    //    public void setFlashcards_listWithDuplicateFlashcards_throwsDuplicateFlashcardException() {"},{"lineNumber":150,"author":{"gitId":"Jellybeano"},"content":"    //        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":151,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(DuplicateFlashcardException.class, () -\u003e uniqueFlashcardList"},{"lineNumber":152,"author":{"gitId":"Jellybeano"},"content":"    //        .setFlashcards(listWithDuplicateFlashcards));"},{"lineNumber":153,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":154,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":155,"author":{"gitId":"Jellybeano"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"Jellybeano"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":157,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":158,"author":{"gitId":"Jellybeano"},"content":"            -\u003e uniqueFlashcardList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":159,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":160}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedFlashcardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.testutil.TypicalFlashcards.BENSON;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"public class JsonAdaptedFlashcardTest {"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"    private static final String INVALID_ANSWER \u003d \" \";"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    private static final String INVALID_QUESTION \u003d \"how do you spell elephant?\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":"    private static final String VALID_QUESTION \u003d BENSON.getQuestion().toString();"},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    private static final String VALID_ANSWER \u003d BENSON.getAnswer().toString();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"//    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"//        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(BENSON);"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"//        assertEquals(BENSON, flashcard.toModelType());"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"//    public void toModelType_invalidQuestion_throwsIllegalValueException() {"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"//        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"//                new JsonAdaptedFlashcard(INVALID_QUESTION, VALID_ANSWER, VALID_TAGS);"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"//        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"//    public void toModelType_nullQuestion_throwsIllegalValueException() {"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"//        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_ANSWER, VALID_TAGS);"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"//    public void toModelType_invalidAnswer_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"//        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"//                new JsonAdaptedFlashcard(VALID_QUESTION, INVALID_ANSWER, VALID_TAGS);"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"//        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"//    public void toModelType_nullAnswer_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"//        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_QUESTION, null, VALID_TAGS);"},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"//    @Test"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"//    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"//        JsonAdaptedFlashcard flashcard \u003d"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"//                new JsonAdaptedFlashcard(VALID_QUESTION, VALID_ANSWER, invalidTags);"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"//        assertThrows(IllegalValueException.class, flashcard::toModelType);"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"//    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":45,"-":20}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get("},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"            \"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"    public void readAddressBook_invalidFlashcardAddressBook_throwDataConversionException() {"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidFlashcardAddressBook.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"    public void readAddressBook_invalidAndValidFlashcardAddressBook_throwDataConversionException() {"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook("},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"                \"invalidAndValidFlashcardAddressBook.json\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"    //    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"    //        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    //        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"    //        // Save in new file and read back"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"    //        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    //        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":71,"author":{"gitId":"Jellybeano"},"content":"    //        // Modify data, overwrite exiting file, and read back"},{"lineNumber":72,"author":{"gitId":"Jellybeano"},"content":"    //        original.addFlashcard(HOON);"},{"lineNumber":73,"author":{"gitId":"Jellybeano"},"content":"    //        original.removeFlashcard(ALICE);"},{"lineNumber":74,"author":{"gitId":"Jellybeano"},"content":"    //        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":75,"author":{"gitId":"Jellybeano"},"content":"    //        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":76,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":77,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":78,"author":{"gitId":"Jellybeano"},"content":"    //        // Save and read without specifying file path"},{"lineNumber":79,"author":{"gitId":"Jellybeano"},"content":"    //        original.addFlashcard(IDA);"},{"lineNumber":80,"author":{"gitId":"Jellybeano"},"content":"    //        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"},{"lineNumber":81,"author":{"gitId":"Jellybeano"},"content":"    //        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"},{"lineNumber":82,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":83,"author":{"gitId":"Jellybeano"},"content":"    //"},{"lineNumber":84,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":32,"-":75}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get("},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"            \"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    private static final Path TYPICAL_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFlashcardsAddressBook.json\");"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFlashcardAddressBook.json\");"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"    private static final Path DUPLICATE_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFlashcardAddressBook.json\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"    //    public void toModelType_typicalFlashcardsFile_success() throws Exception {"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"    //        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    //                JsonSerializableAddressBook.class).get();"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook typicalFlashcardsAddressBook \u003d TypicalFlashcards.getTypicalAddressBook();"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(addressBookFromFile, typicalFlashcardsAddressBook);"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"    //    public void toModelType_invalidFlashcardFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    //        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    //                JsonSerializableAddressBook.class).get();"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    //    public void toModelType_duplicateFlashcards_throwsIllegalValueException() throws Exception {"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"    //        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    //                JsonSerializableAddressBook.class).get();"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"    //        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_FLASHCARD,"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    //                dataFromFile::toModelType);"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":28,"-":10}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":36,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":37,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":38,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":39,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"    //    @Test"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"    //    public void addressBookReadSave() throws Exception {"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"    //        /*"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"    //         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"    //         * {@link JsonAddressBookStorage} class."},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"    //         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"    //         */"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"    //        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"    //        storageManager.saveAddressBook(original);"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"    //        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":"    //        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    //    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":12,"-":53}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"     * Adds a new {@code Flashcard} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"    public AddressBookBuilder withFlashcard(Flashcard flashcard) {"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"        addressBook.addFlashcard(flashcard);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":4,"-":30}},{"path":"src/test/java/seedu/address/testutil/FlashcardBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Answer;"},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Question;"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"import seedu.address.model.util.LocalDatabasePopulator;"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":" * A utility class to help with building Flashcard objects."},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"public class FlashcardBuilder {"},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    public static final String DEFAULT_QUESTION \u003d \"あ\";"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"    public static final String DEFAULT_ANSWER \u003d \"a\";"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"    private Question question;"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"    private Answer answer;"},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"     * Creates a {@code FlashcardBuilder} with the default details."},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardBuilder() {"},{"lineNumber":28,"author":{"gitId":"Jellybeano"},"content":"        question \u003d new Question(DEFAULT_QUESTION);"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"        answer \u003d new Answer(DEFAULT_ANSWER);"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardBuilder(Flashcard flashcardToCopy) {"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"        question \u003d flashcardToCopy.getQuestion();"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"        answer \u003d flashcardToCopy.getAnswer();"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"        tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"},{"lineNumber":40,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardBuilder withTags(String ... tags) {"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"        this.tags \u003d LocalDatabasePopulator.getTagSet(tags);"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Jellybeano"},"content":"     * Sets the {@code answer} of the {@code Flashcard} that we are building."},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardBuilder withAnswer(String answer) {"},{"lineNumber":54,"author":{"gitId":"Jellybeano"},"content":"        this.answer \u003d new Answer(answer);"},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Jellybeano"},"content":"     * Sets the {@code question} of the {@code Flashcard} that we are building."},{"lineNumber":60,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Jellybeano"},"content":"    public FlashcardBuilder withQuestion(String question) {"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"        this.question \u003d new Question(question);"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":66,"author":{"gitId":"Jellybeano"},"content":"    public Flashcard build() {"},{"lineNumber":67,"author":{"gitId":"Jellybeano"},"content":"        return new Flashcard(question, answer, tags);"},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":70,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":68,"Cheng20010201":2}},{"path":"src/test/java/seedu/address/testutil/FlashcardUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jellybeano"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":7,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":8,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":" * A utility class for Flashcard."},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Jellybeano"},"content":"public class FlashcardUtil {"},{"lineNumber":13,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":14,"author":{"gitId":"Jellybeano"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"     * Returns the part of command string for the given {@code flashcard}\u0027s details."},{"lineNumber":16,"author":{"gitId":"Jellybeano"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jellybeano"},"content":"    public static String getFlashcardDetails(Flashcard flashcard) {"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"Jellybeano"},"content":"        sb.append(PREFIX_QUESTION + flashcard.getQuestion().value + \" \");"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"        sb.append(PREFIX_ANSWER + flashcard.getAnswer().value + \" \");"},{"lineNumber":21,"author":{"gitId":"Jellybeano"},"content":"        flashcard.getTags().stream().forEach("},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"        );"},{"lineNumber":24,"author":{"gitId":"Jellybeano"},"content":"        return sb.toString();"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":""},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"}"}],"authorContributionMap":{"Jellybeano":27}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"Jellybeano"},"content":"        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"        return Index.fromOneBased(model.getFilteredFlashcardList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Jellybeano"},"content":"    public static Flashcard getFlashcard(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"Jellybeano"},"content":"        return model.getFilteredFlashcardList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalFlashcards.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_A;"},{"lineNumber":4,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_B;"},{"lineNumber":5,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_A;"},{"lineNumber":6,"author":{"gitId":"Jellybeano"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_B;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"Jellybeano"},"content":"import seedu.address.model.person.Flashcard;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Jellybeano"},"content":" * A utility class containing a list of {@code Flashcard} objects to be used in tests."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Jellybeano"},"content":"public class TypicalFlashcards {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard ALICE \u003d new FlashcardBuilder()"},{"lineNumber":23,"author":{"gitId":"Jellybeano"},"content":"            .withAnswer(\"123, Jurong West Ave 6, #08-111\").withQuestion(\"alice@example.com\")"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":25,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard BENSON \u003d new FlashcardBuilder()"},{"lineNumber":26,"author":{"gitId":"Jellybeano"},"content":"            .withAnswer(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":27,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"johnd@example.com\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":29,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard CARL \u003d new FlashcardBuilder()"},{"lineNumber":30,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"heinz@example.com\").withAnswer(\"wall street\").build();"},{"lineNumber":31,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard DANIEL \u003d new FlashcardBuilder()"},{"lineNumber":32,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"cornelia@example.com\").withAnswer(\"10th street\").withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard ELLE \u003d new FlashcardBuilder()"},{"lineNumber":34,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"werner@example.com\").withAnswer(\"michegan ave\").build();"},{"lineNumber":35,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard FIONA \u003d new FlashcardBuilder()"},{"lineNumber":36,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"lydia@example.com\").withAnswer(\"little tokyo\").build();"},{"lineNumber":37,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard GEORGE \u003d new FlashcardBuilder()"},{"lineNumber":38,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"anna@example.com\").withAnswer(\"4th street\").build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":41,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard HOON \u003d new FlashcardBuilder()"},{"lineNumber":42,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"stefan@example.com\").withAnswer(\"little india\").build();"},{"lineNumber":43,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard IDA \u003d new FlashcardBuilder()"},{"lineNumber":44,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(\"hans@example.com\").withAnswer(\"chicago ave\").build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"Jellybeano"},"content":"    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":47,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard AMY \u003d new FlashcardBuilder()"},{"lineNumber":48,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(VALID_QUESTION_A).withAnswer(VALID_ANSWER_A).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":49,"author":{"gitId":"Jellybeano"},"content":"    public static final Flashcard BOB \u003d new FlashcardBuilder()"},{"lineNumber":50,"author":{"gitId":"Jellybeano"},"content":"            .withQuestion(VALID_QUESTION_B).withAnswer(VALID_ANSWER_B).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"Jellybeano"},"content":"    private TypicalFlashcards() {} // prevents instantiation"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Jellybeano"},"content":"     * Returns an {@code AddressBook} with all the typical flashcards."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":62,"author":{"gitId":"Jellybeano"},"content":"        for (Flashcard flashcard : getTypicalFlashcards()) {"},{"lineNumber":63,"author":{"gitId":"Jellybeano"},"content":"            ab.addFlashcard(flashcard);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"Jellybeano"},"content":"    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":36,"-":35}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"Jellybeano"},"content":"    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"Jellybeano"},"content":"    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"Jellybeano"},"content":"    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jellybeano":3,"-":9}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Jellybeano"},"content":"\u003c?import seedu.address.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jellybeano":1,"-":6}}]
